/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__parser
#define __PYX_HAVE_API__parser
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <set>
#include <vector>
#include <map>
#include "boost/smart_ptr/shared_ptr.hpp"
#include "autowrap_tools.hpp"
#include "stdlib.h"
#include "stdio.h"
#include "pythread.h"
#include "stdint.h"
#include "http_parser.h"
#include "http_parser.c"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii  # for cython>=0.19"
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "parser.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6parser_http_errno;
struct __pyx_obj_6parser_flags;
struct __pyx_obj_6parser_http_method;
struct __pyx_obj_6parser_http_parser_url_fields;
struct __pyx_obj_6parser_http_parser_type;
struct __pyx_obj_6parser__ParserData;
struct __pyx_obj_6parser_Parser;
struct __pyx_obj_6parser_HttpUrlParser;

/* "parser.pyx":66
 *     return py_result
 * 
 * cdef class http_errno:             # <<<<<<<<<<<<<<
 *     HPE_OK = 0
 *     HPE_CB_message_begin = 1
 */
struct __pyx_obj_6parser_http_errno {
  PyObject_HEAD
};


/* "parser.pyx":100
 *     HPE_UNKNOWN = 31
 * 
 * cdef class flags:             # <<<<<<<<<<<<<<
 *     F_CHUNKED = 1
 *     F_CONNECTION_KEEP_ALIVE = 2
 */
struct __pyx_obj_6parser_flags {
  PyObject_HEAD
};


/* "parser.pyx":109
 *     F_SKIPBODY = 64
 * 
 * cdef class http_method:             # <<<<<<<<<<<<<<
 *     HTTP_DELETE = 0
 *     HTTP_GET = 1
 */
struct __pyx_obj_6parser_http_method {
  PyObject_HEAD
};


/* "parser.pyx":144
 *     HTTP_UNLINK = 32
 * 
 * cdef class http_parser_url_fields:             # <<<<<<<<<<<<<<
 *     UF_SCHEMA = 0
 *     UF_HOST = 1
 */
struct __pyx_obj_6parser_http_parser_url_fields {
  PyObject_HEAD
};


/* "parser.pyx":154
 *     UF_MAX = 7
 * 
 * cdef class http_parser_type:             # <<<<<<<<<<<<<<
 *     HTTP_REQUEST = 0
 *     HTTP_RESPONSE = 1
 */
struct __pyx_obj_6parser_http_parser_type {
  PyObject_HEAD
};


/* "parser.pyx":288
 * 
 * 
 * cdef class _ParserData(object):             # <<<<<<<<<<<<<<
 *     cdef public object parent
 *     cdef public object delegate
 */
struct __pyx_obj_6parser__ParserData {
  PyObject_HEAD
  PyObject *parent;
  PyObject *delegate;
};


/* "parser.pyx":335
 * 
 * 
 * cdef class Parser(object):             # <<<<<<<<<<<<<<
 *     cdef http_parser.http_parser *_parser
 *     cdef http_parser.http_parser_settings _settings
 */
struct __pyx_obj_6parser_Parser {
  PyObject_HEAD
  struct __pyx_vtabstruct_6parser_Parser *__pyx_vtab;
  struct http_parser *_parser;
  struct http_parser_settings _settings;
  PyObject *delegate;
  PyObject *data;
};


/* "parser.pyx":534
 * 
 * 
 * cdef class HttpUrlParser(object):             # <<<<<<<<<<<<<<
 *     cdef http_parser.http_parser_url *_parser
 *     cdef object data
 */
struct __pyx_obj_6parser_HttpUrlParser {
  PyObject_HEAD
  struct __pyx_vtabstruct_6parser_HttpUrlParser *__pyx_vtab;
  struct http_parser_url *_parser;
  PyObject *data;
};



/* "parser.pyx":335
 * 
 * 
 * cdef class Parser(object):             # <<<<<<<<<<<<<<
 *     cdef http_parser.http_parser *_parser
 *     cdef http_parser.http_parser_settings _settings
 */

struct __pyx_vtabstruct_6parser_Parser {
  int (*_execute)(struct __pyx_obj_6parser_Parser *, char *, size_t);
  int (*_raise_errno_if_needed)(struct __pyx_obj_6parser_Parser *);
  int (*_assert_parser)(struct __pyx_obj_6parser_Parser *);
};
static struct __pyx_vtabstruct_6parser_Parser *__pyx_vtabptr_6parser_Parser;


/* "parser.pyx":534
 * 
 * 
 * cdef class HttpUrlParser(object):             # <<<<<<<<<<<<<<
 *     cdef http_parser.http_parser_url *_parser
 *     cdef object data
 */

struct __pyx_vtabstruct_6parser_HttpUrlParser {
  PyObject *(*_parse)(struct __pyx_obj_6parser_HttpUrlParser *, char *, size_t, PyBoolObject *);
};
static struct __pyx_vtabstruct_6parser_HttpUrlParser *__pyx_vtabptr_6parser_HttpUrlParser;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = PyThreadState_GET();\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple();\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      PyErr_Fetch(&type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      PyErr_Restore(type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = PyThreadState_GET();\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = PyThreadState_GET();\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if (1); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      PyErr_Fetch(&type, &value, &traceback);
      frame->f_lineno = lineno;
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          PyErr_Restore(type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = PyThreadState_GET();\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = PyThreadState_GET();\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if (1); else goto_error;
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE enum http_parser_type __Pyx_PyInt_As_enum__http_parser_type(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__flags(enum flags value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__http_parser_type(enum http_parser_type value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__http_parser_url_fields(enum http_parser_url_fields value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_6parser_6Parser__execute(struct __pyx_obj_6parser_Parser *__pyx_v_self, char *__pyx_v_data, size_t __pyx_v_length); /* proto*/
static int __pyx_f_6parser_6Parser__raise_errno_if_needed(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto*/
static int __pyx_f_6parser_6Parser__assert_parser(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6parser_13HttpUrlParser__parse(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self, char *__pyx_v_url, size_t __pyx_v_length, PyBoolObject *__pyx_v_is_connect); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'smart_ptr' */

/* Module declarations from 'AutowrapRefHolder' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'http_parser' */

/* Module declarations from 'parser' */
static PyTypeObject *__pyx_ptype_6parser_http_errno = 0;
static PyTypeObject *__pyx_ptype_6parser_flags = 0;
static PyTypeObject *__pyx_ptype_6parser_http_method = 0;
static PyTypeObject *__pyx_ptype_6parser_http_parser_url_fields = 0;
static PyTypeObject *__pyx_ptype_6parser_http_parser_type = 0;
static PyTypeObject *__pyx_ptype_6parser__ParserData = 0;
static PyTypeObject *__pyx_ptype_6parser_Parser = 0;
static PyTypeObject *__pyx_ptype_6parser_HttpUrlParser = 0;
static int __pyx_f_6parser_on_message_begin(struct http_parser *); /*proto*/
static int __pyx_f_6parser_on_req_url(struct http_parser *, char *, size_t); /*proto*/
static int __pyx_f_6parser_on_resp_status(struct http_parser *, char *, size_t); /*proto*/
static int __pyx_f_6parser_on_header_field(struct http_parser *, char *, size_t); /*proto*/
static int __pyx_f_6parser_on_header_value(struct http_parser *, char *, size_t); /*proto*/
static int __pyx_f_6parser_on_headers_complete(struct http_parser *); /*proto*/
static int __pyx_f_6parser_on_body(struct http_parser *, char *, size_t); /*proto*/
static int __pyx_f_6parser_on_message_complete(struct http_parser *); /*proto*/
static int __pyx_f_6parser_on_chunk_header(struct http_parser *); /*proto*/
static int __pyx_f_6parser_on_chunk_complete(struct http_parser *); /*proto*/
#define __Pyx_MODULE_NAME "parser"
int __pyx_module_is_main_parser = 0;

/* Implementation of 'parser' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static char __pyx_k_m[] = "m";
static char __pyx_k_r[] = "_r";
static char __pyx_k_rv[] = "rv";
static char __pyx_k_PY3[] = "PY3";
static char __pyx_k__26[] = "@";
static char __pyx_k__27[] = ":";
static char __pyx_k__28[] = "";
static char __pyx_k__30[] = ";";
static char __pyx_k__47[] = "*";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_err[] = "err";
static char __pyx_k_ret[] = "ret";
static char __pyx_k_six[] = "six";
static char __pyx_k_url[] = "url";
static char __pyx_k_args[] = "args";
static char __pyx_k_code[] = "code";
static char __pyx_k_data[] = "data";
static char __pyx_k_desc[] = "desc";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_path[] = "path";
static char __pyx_k_port[] = "port";
static char __pyx_k_self[] = "self";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_utf8[] = "utf8";
static char __pyx_k_ascii[] = "ascii";
static char __pyx_k_class[] = "__class__";
static char __pyx_k_errno[] = "errno";
static char __pyx_k_field[] = "field";
static char __pyx_k_major[] = "major";
static char __pyx_k_minor[] = "minor";
static char __pyx_k_query[] = "query";
static char __pyx_k_range[] = "range";
static char __pyx_k_slots[] = "__slots__";
static char __pyx_k_split[] = "split";
static char __pyx_k_value[] = "value";
static char __pyx_k_HPE_OK[] = "HPE_OK";
static char __pyx_k_UF_MAX[] = "UF_MAX";
static char __pyx_k_append[] = "append";
static char __pyx_k_decode[] = "decode";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_format[] = "format";
static char __pyx_k_geturl[] = "geturl";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_length[] = "length";
static char __pyx_k_method[] = "method";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_netloc[] = "netloc";
static char __pyx_k_object[] = "object";
static char __pyx_k_params[] = "params";
static char __pyx_k_parent[] = "parent";
static char __pyx_k_parser[] = "parser";
static char __pyx_k_scheme[] = "scheme";
static char __pyx_k_UF_HOST[] = "UF_HOST";
static char __pyx_k_UF_PATH[] = "UF_PATH";
static char __pyx_k_UF_PORT[] = "UF_PORT";
static char __pyx_k_destroy[] = "destroy";
static char __pyx_k_on_body[] = "on_body";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_HTTP_ACL[] = "HTTP_ACL";
static char __pyx_k_HTTP_GET[] = "HTTP_GET";
static char __pyx_k_HTTP_PUT[] = "HTTP_PUT";
static char __pyx_k_UF_QUERY[] = "UF_QUERY";
static char __pyx_k_delegate[] = "delegate";
static char __pyx_k_fragment[] = "fragment";
static char __pyx_k_hostname[] = "hostname";
static char __pyx_k_password[] = "password";
static char __pyx_k_property[] = "property";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_raw_path[] = "raw_path";
static char __pyx_k_to_bytes[] = "to_bytes";
static char __pyx_k_urlparse[] = "urlparse";
static char __pyx_k_userinfo[] = "userinfo";
static char __pyx_k_username[] = "username";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_F_CHUNKED[] = "F_CHUNKED";
static char __pyx_k_F_UPGRADE[] = "F_UPGRADE";
static char __pyx_k_HTTP_BIND[] = "HTTP_BIND";
static char __pyx_k_HTTP_BOTH[] = "HTTP_BOTH";
static char __pyx_k_HTTP_COPY[] = "HTTP_COPY";
static char __pyx_k_HTTP_HEAD[] = "HTTP_HEAD";
static char __pyx_k_HTTP_LINK[] = "HTTP_LINK";
static char __pyx_k_HTTP_LOCK[] = "HTTP_LOCK";
static char __pyx_k_HTTP_MOVE[] = "HTTP_MOVE";
static char __pyx_k_HTTP_POST[] = "HTTP_POST";
static char __pyx_k_UF_SCHEMA[] = "UF_SCHEMA";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_py_result[] = "py_result";
static char __pyx_k_BothParser[] = "BothParser";
static char __pyx_k_F_SKIPBODY[] = "F_SKIPBODY";
static char __pyx_k_F_TRAILING[] = "F_TRAILING";
static char __pyx_k_HPE_CB_url[] = "HPE_CB_url";
static char __pyx_k_HPE_PAUSED[] = "HPE_PAUSED";
static char __pyx_k_HPE_STRICT[] = "HPE_STRICT";
static char __pyx_k_HTTP_MERGE[] = "HTTP_MERGE";
static char __pyx_k_HTTP_MKCOL[] = "HTTP_MKCOL";
static char __pyx_k_HTTP_PATCH[] = "HTTP_PATCH";
static char __pyx_k_HTTP_PURGE[] = "HTTP_PURGE";
static char __pyx_k_HTTP_TRACE[] = "HTTP_TRACE";
static char __pyx_k_as_strings[] = "as_strings";
static char __pyx_k_flags_bits[] = "_flags_bits";
static char __pyx_k_is_chunked[] = "is_chunked";
static char __pyx_k_is_connect[] = "is_connect";
static char __pyx_k_keep_alive[] = "keep_alive";
static char __pyx_k_namedtuple[] = "namedtuple";
static char __pyx_k_on_req_url[] = "on_req_url";
static char __pyx_k_on_upgrade[] = "on_upgrade";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_urlunparse[] = "urlunparse";
static char __pyx_k_HPE_CB_body[] = "HPE_CB_body";
static char __pyx_k_HPE_UNKNOWN[] = "HPE_UNKNOWN";
static char __pyx_k_HTTP_DELETE[] = "HTTP_DELETE";
static char __pyx_k_HTTP_NOTIFY[] = "HTTP_NOTIFY";
static char __pyx_k_HTTP_REBIND[] = "HTTP_REBIND";
static char __pyx_k_HTTP_REPORT[] = "HTTP_REPORT";
static char __pyx_k_HTTP_SEARCH[] = "HTTP_SEARCH";
static char __pyx_k_HTTP_UNBIND[] = "HTTP_UNBIND";
static char __pyx_k_HTTP_UNLINK[] = "HTTP_UNLINK";
static char __pyx_k_HTTP_UNLOCK[] = "HTTP_UNLOCK";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_ParseResult[] = "ParseResult";
static char __pyx_k_UF_FRAGMENT[] = "UF_FRAGMENT";
static char __pyx_k_UF_USERINFO[] = "UF_USERINFO";
static char __pyx_k_collections[] = "collections";
static char __pyx_k_data_object[] = "data: object";
static char __pyx_k_parser_type[] = "parser_type";
static char __pyx_k_HTTP_CONNECT[] = "HTTP_CONNECT";
static char __pyx_k_HTTP_MSEARCH[] = "HTTP_MSEARCH";
static char __pyx_k_HTTP_OPTIONS[] = "HTTP_OPTIONS";
static char __pyx_k_HTTP_REQUEST[] = "HTTP_REQUEST";
static char __pyx_k_urllib_parse[] = "urllib.parse";
static char __pyx_k_HPE_CB_status[] = "HPE_CB_status";
static char __pyx_k_HTTP_CHECKOUT[] = "HTTP_CHECKOUT";
static char __pyx_k_HTTP_PROPFIND[] = "HTTP_PROPFIND";
static char __pyx_k_HTTP_RESPONSE[] = "HTTP_RESPONSE";
static char __pyx_k_RequestParser[] = "RequestParser";
static char __pyx_k_body_is_final[] = "body_is_final";
static char __pyx_k_on_req_method[] = "on_req_method";
static char __pyx_k_parent_object[] = "parent: object";
static char __pyx_k_HTTP_PROPPATCH[] = "HTTP_PROPPATCH";
static char __pyx_k_HTTP_SUBSCRIBE[] = "HTTP_SUBSCRIBE";
static char __pyx_k_ParserDelegate[] = "ParserDelegate";
static char __pyx_k_ResponseParser[] = "ResponseParser";
static char __pyx_k_on_resp_status[] = "on_resp_status";
static char __pyx_k_HPE_INVALID_URL[] = "HPE_INVALID_URL";
static char __pyx_k_HPE_LF_EXPECTED[] = "HPE_LF_EXPECTED";
static char __pyx_k_HTTP_MKACTIVITY[] = "HTTP_MKACTIVITY";
static char __pyx_k_HTTP_MKCALENDAR[] = "HTTP_MKCALENDAR";
static char __pyx_k_delegate_object[] = "delegate: object";
static char __pyx_k_http_errno_name[] = "http_errno_name";
static char __pyx_k_http_method_str[] = "http_method_str";
static char __pyx_k_on_chunk_header[] = "on_chunk_header";
static char __pyx_k_on_header_field[] = "on_header_field";
static char __pyx_k_on_header_value[] = "on_header_value";
static char __pyx_k_on_http_version[] = "on_http_version";
static char __pyx_k_parser_delegate[] = "parser_delegate";
static char __pyx_k_HPE_INVALID_HOST[] = "HPE_INVALID_HOST";
static char __pyx_k_HPE_INVALID_PATH[] = "HPE_INVALID_PATH";
static char __pyx_k_HPE_INVALID_PORT[] = "HPE_INVALID_PORT";
static char __pyx_k_HTTP_UNSUBSCRIBE[] = "HTTP_UNSUBSCRIBE";
static char __pyx_k_ParseResult_path[] = "ParseResult.path";
static char __pyx_k_arg_m_wrong_type[] = "arg m wrong type";
static char __pyx_k_has_chunked_flag[] = "has_chunked_flag";
static char __pyx_k_has_upgrade_flag[] = "has_upgrade_flag";
static char __pyx_k_on_message_begin[] = "on_message_begin";
static char __pyx_k_has_skipbody_flag[] = "has_skipbody_flag";
static char __pyx_k_has_trailing_flag[] = "has_trailing_flag";
static char __pyx_k_on_chunk_complete[] = "on_chunk_complete";
static char __pyx_k_should_keep_alive[] = "should_keep_alive";
static char __pyx_k_F_CONNECTION_CLOSE[] = "F_CONNECTION_CLOSE";
static char __pyx_k_HPE_INVALID_METHOD[] = "HPE_INVALID_METHOD";
static char __pyx_k_HPE_INVALID_STATUS[] = "HPE_INVALID_STATUS";
static char __pyx_k_ParseResult_geturl[] = "ParseResult.geturl";
static char __pyx_k_ParseResult_netloc[] = "ParseResult.netloc";
static char __pyx_k_ParseResult_params[] = "ParseResult.params";
static char __pyx_k_arg_err_wrong_type[] = "arg err wrong type";
static char __pyx_k_as_urlparse_result[] = "as_urlparse_result";
static char __pyx_k_HPE_CB_chunk_header[] = "HPE_CB_chunk_header";
static char __pyx_k_HPE_CB_header_field[] = "HPE_CB_header_field";
static char __pyx_k_HPE_CB_header_value[] = "HPE_CB_header_value";
static char __pyx_k_HPE_HEADER_OVERFLOW[] = "HPE_HEADER_OVERFLOW";
static char __pyx_k_HPE_INVALID_VERSION[] = "HPE_INVALID_VERSION";
static char __pyx_k_http_parser_version[] = "http_parser_version";
static char __pyx_k_on_headers_complete[] = "on_headers_complete";
static char __pyx_k_on_message_complete[] = "on_message_complete";
static char __pyx_k_F_CONNECTION_UPGRADE[] = "F_CONNECTION_UPGRADE";
static char __pyx_k_HPE_CB_message_begin[] = "HPE_CB_message_begin";
static char __pyx_k_HPE_INVALID_CONSTANT[] = "HPE_INVALID_CONSTANT";
static char __pyx_k_HPE_INVALID_FRAGMENT[] = "HPE_INVALID_FRAGMENT";
static char __pyx_k_ParseResult_password[] = "ParseResult.password";
static char __pyx_k_ParseResult_username[] = "ParseResult.username";
static char __pyx_k_HPE_CB_chunk_complete[] = "HPE_CB_chunk_complete";
static char __pyx_k_HPE_CLOSED_CONNECTION[] = "HPE_CLOSED_CONNECTION";
static char __pyx_k_HPE_INVALID_EOF_STATE[] = "HPE_INVALID_EOF_STATE";
static char __pyx_k_HPE_INVALID_CHUNK_SIZE[] = "HPE_INVALID_CHUNK_SIZE";
static char __pyx_k_ParseResult_as_strings[] = "ParseResult.as_strings";
static char __pyx_k_ParserDelegate_on_body[] = "ParserDelegate.on_body";
static char __pyx_k_http_errno_description[] = "http_errno_description";
static char __pyx_k_F_CONNECTION_KEEP_ALIVE[] = "F_CONNECTION_KEEP_ALIVE";
static char __pyx_k_HPE_CB_headers_complete[] = "HPE_CB_headers_complete";
static char __pyx_k_HPE_CB_message_complete[] = "HPE_CB_message_complete";
static char __pyx_k_HPE_INVALID_HEADER_TOKEN[] = "HPE_INVALID_HEADER_TOKEN";
static char __pyx_k_HPE_INVALID_QUERY_STRING[] = "HPE_INVALID_QUERY_STRING";
static char __pyx_k_URL_Parser_gave_error_rv[] = "URL Parser gave error: {rv}";
static char __pyx_k_as_urlparse_result_tuple[] = "_as_urlparse_result_tuple";
static char __pyx_k_ParserDelegate_on_req_url[] = "ParserDelegate.on_req_url";
static char __pyx_k_ParserDelegate_on_upgrade[] = "ParserDelegate.on_upgrade";
static char __pyx_k_has_connection_close_flag[] = "has_connection_close_flag";
static char __pyx_k_HPE_INVALID_CONTENT_LENGTH[] = "HPE_INVALID_CONTENT_LENGTH";
static char __pyx_k_HPE_INVALID_INTERNAL_STATE[] = "HPE_INVALID_INTERNAL_STATE";
static char __pyx_k_has_connection_upgrade_flag[] = "has_connection_upgrade_flag";
static char __pyx_k_ParserDelegate_on_req_method[] = "ParserDelegate.on_req_method";
static char __pyx_k_ParserDelegate_on_resp_status[] = "ParserDelegate.on_resp_status";
static char __pyx_k_Can_not_coerce_type_into_bytes[] = "Can not coerce type: {} into bytes.";
static char __pyx_k_ParseResult_as_urlparse_result[] = "ParseResult.as_urlparse_result";
static char __pyx_k_ParserDelegate_on_chunk_header[] = "ParserDelegate.on_chunk_header";
static char __pyx_k_ParserDelegate_on_header_field[] = "ParserDelegate.on_header_field";
static char __pyx_k_ParserDelegate_on_header_value[] = "ParserDelegate.on_header_value";
static char __pyx_k_ParserDelegate_on_http_version[] = "ParserDelegate.on_http_version";
static char __pyx_k_Users_trevorj_vk_git_proxy__ex[] = "/Users/trevorj/vk/git/proxy/_ex/joyent-http-parser/parser.pyx";
static char __pyx_k_has_connection_keep_alive_flag[] = "has_connection_keep_alive_flag";
static char __pyx_k_ParseResult__as_urlparse_result[] = "ParseResult._as_urlparse_result_tuple";
static char __pyx_k_ParserDelegate_on_message_begin[] = "ParserDelegate.on_message_begin";
static char __pyx_k_ParserDelegate_on_chunk_complete[] = "ParserDelegate.on_chunk_complete";
static char __pyx_k_ParserDelegate_on_headers_comple[] = "ParserDelegate.on_headers_complete";
static char __pyx_k_ParserDelegate_on_message_comple[] = "ParserDelegate.on_message_complete";
static char __pyx_k_Parser_destroyed_or_not_initiali[] = "Parser destroyed or not initialized!";
static char __pyx_k_Parser_did_not_parse_all_of_data[] = "Parser did not parse all of data length but gave an OK back?";
static char __pyx_k_Parser_gave_error_errno_name_des[] = "Parser gave error {errno}/{name}: {desc}";
static PyObject *__pyx_n_s_BothParser;
static PyObject *__pyx_kp_u_Can_not_coerce_type_into_bytes;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_F_CHUNKED;
static PyObject *__pyx_n_s_F_CONNECTION_CLOSE;
static PyObject *__pyx_n_s_F_CONNECTION_KEEP_ALIVE;
static PyObject *__pyx_n_s_F_CONNECTION_UPGRADE;
static PyObject *__pyx_n_s_F_SKIPBODY;
static PyObject *__pyx_n_s_F_TRAILING;
static PyObject *__pyx_n_s_F_UPGRADE;
static PyObject *__pyx_n_s_HPE_CB_body;
static PyObject *__pyx_n_s_HPE_CB_chunk_complete;
static PyObject *__pyx_n_s_HPE_CB_chunk_header;
static PyObject *__pyx_n_s_HPE_CB_header_field;
static PyObject *__pyx_n_s_HPE_CB_header_value;
static PyObject *__pyx_n_s_HPE_CB_headers_complete;
static PyObject *__pyx_n_s_HPE_CB_message_begin;
static PyObject *__pyx_n_s_HPE_CB_message_complete;
static PyObject *__pyx_n_s_HPE_CB_status;
static PyObject *__pyx_n_s_HPE_CB_url;
static PyObject *__pyx_n_s_HPE_CLOSED_CONNECTION;
static PyObject *__pyx_n_s_HPE_HEADER_OVERFLOW;
static PyObject *__pyx_n_s_HPE_INVALID_CHUNK_SIZE;
static PyObject *__pyx_n_s_HPE_INVALID_CONSTANT;
static PyObject *__pyx_n_s_HPE_INVALID_CONTENT_LENGTH;
static PyObject *__pyx_n_s_HPE_INVALID_EOF_STATE;
static PyObject *__pyx_n_s_HPE_INVALID_FRAGMENT;
static PyObject *__pyx_n_s_HPE_INVALID_HEADER_TOKEN;
static PyObject *__pyx_n_s_HPE_INVALID_HOST;
static PyObject *__pyx_n_s_HPE_INVALID_INTERNAL_STATE;
static PyObject *__pyx_n_s_HPE_INVALID_METHOD;
static PyObject *__pyx_n_s_HPE_INVALID_PATH;
static PyObject *__pyx_n_s_HPE_INVALID_PORT;
static PyObject *__pyx_n_s_HPE_INVALID_QUERY_STRING;
static PyObject *__pyx_n_s_HPE_INVALID_STATUS;
static PyObject *__pyx_n_s_HPE_INVALID_URL;
static PyObject *__pyx_n_s_HPE_INVALID_VERSION;
static PyObject *__pyx_n_s_HPE_LF_EXPECTED;
static PyObject *__pyx_n_s_HPE_OK;
static PyObject *__pyx_n_s_HPE_PAUSED;
static PyObject *__pyx_n_s_HPE_STRICT;
static PyObject *__pyx_n_s_HPE_UNKNOWN;
static PyObject *__pyx_n_s_HTTP_ACL;
static PyObject *__pyx_n_s_HTTP_BIND;
static PyObject *__pyx_n_s_HTTP_BOTH;
static PyObject *__pyx_n_s_HTTP_CHECKOUT;
static PyObject *__pyx_n_s_HTTP_CONNECT;
static PyObject *__pyx_n_s_HTTP_COPY;
static PyObject *__pyx_n_s_HTTP_DELETE;
static PyObject *__pyx_n_s_HTTP_GET;
static PyObject *__pyx_n_s_HTTP_HEAD;
static PyObject *__pyx_n_s_HTTP_LINK;
static PyObject *__pyx_n_s_HTTP_LOCK;
static PyObject *__pyx_n_s_HTTP_MERGE;
static PyObject *__pyx_n_s_HTTP_MKACTIVITY;
static PyObject *__pyx_n_s_HTTP_MKCALENDAR;
static PyObject *__pyx_n_s_HTTP_MKCOL;
static PyObject *__pyx_n_s_HTTP_MOVE;
static PyObject *__pyx_n_s_HTTP_MSEARCH;
static PyObject *__pyx_n_s_HTTP_NOTIFY;
static PyObject *__pyx_n_s_HTTP_OPTIONS;
static PyObject *__pyx_n_s_HTTP_PATCH;
static PyObject *__pyx_n_s_HTTP_POST;
static PyObject *__pyx_n_s_HTTP_PROPFIND;
static PyObject *__pyx_n_s_HTTP_PROPPATCH;
static PyObject *__pyx_n_s_HTTP_PURGE;
static PyObject *__pyx_n_s_HTTP_PUT;
static PyObject *__pyx_n_s_HTTP_REBIND;
static PyObject *__pyx_n_s_HTTP_REPORT;
static PyObject *__pyx_n_s_HTTP_REQUEST;
static PyObject *__pyx_n_s_HTTP_RESPONSE;
static PyObject *__pyx_n_s_HTTP_SEARCH;
static PyObject *__pyx_n_s_HTTP_SUBSCRIBE;
static PyObject *__pyx_n_s_HTTP_TRACE;
static PyObject *__pyx_n_s_HTTP_UNBIND;
static PyObject *__pyx_n_s_HTTP_UNLINK;
static PyObject *__pyx_n_s_HTTP_UNLOCK;
static PyObject *__pyx_n_s_HTTP_UNSUBSCRIBE;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_PY3;
static PyObject *__pyx_n_s_ParseResult;
static PyObject *__pyx_n_u_ParseResult;
static PyObject *__pyx_n_s_ParseResult__as_urlparse_result;
static PyObject *__pyx_n_s_ParseResult_as_strings;
static PyObject *__pyx_n_s_ParseResult_as_urlparse_result;
static PyObject *__pyx_n_s_ParseResult_geturl;
static PyObject *__pyx_n_s_ParseResult_netloc;
static PyObject *__pyx_n_s_ParseResult_params;
static PyObject *__pyx_n_s_ParseResult_password;
static PyObject *__pyx_n_s_ParseResult_path;
static PyObject *__pyx_n_s_ParseResult_username;
static PyObject *__pyx_n_s_ParserDelegate;
static PyObject *__pyx_n_s_ParserDelegate_on_body;
static PyObject *__pyx_n_s_ParserDelegate_on_chunk_complete;
static PyObject *__pyx_n_s_ParserDelegate_on_chunk_header;
static PyObject *__pyx_n_s_ParserDelegate_on_header_field;
static PyObject *__pyx_n_s_ParserDelegate_on_header_value;
static PyObject *__pyx_n_s_ParserDelegate_on_headers_comple;
static PyObject *__pyx_n_s_ParserDelegate_on_http_version;
static PyObject *__pyx_n_s_ParserDelegate_on_message_begin;
static PyObject *__pyx_n_s_ParserDelegate_on_message_comple;
static PyObject *__pyx_n_s_ParserDelegate_on_req_method;
static PyObject *__pyx_n_s_ParserDelegate_on_req_url;
static PyObject *__pyx_n_s_ParserDelegate_on_resp_status;
static PyObject *__pyx_n_s_ParserDelegate_on_upgrade;
static PyObject *__pyx_kp_u_Parser_destroyed_or_not_initiali;
static PyObject *__pyx_kp_u_Parser_did_not_parse_all_of_data;
static PyObject *__pyx_kp_u_Parser_gave_error_errno_name_des;
static PyObject *__pyx_n_s_RequestParser;
static PyObject *__pyx_n_s_ResponseParser;
static PyObject *__pyx_n_s_UF_FRAGMENT;
static PyObject *__pyx_n_s_UF_HOST;
static PyObject *__pyx_n_s_UF_MAX;
static PyObject *__pyx_n_s_UF_PATH;
static PyObject *__pyx_n_s_UF_PORT;
static PyObject *__pyx_n_s_UF_QUERY;
static PyObject *__pyx_n_s_UF_SCHEMA;
static PyObject *__pyx_n_s_UF_USERINFO;
static PyObject *__pyx_kp_u_URL_Parser_gave_error_rv;
static PyObject *__pyx_kp_s_Users_trevorj_vk_git_proxy__ex;
static PyObject *__pyx_kp_b__26;
static PyObject *__pyx_kp_b__27;
static PyObject *__pyx_kp_b__28;
static PyObject *__pyx_kp_u__28;
static PyObject *__pyx_kp_b__30;
static PyObject *__pyx_n_s__47;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_kp_u_arg_err_wrong_type;
static PyObject *__pyx_kp_u_arg_m_wrong_type;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_strings;
static PyObject *__pyx_n_s_as_urlparse_result;
static PyObject *__pyx_n_s_as_urlparse_result_tuple;
static PyObject *__pyx_n_u_ascii;
static PyObject *__pyx_n_s_body_is_final;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_code;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_delegate;
static PyObject *__pyx_n_s_desc;
static PyObject *__pyx_n_s_destroy;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_errno;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_flags_bits;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fragment;
static PyObject *__pyx_n_u_fragment;
static PyObject *__pyx_n_s_geturl;
static PyObject *__pyx_n_s_has_chunked_flag;
static PyObject *__pyx_n_s_has_connection_close_flag;
static PyObject *__pyx_n_s_has_connection_keep_alive_flag;
static PyObject *__pyx_n_s_has_connection_upgrade_flag;
static PyObject *__pyx_n_s_has_skipbody_flag;
static PyObject *__pyx_n_s_has_trailing_flag;
static PyObject *__pyx_n_s_has_upgrade_flag;
static PyObject *__pyx_n_s_hostname;
static PyObject *__pyx_n_u_hostname;
static PyObject *__pyx_n_s_http_errno_description;
static PyObject *__pyx_n_s_http_errno_name;
static PyObject *__pyx_n_s_http_method_str;
static PyObject *__pyx_n_s_http_parser_version;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_is_chunked;
static PyObject *__pyx_n_s_is_connect;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_keep_alive;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_major;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_minor;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_netloc;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_on_body;
static PyObject *__pyx_n_s_on_chunk_complete;
static PyObject *__pyx_n_s_on_chunk_header;
static PyObject *__pyx_n_s_on_header_field;
static PyObject *__pyx_n_s_on_header_value;
static PyObject *__pyx_n_s_on_headers_complete;
static PyObject *__pyx_n_s_on_http_version;
static PyObject *__pyx_n_s_on_message_begin;
static PyObject *__pyx_n_s_on_message_complete;
static PyObject *__pyx_n_s_on_req_method;
static PyObject *__pyx_n_s_on_req_url;
static PyObject *__pyx_n_s_on_resp_status;
static PyObject *__pyx_n_s_on_upgrade;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_n_s_parser_delegate;
static PyObject *__pyx_n_s_parser_type;
static PyObject *__pyx_n_s_password;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_port;
static PyObject *__pyx_n_u_port;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_py_result;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_query;
static PyObject *__pyx_n_u_query;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw_path;
static PyObject *__pyx_n_u_raw_path;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_rv;
static PyObject *__pyx_n_s_scheme;
static PyObject *__pyx_n_u_scheme;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_should_keep_alive;
static PyObject *__pyx_n_s_six;
static PyObject *__pyx_n_s_slots;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_bytes;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_n_s_urllib_parse;
static PyObject *__pyx_n_s_urlparse;
static PyObject *__pyx_n_s_urlunparse;
static PyObject *__pyx_n_s_userinfo;
static PyObject *__pyx_n_u_userinfo;
static PyObject *__pyx_n_s_username;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_pf_6parser_http_errno_description(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_err); /* proto */
static PyObject *__pyx_pf_6parser_2http_errno_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_err); /* proto */
static PyObject *__pyx_pf_6parser_4http_method_str(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_m); /* proto */
static PyObject *__pyx_pf_6parser_6http_parser_version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6parser_8to_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_on_message_begin(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_2on_req_method(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_method); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_4on_req_url(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_url); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_6on_resp_status(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_code, CYTHON_UNUSED PyObject *__pyx_v_desc); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_8on_header_field(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_field); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_10on_header_value(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_12on_http_version(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_major, CYTHON_UNUSED PyObject *__pyx_v_minor); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_14on_headers_complete(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_keep_alive); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_16on_body(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_data, CYTHON_UNUSED PyObject *__pyx_v_length, CYTHON_UNUSED PyObject *__pyx_v_is_chunked); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_18on_message_complete(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_is_chunked, CYTHON_UNUSED PyObject *__pyx_v_keep_alive); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_20on_chunk_header(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_22on_chunk_complete(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_14ParserDelegate_24on_upgrade(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_11_ParserData___cinit__(struct __pyx_obj_6parser__ParserData *__pyx_v_self, PyObject *__pyx_v_parent, PyObject *__pyx_v_delegate); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_2should_keep_alive(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_4body_is_final(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_6_flags_bits(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_8has_chunked_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_10has_connection_keep_alive_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_12has_connection_close_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_14has_connection_upgrade_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_16has_trailing_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_18has_upgrade_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_20has_skipbody_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_6parent___get__(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_11_ParserData_6parent_2__set__(struct __pyx_obj_6parser__ParserData *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6parser_11_ParserData_6parent_4__del__(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11_ParserData_8delegate___get__(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_11_ParserData_8delegate_2__set__(struct __pyx_obj_6parser__ParserData *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6parser_11_ParserData_8delegate_4__del__(struct __pyx_obj_6parser__ParserData *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_6Parser___cinit__(struct __pyx_obj_6parser_Parser *__pyx_v_self, enum http_parser_type __pyx_v_parser_type, PyObject *__pyx_v_delegate); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_2destroy(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static void __pyx_pf_6parser_6Parser_4__dealloc__(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_6execute(struct __pyx_obj_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_8pause(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_10resume(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_12body_is_final(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_14should_keep_alive(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_16_flags_bits(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_18has_chunked_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_20has_connection_keep_alive_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_22has_connection_close_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_24has_connection_upgrade_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_26has_trailing_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_28has_upgrade_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_30has_skipbody_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_8delegate___get__(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_6Parser_8delegate_2__set__(struct __pyx_obj_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6parser_6Parser_8delegate_4__del__(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_6Parser_4data___get__(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_6Parser_4data_2__set__(struct __pyx_obj_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6parser_6Parser_4data_4__del__(struct __pyx_obj_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_10BothParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate); /* proto */
static PyObject *__pyx_pf_6parser_12RequestParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate); /* proto */
static PyObject *__pyx_pf_6parser_14ResponseParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_netloc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_2path(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_4params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_6username(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_8password(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_10as_strings(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_12_as_urlparse_result_tuple(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_14as_urlparse_result(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_11ParseResult_16geturl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_6parser_13HttpUrlParser___cinit__(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_13HttpUrlParser_2destroy(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self); /* proto */
static void __pyx_pf_6parser_13HttpUrlParser_4__dealloc__(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6parser_13HttpUrlParser_6parse(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self, PyObject *__pyx_v_url, PyObject *__pyx_v_is_connect); /* proto */
static PyObject *__pyx_tp_new_6parser_http_errno(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser_flags(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser_http_method(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser_http_parser_url_fields(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser_http_parser_type(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser__ParserData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser_Parser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6parser_HttpUrlParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_17;
static PyObject *__pyx_int_18;
static PyObject *__pyx_int_19;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_21;
static PyObject *__pyx_int_22;
static PyObject *__pyx_int_23;
static PyObject *__pyx_int_24;
static PyObject *__pyx_int_25;
static PyObject *__pyx_int_26;
static PyObject *__pyx_int_27;
static PyObject *__pyx_int_28;
static PyObject *__pyx_int_29;
static PyObject *__pyx_int_30;
static PyObject *__pyx_int_31;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_64;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__41;

/* "parser.pyx":40
 *     char * _cast_const_away(char *)
 * 
 * def http_errno_description(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_1http_errno_description(PyObject *__pyx_self, PyObject *__pyx_arg_err); /*proto*/
static char __pyx_doc_6parser_http_errno_description[] = "http_errno_description(int err)";
static PyMethodDef __pyx_mdef_6parser_1http_errno_description = {"http_errno_description", (PyCFunction)__pyx_pw_6parser_1http_errno_description, METH_O, __pyx_doc_6parser_http_errno_description};
static PyObject *__pyx_pw_6parser_1http_errno_description(PyObject *__pyx_self, PyObject *__pyx_arg_err) {
  int __pyx_v_err;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("http_errno_description (wrapper)", 0);
  assert(__pyx_arg_err); {
    __pyx_v_err = __Pyx_PyInt_As_int(__pyx_arg_err); if (unlikely((__pyx_v_err == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.http_errno_description", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_http_errno_description(__pyx_self, ((int)__pyx_v_err));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_http_errno_description(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_err) {
  char *__pyx_v__r;
  char *__pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj_)
  __Pyx_RefNannySetupContext("http_errno_description", 0);
  __Pyx_TraceCall("http_errno_description", __pyx_f[0], 40, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":41
 * 
 * def http_errno_description(int err ):
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'             # <<<<<<<<<<<<<<
 * 
 *     cdef char  * _r = _cast_const_away(_http_errno_description_http_parser((<_http_errno>err)))
 */
  __Pyx_TraceLine(41,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    switch (__pyx_v_err) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_err_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "parser.pyx":43
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 *     cdef char  * _r = _cast_const_away(_http_errno_description_http_parser((<_http_errno>err)))             # <<<<<<<<<<<<<<
 *     py_result = <char *>(_r)
 *     return py_result
 */
  __Pyx_TraceLine(43,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v__r = _cast_const_away(http_errno_description(((enum http_errno)__pyx_v_err)));

  /* "parser.pyx":44
 * 
 *     cdef char  * _r = _cast_const_away(_http_errno_description_http_parser((<_http_errno>err)))
 *     py_result = <char *>(_r)             # <<<<<<<<<<<<<<
 *     return py_result
 * 
 */
  __Pyx_TraceLine(44,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_py_result = ((char *)__pyx_v__r);

  /* "parser.pyx":45
 *     cdef char  * _r = _cast_const_away(_http_errno_description_http_parser((<_http_errno>err)))
 *     py_result = <char *>(_r)
 *     return py_result             # <<<<<<<<<<<<<<
 * 
 * def http_errno_name(int err ):
 */
  __Pyx_TraceLine(45,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":40
 *     char * _cast_const_away(char *)
 * 
 * def http_errno_description(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.http_errno_description", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":47
 *     return py_result
 * 
 * def http_errno_name(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_3http_errno_name(PyObject *__pyx_self, PyObject *__pyx_arg_err); /*proto*/
static char __pyx_doc_6parser_2http_errno_name[] = "http_errno_name(int err)";
static PyMethodDef __pyx_mdef_6parser_3http_errno_name = {"http_errno_name", (PyCFunction)__pyx_pw_6parser_3http_errno_name, METH_O, __pyx_doc_6parser_2http_errno_name};
static PyObject *__pyx_pw_6parser_3http_errno_name(PyObject *__pyx_self, PyObject *__pyx_arg_err) {
  int __pyx_v_err;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("http_errno_name (wrapper)", 0);
  assert(__pyx_arg_err); {
    __pyx_v_err = __Pyx_PyInt_As_int(__pyx_arg_err); if (unlikely((__pyx_v_err == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.http_errno_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_2http_errno_name(__pyx_self, ((int)__pyx_v_err));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_2http_errno_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_err) {
  char *__pyx_v__r;
  char *__pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__2)
  __Pyx_RefNannySetupContext("http_errno_name", 0);
  __Pyx_TraceCall("http_errno_name", __pyx_f[0], 47, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":48
 * 
 * def http_errno_name(int err ):
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'             # <<<<<<<<<<<<<<
 * 
 *     cdef char  * _r = _cast_const_away(_http_errno_name_http_parser((<_http_errno>err)))
 */
  __Pyx_TraceLine(48,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    switch (__pyx_v_err) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_err_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "parser.pyx":50
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 *     cdef char  * _r = _cast_const_away(_http_errno_name_http_parser((<_http_errno>err)))             # <<<<<<<<<<<<<<
 *     py_result = <char *>(_r)
 *     return py_result
 */
  __Pyx_TraceLine(50,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v__r = _cast_const_away(http_errno_name(((enum http_errno)__pyx_v_err)));

  /* "parser.pyx":51
 * 
 *     cdef char  * _r = _cast_const_away(_http_errno_name_http_parser((<_http_errno>err)))
 *     py_result = <char *>(_r)             # <<<<<<<<<<<<<<
 *     return py_result
 * 
 */
  __Pyx_TraceLine(51,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_py_result = ((char *)__pyx_v__r);

  /* "parser.pyx":52
 *     cdef char  * _r = _cast_const_away(_http_errno_name_http_parser((<_http_errno>err)))
 *     py_result = <char *>(_r)
 *     return py_result             # <<<<<<<<<<<<<<
 * 
 * def http_method_str(int m ):
 */
  __Pyx_TraceLine(52,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":47
 *     return py_result
 * 
 * def http_errno_name(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.http_errno_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":54
 *     return py_result
 * 
 * def http_method_str(int m ):             # <<<<<<<<<<<<<<
 *     assert m in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'arg m wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_5http_method_str(PyObject *__pyx_self, PyObject *__pyx_arg_m); /*proto*/
static char __pyx_doc_6parser_4http_method_str[] = "http_method_str(int m)";
static PyMethodDef __pyx_mdef_6parser_5http_method_str = {"http_method_str", (PyCFunction)__pyx_pw_6parser_5http_method_str, METH_O, __pyx_doc_6parser_4http_method_str};
static PyObject *__pyx_pw_6parser_5http_method_str(PyObject *__pyx_self, PyObject *__pyx_arg_m) {
  int __pyx_v_m;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("http_method_str (wrapper)", 0);
  assert(__pyx_arg_m); {
    __pyx_v_m = __Pyx_PyInt_As_int(__pyx_arg_m); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.http_method_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_4http_method_str(__pyx_self, ((int)__pyx_v_m));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_4http_method_str(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_m) {
  char *__pyx_v__r;
  char *__pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("http_method_str", 0);
  __Pyx_TraceCall("http_method_str", __pyx_f[0], 54, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":55
 * 
 * def http_method_str(int m ):
 *     assert m in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'arg m wrong type'             # <<<<<<<<<<<<<<
 * 
 *     cdef char  * _r = _cast_const_away(_http_method_str_http_parser((<_http_method>m)))
 */
  __Pyx_TraceLine(55,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    switch (__pyx_v_m) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_m_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "parser.pyx":57
 *     assert m in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'arg m wrong type'
 * 
 *     cdef char  * _r = _cast_const_away(_http_method_str_http_parser((<_http_method>m)))             # <<<<<<<<<<<<<<
 *     py_result = <char *>(_r)
 *     return py_result
 */
  __Pyx_TraceLine(57,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v__r = _cast_const_away(http_method_str(((enum http_method)__pyx_v_m)));

  /* "parser.pyx":58
 * 
 *     cdef char  * _r = _cast_const_away(_http_method_str_http_parser((<_http_method>m)))
 *     py_result = <char *>(_r)             # <<<<<<<<<<<<<<
 *     return py_result
 * 
 */
  __Pyx_TraceLine(58,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_py_result = ((char *)__pyx_v__r);

  /* "parser.pyx":59
 *     cdef char  * _r = _cast_const_away(_http_method_str_http_parser((<_http_method>m)))
 *     py_result = <char *>(_r)
 *     return py_result             # <<<<<<<<<<<<<<
 * 
 * def http_parser_version():
 */
  __Pyx_TraceLine(59,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":54
 *     return py_result
 * 
 * def http_method_str(int m ):             # <<<<<<<<<<<<<<
 *     assert m in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'arg m wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.http_method_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":61
 *     return py_result
 * 
 * def http_parser_version():             # <<<<<<<<<<<<<<
 *     cdef unsigned long int _r = _http_parser_version_http_parser()
 *     py_result = <unsigned long int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_7http_parser_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6http_parser_version[] = "http_parser_version()";
static PyMethodDef __pyx_mdef_6parser_7http_parser_version = {"http_parser_version", (PyCFunction)__pyx_pw_6parser_7http_parser_version, METH_NOARGS, __pyx_doc_6parser_6http_parser_version};
static PyObject *__pyx_pw_6parser_7http_parser_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("http_parser_version (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6http_parser_version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6http_parser_version(CYTHON_UNUSED PyObject *__pyx_self) {
  unsigned long __pyx_v__r;
  unsigned long __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("http_parser_version", 0);
  __Pyx_TraceCall("http_parser_version", __pyx_f[0], 61, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":62
 * 
 * def http_parser_version():
 *     cdef unsigned long int _r = _http_parser_version_http_parser()             # <<<<<<<<<<<<<<
 *     py_result = <unsigned long int>_r
 *     return py_result
 */
  __Pyx_TraceLine(62,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v__r = http_parser_version();

  /* "parser.pyx":63
 * def http_parser_version():
 *     cdef unsigned long int _r = _http_parser_version_http_parser()
 *     py_result = <unsigned long int>_r             # <<<<<<<<<<<<<<
 *     return py_result
 * 
 */
  __Pyx_TraceLine(63,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_py_result = ((unsigned long)__pyx_v__r);

  /* "parser.pyx":64
 *     cdef unsigned long int _r = _http_parser_version_http_parser()
 *     py_result = <unsigned long int>_r
 *     return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class http_errno:
 */
  __Pyx_TraceLine(64,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":61
 *     return py_result
 * 
 * def http_parser_version():             # <<<<<<<<<<<<<<
 *     cdef unsigned long int _r = _http_parser_version_http_parser()
 *     py_result = <unsigned long int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("parser.http_parser_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":163
 *     import urlparse
 * 
 * def to_bytes(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_9to_bytes(PyObject *__pyx_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_6parser_8to_bytes[] = "to_bytes(data)";
static PyMethodDef __pyx_mdef_6parser_9to_bytes = {"to_bytes", (PyCFunction)__pyx_pw_6parser_9to_bytes, METH_O, __pyx_doc_6parser_8to_bytes};
static PyObject *__pyx_pw_6parser_9to_bytes(PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_8to_bytes(__pyx_self, ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_8to_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("to_bytes", 0);
  __Pyx_TraceCall("to_bytes", __pyx_f[0], 163, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_data);

  /* "parser.pyx":164
 * 
 * def to_bytes(data):
 *     if isinstance(data, bytes):             # <<<<<<<<<<<<<<
 *         pass
 *     elif isinstance(data, unicode):
 */
  __Pyx_TraceLine(164,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyBytes_Check(__pyx_v_data); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {
    goto __pyx_L3;
  }

  /* "parser.pyx":166
 *     if isinstance(data, bytes):
 *         pass
 *     elif isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         data = data.encode('utf8')
 *     elif isinstance(data, (list, bytearray)):
 */
  __Pyx_TraceLine(166,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyUnicode_Check(__pyx_v_data); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":167
 *         pass
 *     elif isinstance(data, unicode):
 *         data = data.encode('utf8')             # <<<<<<<<<<<<<<
 *     elif isinstance(data, (list, bytearray)):
 *         data = bytes(data)
 */
    __Pyx_TraceLine(167,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "parser.pyx":166
 *     if isinstance(data, bytes):
 *         pass
 *     elif isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         data = data.encode('utf8')
 *     elif isinstance(data, (list, bytearray)):
 */
    goto __pyx_L3;
  }

  /* "parser.pyx":168
 *     elif isinstance(data, unicode):
 *         data = data.encode('utf8')
 *     elif isinstance(data, (list, bytearray)):             # <<<<<<<<<<<<<<
 *         data = bytes(data)
 *     else:
 */
  __Pyx_TraceLine(168,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_Check(__pyx_v_data); 
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyByteArray_Check(__pyx_v_data); 
  __pyx_t_2 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "parser.pyx":169
 *         data = data.encode('utf8')
 *     elif isinstance(data, (list, bytearray)):
 *         data = bytes(data)             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception('Can not coerce type: {} into bytes.'.format(type(data)))
 */
    __Pyx_TraceLine(169,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_data);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "parser.pyx":168
 *     elif isinstance(data, unicode):
 *         data = data.encode('utf8')
 *     elif isinstance(data, (list, bytearray)):             # <<<<<<<<<<<<<<
 *         data = bytes(data)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "parser.pyx":171
 *         data = bytes(data)
 *     else:
 *         raise Exception('Can not coerce type: {} into bytes.'.format(type(data)))             # <<<<<<<<<<<<<<
 *     return data
 * 
 */
  __Pyx_TraceLine(171,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Can_not_coerce_type_into_bytes, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_data))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_data)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_data)));
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)Py_TYPE(__pyx_v_data)));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "parser.pyx":172
 *     else:
 *         raise Exception('Can not coerce type: {} into bytes.'.format(type(data)))
 *     return data             # <<<<<<<<<<<<<<
 * 
 * cdef int on_message_begin(http_parser.http_parser *parser) except -1:
 */
  __Pyx_TraceLine(172,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "parser.pyx":163
 *     import urlparse
 * 
 * def to_bytes(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         pass
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("parser.to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":174
 *     return data
 * 
 * cdef int on_message_begin(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_begin()
 */

static int __pyx_f_6parser_on_message_begin(struct http_parser *__pyx_v_parser) {
  PyObject *__pyx_v_parser_data = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_message_begin", 0);
  __Pyx_TraceCall("on_message_begin", __pyx_f[0], 174, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":175
 * 
 * cdef int on_message_begin(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_message_begin()
 *     return 0
 */
  __Pyx_TraceLine(175,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":176
 * cdef int on_message_begin(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_begin()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(176,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_message_begin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":177
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_begin()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_req_url(http_parser.http_parser *parser, char *data, size_t length) except -1:
 */
  __Pyx_TraceLine(177,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":174
 *     return data
 * 
 * cdef int on_message_begin(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.on_message_begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":179
 *     return 0
 * 
 * cdef int on_req_url(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     """ Request only """
 *     cdef object parser_data = <object> parser.data
 */

static int __pyx_f_6parser_on_req_url(struct http_parser *__pyx_v_parser, char *__pyx_v_data, size_t __pyx_v_length) {
  PyObject *__pyx_v_parser_data = 0;
  enum http_method __pyx_v_method_int;
  char const *__pyx_v_method;
  PyObject *__pyx_v_url = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_req_url", 0);
  __Pyx_TraceCall("on_req_url", __pyx_f[0], 179, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":181
 * cdef int on_req_url(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     """ Request only """
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     cdef http_parser.http_method method_int = <http_parser.http_method> parser.method
 *     cdef const char* method = http_parser.http_method_str(method_int)
 */
  __Pyx_TraceLine(181,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":182
 *     """ Request only """
 *     cdef object parser_data = <object> parser.data
 *     cdef http_parser.http_method method_int = <http_parser.http_method> parser.method             # <<<<<<<<<<<<<<
 *     cdef const char* method = http_parser.http_method_str(method_int)
 *     cdef object url = PyBytes_FromStringAndSize(data, length)
 */
  __Pyx_TraceLine(182,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_method_int = ((enum http_method)__pyx_v_parser->method);

  /* "parser.pyx":183
 *     cdef object parser_data = <object> parser.data
 *     cdef http_parser.http_method method_int = <http_parser.http_method> parser.method
 *     cdef const char* method = http_parser.http_method_str(method_int)             # <<<<<<<<<<<<<<
 *     cdef object url = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_req_method(method)
 */
  __Pyx_TraceLine(183,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_method = http_method_str(__pyx_v_method_int);

  /* "parser.pyx":184
 *     cdef http_parser.http_method method_int = <http_parser.http_method> parser.method
 *     cdef const char* method = http_parser.http_method_str(method_int)
 *     cdef object url = PyBytes_FromStringAndSize(data, length)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_req_method(method)
 *     parser_data.delegate.on_req_url(url)
 */
  __Pyx_TraceLine(184,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_data, __pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_url = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":185
 *     cdef const char* method = http_parser.http_method_str(method_int)
 *     cdef object url = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_req_method(method)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_req_url(url)
 *     return 0
 */
  __Pyx_TraceLine(185,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_req_method); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_method); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":186
 *     cdef object url = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_req_method(method)
 *     parser_data.delegate.on_req_url(url)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(186,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_on_req_url); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_url); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_url);
    __Pyx_GIVEREF(__pyx_v_url);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_url);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":187
 *     parser_data.delegate.on_req_method(method)
 *     parser_data.delegate.on_req_url(url)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_resp_status(http_parser.http_parser *parser, char *data, size_t length) except -1:
 */
  __Pyx_TraceLine(187,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":179
 *     return 0
 * 
 * cdef int on_req_url(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     """ Request only """
 *     cdef object parser_data = <object> parser.data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("parser.on_req_url", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_XDECREF(__pyx_v_url);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":189
 *     return 0
 * 
 * cdef int on_resp_status(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     """ Response only """
 *     cdef object parser_data = <object> parser.data
 */

static int __pyx_f_6parser_on_resp_status(struct http_parser *__pyx_v_parser, char *__pyx_v_data, size_t __pyx_v_length) {
  PyObject *__pyx_v_parser_data = 0;
  PyObject *__pyx_v_status = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_resp_status", 0);
  __Pyx_TraceCall("on_resp_status", __pyx_f[0], 189, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":191
 * cdef int on_resp_status(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     """ Response only """
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     cdef object status = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_resp_status(parser.status_code, status)
 */
  __Pyx_TraceLine(191,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":192
 *     """ Response only """
 *     cdef object parser_data = <object> parser.data
 *     cdef object status = PyBytes_FromStringAndSize(data, length)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_resp_status(parser.status_code, status)
 *     return 0
 */
  __Pyx_TraceLine(192,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_data, __pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":193
 *     cdef object parser_data = <object> parser.data
 *     cdef object status = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_resp_status(parser.status_code, status)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(193,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_resp_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_parser->status_code); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_status);
  __Pyx_GIVEREF(__pyx_v_status);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_status);
  __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":194
 *     cdef object status = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_resp_status(parser.status_code, status)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_header_field(http_parser.http_parser *parser, char *data, size_t length) except -1:
 */
  __Pyx_TraceLine(194,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":189
 *     return 0
 * 
 * cdef int on_resp_status(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     """ Response only """
 *     cdef object parser_data = <object> parser.data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("parser.on_resp_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":196
 *     return 0
 * 
 * cdef int on_header_field(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_field = PyBytes_FromStringAndSize(data, length)
 */

static int __pyx_f_6parser_on_header_field(struct http_parser *__pyx_v_parser, char *__pyx_v_data, size_t __pyx_v_length) {
  PyObject *__pyx_v_parser_data = 0;
  PyObject *__pyx_v_header_field = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_header_field", 0);
  __Pyx_TraceCall("on_header_field", __pyx_f[0], 196, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":197
 * 
 * cdef int on_header_field(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     cdef object header_field = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_header_field(header_field)
 */
  __Pyx_TraceLine(197,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":198
 * cdef int on_header_field(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_field = PyBytes_FromStringAndSize(data, length)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_header_field(header_field)
 *     return 0
 */
  __Pyx_TraceLine(198,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_data, __pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_header_field = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":199
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_field = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_header_field(header_field)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(199,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_header_field); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_header_field); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_header_field);
    __Pyx_GIVEREF(__pyx_v_header_field);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_header_field);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":200
 *     cdef object header_field = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_header_field(header_field)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_header_value(http_parser.http_parser *parser, char *data, size_t length) except -1:
 */
  __Pyx_TraceLine(200,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":196
 *     return 0
 * 
 * cdef int on_header_field(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_field = PyBytes_FromStringAndSize(data, length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.on_header_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_XDECREF(__pyx_v_header_field);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":202
 *     return 0
 * 
 * cdef int on_header_value(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_value = PyBytes_FromStringAndSize(data, length)
 */

static int __pyx_f_6parser_on_header_value(struct http_parser *__pyx_v_parser, char *__pyx_v_data, size_t __pyx_v_length) {
  PyObject *__pyx_v_parser_data = 0;
  PyObject *__pyx_v_header_value = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_header_value", 0);
  __Pyx_TraceCall("on_header_value", __pyx_f[0], 202, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":203
 * 
 * cdef int on_header_value(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     cdef object header_value = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_header_value(header_value)
 */
  __Pyx_TraceLine(203,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":204
 * cdef int on_header_value(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_value = PyBytes_FromStringAndSize(data, length)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_header_value(header_value)
 *     return 0
 */
  __Pyx_TraceLine(204,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_data, __pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_header_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":205
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_value = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_header_value(header_value)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(205,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_header_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_header_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_header_value);
    __Pyx_GIVEREF(__pyx_v_header_value);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_header_value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":206
 *     cdef object header_value = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_header_value(header_value)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_headers_complete(http_parser.http_parser *parser) except -1:
 */
  __Pyx_TraceLine(206,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":202
 *     return 0
 * 
 * cdef int on_header_value(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     cdef object header_value = PyBytes_FromStringAndSize(data, length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.on_header_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_XDECREF(__pyx_v_header_value);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":208
 *     return 0
 * 
 * cdef int on_headers_complete(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)
 */

static int __pyx_f_6parser_on_headers_complete(struct http_parser *__pyx_v_parser) {
  PyObject *__pyx_v_parser_data = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_headers_complete", 0);
  __Pyx_TraceCall("on_headers_complete", __pyx_f[0], 208, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":209
 * 
 * cdef int on_headers_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)
 *     parser_data.delegate.on_headers_complete(
 */
  __Pyx_TraceLine(209,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":210
 * cdef int on_headers_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_headers_complete(
 *         keep_alive=parser_data.parent.should_keep_alive(),
 */
  __Pyx_TraceLine(210,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_http_version); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(__pyx_v_parser->http_major); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_v_parser->http_minor); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":211
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)
 *     parser_data.delegate.on_headers_complete(             # <<<<<<<<<<<<<<
 *         keep_alive=parser_data.parent.should_keep_alive(),
 *         #flags=parser_data._flags_bits,
 */
  __Pyx_TraceLine(211,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_on_headers_complete); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":212
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)
 *     parser_data.delegate.on_headers_complete(
 *         keep_alive=parser_data.parent.should_keep_alive(),             # <<<<<<<<<<<<<<
 *         #flags=parser_data._flags_bits,
 *     )
 */
  __Pyx_TraceLine(212,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_parent); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_should_keep_alive); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_keep_alive, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":211
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)
 *     parser_data.delegate.on_headers_complete(             # <<<<<<<<<<<<<<
 *         keep_alive=parser_data.parent.should_keep_alive(),
 *         #flags=parser_data._flags_bits,
 */
  __Pyx_TraceLine(211,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":215
 *         #flags=parser_data._flags_bits,
 *     )
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_body(http_parser.http_parser *parser, char *data, size_t length) except -1:
 */
  __Pyx_TraceLine(215,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":208
 *     return 0
 * 
 * cdef int on_headers_complete(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_http_version(parser.http_major, parser.http_minor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("parser.on_headers_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":217
 *     return 0
 * 
 * cdef int on_body(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     cdef object body = PyBytes_FromStringAndSize(data, length)
 */

static int __pyx_f_6parser_on_body(struct http_parser *__pyx_v_parser, char *__pyx_v_data, size_t __pyx_v_length) {
  PyObject *__pyx_v_parser_data = 0;
  PyObject *__pyx_v_body = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_body", 0);
  __Pyx_TraceCall("on_body", __pyx_f[0], 217, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":218
 * 
 * cdef int on_body(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     cdef object body = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_body(
 */
  __Pyx_TraceLine(218,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":219
 * cdef int on_body(http_parser.http_parser *parser, char *data, size_t length) except -1:
 *     cdef object parser_data = <object> parser.data
 *     cdef object body = PyBytes_FromStringAndSize(data, length)             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_body(
 *         body,
 */
  __Pyx_TraceLine(219,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_data, __pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_body = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":220
 *     cdef object parser_data = <object> parser.data
 *     cdef object body = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_body(             # <<<<<<<<<<<<<<
 *         body,
 *         length,
 */
  __Pyx_TraceLine(220,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_on_body); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":222
 *     parser_data.delegate.on_body(
 *         body,
 *         length,             # <<<<<<<<<<<<<<
 *         is_chunked=parser_data.has_chunked_flag,
 *     )
 */
  __Pyx_TraceLine(222,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "parser.pyx":220
 *     cdef object parser_data = <object> parser.data
 *     cdef object body = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_body(             # <<<<<<<<<<<<<<
 *         body,
 *         length,
 */
  __Pyx_TraceLine(220,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_body);
  __Pyx_GIVEREF(__pyx_v_body);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_body);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "parser.pyx":223
 *         body,
 *         length,
 *         is_chunked=parser_data.has_chunked_flag,             # <<<<<<<<<<<<<<
 *     )
 *     return 0
 */
  __Pyx_TraceLine(223,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_has_chunked_flag); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_chunked, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "parser.pyx":220
 *     cdef object parser_data = <object> parser.data
 *     cdef object body = PyBytes_FromStringAndSize(data, length)
 *     parser_data.delegate.on_body(             # <<<<<<<<<<<<<<
 *         body,
 *         length,
 */
  __Pyx_TraceLine(220,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "parser.pyx":225
 *         is_chunked=parser_data.has_chunked_flag,
 *     )
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_message_complete(http_parser.http_parser *parser) except -1:
 */
  __Pyx_TraceLine(225,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":217
 *     return 0
 * 
 * cdef int on_body(http_parser.http_parser *parser, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     cdef object body = PyBytes_FromStringAndSize(data, length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.on_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_XDECREF(__pyx_v_body);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":227
 *     return 0
 * 
 * cdef int on_message_complete(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_complete(
 */

static int __pyx_f_6parser_on_message_complete(struct http_parser *__pyx_v_parser) {
  PyObject *__pyx_v_parser_data = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_message_complete", 0);
  __Pyx_TraceCall("on_message_complete", __pyx_f[0], 227, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":228
 * 
 * cdef int on_message_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_message_complete(
 *         is_chunked=parser_data.has_chunked_flag,
 */
  __Pyx_TraceLine(228,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":229
 * cdef int on_message_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_complete(             # <<<<<<<<<<<<<<
 *         is_chunked=parser_data.has_chunked_flag,
 *         keep_alive=parser_data.parent.should_keep_alive(),
 */
  __Pyx_TraceLine(229,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_on_message_complete); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":230
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_complete(
 *         is_chunked=parser_data.has_chunked_flag,             # <<<<<<<<<<<<<<
 *         keep_alive=parser_data.parent.should_keep_alive(),
 *         #flags=parser_data._flags_bits,
 */
  __Pyx_TraceLine(230,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_has_chunked_flag); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_chunked, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "parser.pyx":231
 *     parser_data.delegate.on_message_complete(
 *         is_chunked=parser_data.has_chunked_flag,
 *         keep_alive=parser_data.parent.should_keep_alive(),             # <<<<<<<<<<<<<<
 *         #flags=parser_data._flags_bits,
 *     )
 */
  __Pyx_TraceLine(231,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_parent); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_should_keep_alive); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_keep_alive, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "parser.pyx":229
 * cdef int on_message_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_complete(             # <<<<<<<<<<<<<<
 *         is_chunked=parser_data.has_chunked_flag,
 *         keep_alive=parser_data.parent.should_keep_alive(),
 */
  __Pyx_TraceLine(229,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "parser.pyx":234
 *         #flags=parser_data._flags_bits,
 *     )
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_chunk_header(http_parser.http_parser *parser) except -1:
 */
  __Pyx_TraceLine(234,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":227
 *     return 0
 * 
 * cdef int on_message_complete(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_message_complete(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("parser.on_message_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":236
 *     return 0
 * 
 * cdef int on_chunk_header(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_header()
 */

static int __pyx_f_6parser_on_chunk_header(struct http_parser *__pyx_v_parser) {
  PyObject *__pyx_v_parser_data = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_chunk_header", 0);
  __Pyx_TraceCall("on_chunk_header", __pyx_f[0], 236, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":237
 * 
 * cdef int on_chunk_header(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_chunk_header()
 *     return 0
 */
  __Pyx_TraceLine(237,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":238
 * cdef int on_chunk_header(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_header()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(238,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_chunk_header); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":239
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_header()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int on_chunk_complete(http_parser.http_parser *parser) except -1:
 */
  __Pyx_TraceLine(239,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":236
 *     return 0
 * 
 * cdef int on_chunk_header(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_header()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.on_chunk_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":241
 *     return 0
 * 
 * cdef int on_chunk_complete(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_complete()
 */

static int __pyx_f_6parser_on_chunk_complete(struct http_parser *__pyx_v_parser) {
  PyObject *__pyx_v_parser_data = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_chunk_complete", 0);
  __Pyx_TraceCall("on_chunk_complete", __pyx_f[0], 241, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":242
 * 
 * cdef int on_chunk_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data             # <<<<<<<<<<<<<<
 *     parser_data.delegate.on_chunk_complete()
 *     return 0
 */
  __Pyx_TraceLine(242,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((PyObject *)__pyx_v_parser->data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parser_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":243
 * cdef int on_chunk_complete(http_parser.http_parser *parser) except -1:
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_complete()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(243,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_parser_data, __pyx_n_s_delegate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_on_chunk_complete); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":244
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_complete()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(244,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = 0;
  goto __pyx_L0;

  /* "parser.pyx":241
 *     return 0
 * 
 * cdef int on_chunk_complete(http_parser.http_parser *parser) except -1:             # <<<<<<<<<<<<<<
 *     cdef object parser_data = <object> parser.data
 *     parser_data.delegate.on_chunk_complete()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.on_chunk_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parser_data);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":248
 * 
 * class ParserDelegate(object):
 *     def on_message_begin(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_1on_message_begin(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_on_message_begin[] = "ParserDelegate.on_message_begin(self)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_1on_message_begin = {"on_message_begin", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_1on_message_begin, METH_O, __pyx_doc_6parser_14ParserDelegate_on_message_begin};
static PyObject *__pyx_pw_6parser_14ParserDelegate_1on_message_begin(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_message_begin (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_on_message_begin(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_on_message_begin(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("on_message_begin", 0);
  __Pyx_TraceCall("on_message_begin", __pyx_f[0], 248, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_message_begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":251
 *         pass
 * 
 *     def on_req_method(self, method):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_3on_req_method(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_2on_req_method[] = "ParserDelegate.on_req_method(self, method)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_3on_req_method = {"on_req_method", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_3on_req_method, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_2on_req_method};
static PyObject *__pyx_pw_6parser_14ParserDelegate_3on_req_method(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_method = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_req_method (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_method,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_method)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_req_method", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_req_method") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_method = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_req_method", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_req_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_2on_req_method(__pyx_self, __pyx_v_self, __pyx_v_method);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_2on_req_method(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_method) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("on_req_method", 0);
  __Pyx_TraceCall("on_req_method", __pyx_f[0], 251, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_req_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":254
 *         pass
 * 
 *     def on_req_url(self, url):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_5on_req_url(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_4on_req_url[] = "ParserDelegate.on_req_url(self, url)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_5on_req_url = {"on_req_url", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_5on_req_url, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_4on_req_url};
static PyObject *__pyx_pw_6parser_14ParserDelegate_5on_req_url(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_url = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_req_url (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_url,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_url)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_req_url", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_req_url") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_url = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_req_url", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_req_url", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_4on_req_url(__pyx_self, __pyx_v_self, __pyx_v_url);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_4on_req_url(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_url) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("on_req_url", 0);
  __Pyx_TraceCall("on_req_url", __pyx_f[0], 254, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_req_url", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":257
 *         pass
 * 
 *     def on_resp_status(self, code, desc):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_7on_resp_status(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_6on_resp_status[] = "ParserDelegate.on_resp_status(self, code, desc)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_7on_resp_status = {"on_resp_status", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_7on_resp_status, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_6on_resp_status};
static PyObject *__pyx_pw_6parser_14ParserDelegate_7on_resp_status(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_code = 0;
  CYTHON_UNUSED PyObject *__pyx_v_desc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_resp_status (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_code,&__pyx_n_s_desc,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_code)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_resp_status", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_desc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_resp_status", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_resp_status") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_code = values[1];
    __pyx_v_desc = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_resp_status", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_resp_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_6on_resp_status(__pyx_self, __pyx_v_self, __pyx_v_code, __pyx_v_desc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_6on_resp_status(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_code, CYTHON_UNUSED PyObject *__pyx_v_desc) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__10)
  __Pyx_RefNannySetupContext("on_resp_status", 0);
  __Pyx_TraceCall("on_resp_status", __pyx_f[0], 257, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_resp_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":260
 *         pass
 * 
 *     def on_header_field(self, field):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_9on_header_field(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_8on_header_field[] = "ParserDelegate.on_header_field(self, field)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_9on_header_field = {"on_header_field", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_9on_header_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_8on_header_field};
static PyObject *__pyx_pw_6parser_14ParserDelegate_9on_header_field(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_field = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_header_field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_header_field", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_header_field") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_field = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_header_field", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_header_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_8on_header_field(__pyx_self, __pyx_v_self, __pyx_v_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_8on_header_field(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__11)
  __Pyx_RefNannySetupContext("on_header_field", 0);
  __Pyx_TraceCall("on_header_field", __pyx_f[0], 260, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_header_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":263
 *         pass
 * 
 *     def on_header_value(self, value):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_11on_header_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_10on_header_value[] = "ParserDelegate.on_header_value(self, value)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_11on_header_value = {"on_header_value", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_11on_header_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_10on_header_value};
static PyObject *__pyx_pw_6parser_14ParserDelegate_11on_header_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_header_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_header_value", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_header_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_header_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_header_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_10on_header_value(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_10on_header_value(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__12)
  __Pyx_RefNannySetupContext("on_header_value", 0);
  __Pyx_TraceCall("on_header_value", __pyx_f[0], 263, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_header_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":266
 *         pass
 * 
 *     def on_http_version(self, major, minor):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_13on_http_version(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_12on_http_version[] = "ParserDelegate.on_http_version(self, major, minor)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_13on_http_version = {"on_http_version", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_13on_http_version, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_12on_http_version};
static PyObject *__pyx_pw_6parser_14ParserDelegate_13on_http_version(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_major = 0;
  CYTHON_UNUSED PyObject *__pyx_v_minor = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_http_version (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_major,&__pyx_n_s_minor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_major)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_http_version", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_http_version", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_http_version") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_major = values[1];
    __pyx_v_minor = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_http_version", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_http_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_12on_http_version(__pyx_self, __pyx_v_self, __pyx_v_major, __pyx_v_minor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_12on_http_version(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_major, CYTHON_UNUSED PyObject *__pyx_v_minor) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("on_http_version", 0);
  __Pyx_TraceCall("on_http_version", __pyx_f[0], 266, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_http_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":269
 *         pass
 * 
 *     def on_headers_complete(self, keep_alive):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_15on_headers_complete(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_14on_headers_complete[] = "ParserDelegate.on_headers_complete(self, keep_alive)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_15on_headers_complete = {"on_headers_complete", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_15on_headers_complete, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_14on_headers_complete};
static PyObject *__pyx_pw_6parser_14ParserDelegate_15on_headers_complete(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keep_alive = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_headers_complete (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_keep_alive,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_alive)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_headers_complete", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_headers_complete") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_keep_alive = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_headers_complete", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_headers_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_14on_headers_complete(__pyx_self, __pyx_v_self, __pyx_v_keep_alive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_14on_headers_complete(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_keep_alive) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__14)
  __Pyx_RefNannySetupContext("on_headers_complete", 0);
  __Pyx_TraceCall("on_headers_complete", __pyx_f[0], 269, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_headers_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":272
 *         pass
 * 
 *     def on_body(self, data, length, is_chunked):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_17on_body(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_16on_body[] = "ParserDelegate.on_body(self, data, length, is_chunked)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_17on_body = {"on_body", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_17on_body, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_16on_body};
static PyObject *__pyx_pw_6parser_14ParserDelegate_17on_body(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_data = 0;
  CYTHON_UNUSED PyObject *__pyx_v_length = 0;
  CYTHON_UNUSED PyObject *__pyx_v_is_chunked = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_body (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_length,&__pyx_n_s_is_chunked,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_body", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_body", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_chunked)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_body", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_body") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_length = values[2];
    __pyx_v_is_chunked = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_body", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_16on_body(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_length, __pyx_v_is_chunked);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_16on_body(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_data, CYTHON_UNUSED PyObject *__pyx_v_length, CYTHON_UNUSED PyObject *__pyx_v_is_chunked) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__15)
  __Pyx_RefNannySetupContext("on_body", 0);
  __Pyx_TraceCall("on_body", __pyx_f[0], 272, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":275
 *         pass
 * 
 *     def on_message_complete(self, is_chunked, keep_alive):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_19on_message_complete(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_18on_message_complete[] = "ParserDelegate.on_message_complete(self, is_chunked, keep_alive)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_19on_message_complete = {"on_message_complete", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_19on_message_complete, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_14ParserDelegate_18on_message_complete};
static PyObject *__pyx_pw_6parser_14ParserDelegate_19on_message_complete(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_is_chunked = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keep_alive = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_message_complete (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_is_chunked,&__pyx_n_s_keep_alive,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_chunked)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_message_complete", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_alive)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("on_message_complete", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "on_message_complete") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_is_chunked = values[1];
    __pyx_v_keep_alive = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("on_message_complete", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_message_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_18on_message_complete(__pyx_self, __pyx_v_self, __pyx_v_is_chunked, __pyx_v_keep_alive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_18on_message_complete(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_is_chunked, CYTHON_UNUSED PyObject *__pyx_v_keep_alive) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("on_message_complete", 0);
  __Pyx_TraceCall("on_message_complete", __pyx_f[0], 275, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_message_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":278
 *         pass
 * 
 *     def on_chunk_header(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_21on_chunk_header(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_20on_chunk_header[] = "ParserDelegate.on_chunk_header(self)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_21on_chunk_header = {"on_chunk_header", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_21on_chunk_header, METH_O, __pyx_doc_6parser_14ParserDelegate_20on_chunk_header};
static PyObject *__pyx_pw_6parser_14ParserDelegate_21on_chunk_header(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_chunk_header (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_20on_chunk_header(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_20on_chunk_header(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__17)
  __Pyx_RefNannySetupContext("on_chunk_header", 0);
  __Pyx_TraceCall("on_chunk_header", __pyx_f[0], 278, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_chunk_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":281
 *         pass
 * 
 *     def on_chunk_complete(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_23on_chunk_complete(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_22on_chunk_complete[] = "ParserDelegate.on_chunk_complete(self)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_23on_chunk_complete = {"on_chunk_complete", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_23on_chunk_complete, METH_O, __pyx_doc_6parser_14ParserDelegate_22on_chunk_complete};
static PyObject *__pyx_pw_6parser_14ParserDelegate_23on_chunk_complete(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_chunk_complete (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_22on_chunk_complete(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_22on_chunk_complete(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__18)
  __Pyx_RefNannySetupContext("on_chunk_complete", 0);
  __Pyx_TraceCall("on_chunk_complete", __pyx_f[0], 281, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_chunk_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":284
 *         pass
 * 
 *     def on_upgrade(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_14ParserDelegate_25on_upgrade(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_14ParserDelegate_24on_upgrade[] = "ParserDelegate.on_upgrade(self)";
static PyMethodDef __pyx_mdef_6parser_14ParserDelegate_25on_upgrade = {"on_upgrade", (PyCFunction)__pyx_pw_6parser_14ParserDelegate_25on_upgrade, METH_O, __pyx_doc_6parser_14ParserDelegate_24on_upgrade};
static PyObject *__pyx_pw_6parser_14ParserDelegate_25on_upgrade(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_upgrade (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_14ParserDelegate_24on_upgrade(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ParserDelegate_24on_upgrade(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__19)
  __Pyx_RefNannySetupContext("on_upgrade", 0);
  __Pyx_TraceCall("on_upgrade", __pyx_f[0], 284, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.ParserDelegate.on_upgrade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":292
 *     cdef public object delegate
 * 
 *     def __cinit__(self, object parent, object delegate):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.delegate = delegate
 */

/* Python wrapper */
static int __pyx_pw_6parser_11_ParserData_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6parser_11_ParserData_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parent = 0;
  PyObject *__pyx_v_delegate = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_delegate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delegate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = values[0];
    __pyx_v_delegate = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser._ParserData.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_11_ParserData___cinit__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self), __pyx_v_parent, __pyx_v_delegate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_11_ParserData___cinit__(struct __pyx_obj_6parser__ParserData *__pyx_v_self, PyObject *__pyx_v_parent, PyObject *__pyx_v_delegate) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 292, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":293
 * 
 *     def __cinit__(self, object parent, object delegate):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.delegate = delegate
 * 
 */
  __Pyx_TraceLine(293,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_INCREF(__pyx_v_parent);
  __Pyx_GIVEREF(__pyx_v_parent);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(__pyx_v_self->parent);
  __pyx_v_self->parent = __pyx_v_parent;

  /* "parser.pyx":294
 *     def __cinit__(self, object parent, object delegate):
 *         self.parent = parent
 *         self.delegate = delegate             # <<<<<<<<<<<<<<
 * 
 *     def should_keep_alive(self):
 */
  __Pyx_TraceLine(294,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_INCREF(__pyx_v_delegate);
  __Pyx_GIVEREF(__pyx_v_delegate);
  __Pyx_GOTREF(__pyx_v_self->delegate);
  __Pyx_DECREF(__pyx_v_self->delegate);
  __pyx_v_self->delegate = __pyx_v_delegate;

  /* "parser.pyx":292
 *     cdef public object delegate
 * 
 *     def __cinit__(self, object parent, object delegate):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.delegate = delegate
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":296
 *         self.delegate = delegate
 * 
 *     def should_keep_alive(self):             # <<<<<<<<<<<<<<
 *         return self.parent.should_keep_alive()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_3should_keep_alive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_2should_keep_alive[] = "_ParserData.should_keep_alive(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_3should_keep_alive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("should_keep_alive (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_2should_keep_alive(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_2should_keep_alive(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("should_keep_alive", 0);
  __Pyx_TraceCall("should_keep_alive", __pyx_f[0], 296, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":297
 * 
 *     def should_keep_alive(self):
 *         return self.parent.should_keep_alive()             # <<<<<<<<<<<<<<
 * 
 *     def body_is_final(self):
 */
  __Pyx_TraceLine(297,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->parent, __pyx_n_s_should_keep_alive); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":296
 *         self.delegate = delegate
 * 
 *     def should_keep_alive(self):             # <<<<<<<<<<<<<<
 *         return self.parent.should_keep_alive()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.should_keep_alive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":299
 *         return self.parent.should_keep_alive()
 * 
 *     def body_is_final(self):             # <<<<<<<<<<<<<<
 *         return self.parent.body_is_final()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_5body_is_final(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_4body_is_final[] = "_ParserData.body_is_final(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_5body_is_final(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("body_is_final (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_4body_is_final(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_4body_is_final(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("body_is_final", 0);
  __Pyx_TraceCall("body_is_final", __pyx_f[0], 299, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":300
 * 
 *     def body_is_final(self):
 *         return self.parent.body_is_final()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(300,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->parent, __pyx_n_s_body_is_final); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":299
 *         return self.parent.should_keep_alive()
 * 
 *     def body_is_final(self):             # <<<<<<<<<<<<<<
 *         return self.parent.body_is_final()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.body_is_final", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":303
 * 
 *     @property
 *     def _flags_bits(self):             # <<<<<<<<<<<<<<
 *         return self.parent._flags_bits
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_7_flags_bits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_6_flags_bits[] = "_ParserData._flags_bits(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_7_flags_bits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_flags_bits (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_6_flags_bits(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_6_flags_bits(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_flags_bits", 0);
  __Pyx_TraceCall("_flags_bits", __pyx_f[0], 303, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":304
 *     @property
 *     def _flags_bits(self):
 *         return self.parent._flags_bits             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(304,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->parent, __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":303
 * 
 *     @property
 *     def _flags_bits(self):             # <<<<<<<<<<<<<<
 *         return self.parent._flags_bits
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("parser._ParserData._flags_bits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":307
 * 
 *     @property
 *     def has_chunked_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_9has_chunked_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_8has_chunked_flag[] = "_ParserData.has_chunked_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_9has_chunked_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_chunked_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_8has_chunked_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_8has_chunked_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_chunked_flag", 0);
  __Pyx_TraceCall("has_chunked_flag", __pyx_f[0], 307, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":308
 *     @property
 *     def has_chunked_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(308,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CHUNKED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":307
 * 
 *     @property
 *     def has_chunked_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_chunked_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":311
 * 
 *     @property
 *     def has_connection_keep_alive_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_11has_connection_keep_alive_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_10has_connection_keep_alive_flag[] = "_ParserData.has_connection_keep_alive_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_11has_connection_keep_alive_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_connection_keep_alive_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_10has_connection_keep_alive_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_10has_connection_keep_alive_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_connection_keep_alive_flag", 0);
  __Pyx_TraceCall("has_connection_keep_alive_flag", __pyx_f[0], 311, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":312
 *     @property
 *     def has_connection_keep_alive_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(312,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CONNECTION_KEEP_ALIVE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":311
 * 
 *     @property
 *     def has_connection_keep_alive_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_connection_keep_alive_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":315
 * 
 *     @property
 *     def has_connection_close_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_13has_connection_close_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_12has_connection_close_flag[] = "_ParserData.has_connection_close_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_13has_connection_close_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_connection_close_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_12has_connection_close_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_12has_connection_close_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_connection_close_flag", 0);
  __Pyx_TraceCall("has_connection_close_flag", __pyx_f[0], 315, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":316
 *     @property
 *     def has_connection_close_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(316,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CONNECTION_CLOSE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":315
 * 
 *     @property
 *     def has_connection_close_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_connection_close_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":319
 * 
 *     @property
 *     def has_connection_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_15has_connection_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_14has_connection_upgrade_flag[] = "_ParserData.has_connection_upgrade_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_15has_connection_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_connection_upgrade_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_14has_connection_upgrade_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_14has_connection_upgrade_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_connection_upgrade_flag", 0);
  __Pyx_TraceCall("has_connection_upgrade_flag", __pyx_f[0], 319, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":320
 *     @property
 *     def has_connection_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(320,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CONNECTION_UPGRADE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":319
 * 
 *     @property
 *     def has_connection_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_connection_upgrade_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":323
 * 
 *     @property
 *     def has_trailing_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_17has_trailing_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_16has_trailing_flag[] = "_ParserData.has_trailing_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_17has_trailing_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_trailing_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_16has_trailing_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_16has_trailing_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_trailing_flag", 0);
  __Pyx_TraceCall("has_trailing_flag", __pyx_f[0], 323, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":324
 *     @property
 *     def has_trailing_flag(self):
 *         return bool(self._flags_bits & http_parser.F_TRAILING)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(324,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_TRAILING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":323
 * 
 *     @property
 *     def has_trailing_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_trailing_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":327
 * 
 *     @property
 *     def has_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_19has_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_18has_upgrade_flag[] = "_ParserData.has_upgrade_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_19has_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_upgrade_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_18has_upgrade_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_18has_upgrade_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_upgrade_flag", 0);
  __Pyx_TraceCall("has_upgrade_flag", __pyx_f[0], 327, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":328
 *     @property
 *     def has_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(328,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_UPGRADE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":327
 * 
 *     @property
 *     def has_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_upgrade_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":331
 * 
 *     @property
 *     def has_skipbody_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_21has_skipbody_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_11_ParserData_20has_skipbody_flag[] = "_ParserData.has_skipbody_flag(self)";
static PyObject *__pyx_pw_6parser_11_ParserData_21has_skipbody_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_skipbody_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_20has_skipbody_flag(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_20has_skipbody_flag(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_skipbody_flag", 0);
  __Pyx_TraceCall("has_skipbody_flag", __pyx_f[0], 331, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":332
 *     @property
 *     def has_skipbody_flag(self):
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(332,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_SKIPBODY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":331
 * 
 *     @property
 *     def has_skipbody_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser._ParserData.has_skipbody_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":289
 * 
 * cdef class _ParserData(object):
 *     cdef public object parent             # <<<<<<<<<<<<<<
 *     cdef public object delegate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6parser_11_ParserData_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_6parent___get__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_6parent___get__(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 289, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->parent);
  __pyx_r = __pyx_v_self->parent;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.parent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_11_ParserData_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6parser_11_ParserData_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_6parent_2__set__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_11_ParserData_6parent_2__set__(struct __pyx_obj_6parser__ParserData *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 289, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(__pyx_v_self->parent);
  __pyx_v_self->parent = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_11_ParserData_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6parser_11_ParserData_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_6parent_4__del__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_11_ParserData_6parent_4__del__(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[0], 289, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(__pyx_v_self->parent);
  __pyx_v_self->parent = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.parent.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":290
 * cdef class _ParserData(object):
 *     cdef public object parent
 *     cdef public object delegate             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, object parent, object delegate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11_ParserData_8delegate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6parser_11_ParserData_8delegate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_8delegate___get__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11_ParserData_8delegate___get__(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 290, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->delegate);
  __pyx_r = __pyx_v_self->delegate;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.delegate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_11_ParserData_8delegate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6parser_11_ParserData_8delegate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_8delegate_2__set__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_11_ParserData_8delegate_2__set__(struct __pyx_obj_6parser__ParserData *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 290, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->delegate);
  __Pyx_DECREF(__pyx_v_self->delegate);
  __pyx_v_self->delegate = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.delegate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_11_ParserData_8delegate_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6parser_11_ParserData_8delegate_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11_ParserData_8delegate_4__del__(((struct __pyx_obj_6parser__ParserData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_11_ParserData_8delegate_4__del__(struct __pyx_obj_6parser__ParserData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[0], 290, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->delegate);
  __Pyx_DECREF(__pyx_v_self->delegate);
  __pyx_v_self->delegate = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser._ParserData.delegate.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":341
 *     cdef public object data
 * 
 *     def __cinit__(self, http_parser.http_parser_type parser_type, object delegate):             # <<<<<<<<<<<<<<
 *         # init parser
 *         self._parser = <http_parser.http_parser *> malloc(sizeof(http_parser.http_parser))
 */

/* Python wrapper */
static int __pyx_pw_6parser_6Parser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6parser_6Parser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  enum http_parser_type __pyx_v_parser_type;
  PyObject *__pyx_v_delegate = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser_type,&__pyx_n_s_delegate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parser_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delegate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parser_type = ((enum http_parser_type)__Pyx_PyInt_As_enum__http_parser_type(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_delegate = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.Parser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_6Parser___cinit__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self), __pyx_v_parser_type, __pyx_v_delegate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_6Parser___cinit__(struct __pyx_obj_6parser_Parser *__pyx_v_self, enum http_parser_type __pyx_v_parser_type, PyObject *__pyx_v_delegate) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 341, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":343
 *     def __cinit__(self, http_parser.http_parser_type parser_type, object delegate):
 *         # init parser
 *         self._parser = <http_parser.http_parser *> malloc(sizeof(http_parser.http_parser))             # <<<<<<<<<<<<<<
 *         http_parser.http_parser_init(self._parser, parser_type)
 * 
 */
  __Pyx_TraceLine(343,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_parser = ((struct http_parser *)malloc((sizeof(struct http_parser))));

  /* "parser.pyx":344
 *         # init parser
 *         self._parser = <http_parser.http_parser *> malloc(sizeof(http_parser.http_parser))
 *         http_parser.http_parser_init(self._parser, parser_type)             # <<<<<<<<<<<<<<
 * 
 *         self.delegate = delegate
 */
  __Pyx_TraceLine(344,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  http_parser_init(__pyx_v_self->_parser, __pyx_v_parser_type);

  /* "parser.pyx":346
 *         http_parser.http_parser_init(self._parser, parser_type)
 * 
 *         self.delegate = delegate             # <<<<<<<<<<<<<<
 *         self.data = _ParserData(self, delegate)
 *         self._parser.data = <void *> self.data
 */
  __Pyx_TraceLine(346,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_INCREF(__pyx_v_delegate);
  __Pyx_GIVEREF(__pyx_v_delegate);
  __Pyx_GOTREF(__pyx_v_self->delegate);
  __Pyx_DECREF(__pyx_v_self->delegate);
  __pyx_v_self->delegate = __pyx_v_delegate;

  /* "parser.pyx":347
 * 
 *         self.delegate = delegate
 *         self.data = _ParserData(self, delegate)             # <<<<<<<<<<<<<<
 *         self._parser.data = <void *> self.data
 * 
 */
  __Pyx_TraceLine(347,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_delegate);
  __Pyx_GIVEREF(__pyx_v_delegate);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_delegate);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6parser__ParserData), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "parser.pyx":348
 *         self.delegate = delegate
 *         self.data = _ParserData(self, delegate)
 *         self._parser.data = <void *> self.data             # <<<<<<<<<<<<<<
 * 
 *         # set callbacks
 */
  __Pyx_TraceLine(348,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_parser->data = ((void *)__pyx_v_self->data);

  /* "parser.pyx":351
 * 
 *         # set callbacks
 *         self._settings.on_message_begin = <http_cb> on_message_begin             # <<<<<<<<<<<<<<
 *         self._settings.on_url = <http_data_cb> on_req_url
 *         self._settings.on_status = <http_data_cb> on_resp_status
 */
  __Pyx_TraceLine(351,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_message_begin = ((http_cb)__pyx_f_6parser_on_message_begin);

  /* "parser.pyx":352
 *         # set callbacks
 *         self._settings.on_message_begin = <http_cb> on_message_begin
 *         self._settings.on_url = <http_data_cb> on_req_url             # <<<<<<<<<<<<<<
 *         self._settings.on_status = <http_data_cb> on_resp_status
 *         self._settings.on_header_field = <http_data_cb> on_header_field
 */
  __Pyx_TraceLine(352,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_url = ((http_data_cb)__pyx_f_6parser_on_req_url);

  /* "parser.pyx":353
 *         self._settings.on_message_begin = <http_cb> on_message_begin
 *         self._settings.on_url = <http_data_cb> on_req_url
 *         self._settings.on_status = <http_data_cb> on_resp_status             # <<<<<<<<<<<<<<
 *         self._settings.on_header_field = <http_data_cb> on_header_field
 *         self._settings.on_header_value = <http_data_cb> on_header_value
 */
  __Pyx_TraceLine(353,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_status = ((http_data_cb)__pyx_f_6parser_on_resp_status);

  /* "parser.pyx":354
 *         self._settings.on_url = <http_data_cb> on_req_url
 *         self._settings.on_status = <http_data_cb> on_resp_status
 *         self._settings.on_header_field = <http_data_cb> on_header_field             # <<<<<<<<<<<<<<
 *         self._settings.on_header_value = <http_data_cb> on_header_value
 *         self._settings.on_headers_complete = <http_cb> on_headers_complete
 */
  __Pyx_TraceLine(354,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_header_field = ((http_data_cb)__pyx_f_6parser_on_header_field);

  /* "parser.pyx":355
 *         self._settings.on_status = <http_data_cb> on_resp_status
 *         self._settings.on_header_field = <http_data_cb> on_header_field
 *         self._settings.on_header_value = <http_data_cb> on_header_value             # <<<<<<<<<<<<<<
 *         self._settings.on_headers_complete = <http_cb> on_headers_complete
 *         self._settings.on_body = <http_data_cb> on_body
 */
  __Pyx_TraceLine(355,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_header_value = ((http_data_cb)__pyx_f_6parser_on_header_value);

  /* "parser.pyx":356
 *         self._settings.on_header_field = <http_data_cb> on_header_field
 *         self._settings.on_header_value = <http_data_cb> on_header_value
 *         self._settings.on_headers_complete = <http_cb> on_headers_complete             # <<<<<<<<<<<<<<
 *         self._settings.on_body = <http_data_cb> on_body
 *         self._settings.on_message_complete = <http_cb> on_message_complete
 */
  __Pyx_TraceLine(356,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_headers_complete = ((http_cb)__pyx_f_6parser_on_headers_complete);

  /* "parser.pyx":357
 *         self._settings.on_header_value = <http_data_cb> on_header_value
 *         self._settings.on_headers_complete = <http_cb> on_headers_complete
 *         self._settings.on_body = <http_data_cb> on_body             # <<<<<<<<<<<<<<
 *         self._settings.on_message_complete = <http_cb> on_message_complete
 *         self._settings.on_chunk_header = <http_cb> on_chunk_header
 */
  __Pyx_TraceLine(357,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_body = ((http_data_cb)__pyx_f_6parser_on_body);

  /* "parser.pyx":358
 *         self._settings.on_headers_complete = <http_cb> on_headers_complete
 *         self._settings.on_body = <http_data_cb> on_body
 *         self._settings.on_message_complete = <http_cb> on_message_complete             # <<<<<<<<<<<<<<
 *         self._settings.on_chunk_header = <http_cb> on_chunk_header
 *         self._settings.on_chunk_complete = <http_cb> on_chunk_complete
 */
  __Pyx_TraceLine(358,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_message_complete = ((http_cb)__pyx_f_6parser_on_message_complete);

  /* "parser.pyx":359
 *         self._settings.on_body = <http_data_cb> on_body
 *         self._settings.on_message_complete = <http_cb> on_message_complete
 *         self._settings.on_chunk_header = <http_cb> on_chunk_header             # <<<<<<<<<<<<<<
 *         self._settings.on_chunk_complete = <http_cb> on_chunk_complete
 * 
 */
  __Pyx_TraceLine(359,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_chunk_header = ((http_cb)__pyx_f_6parser_on_chunk_header);

  /* "parser.pyx":360
 *         self._settings.on_message_complete = <http_cb> on_message_complete
 *         self._settings.on_chunk_header = <http_cb> on_chunk_header
 *         self._settings.on_chunk_complete = <http_cb> on_chunk_complete             # <<<<<<<<<<<<<<
 * 
 *     def destroy(self):
 */
  __Pyx_TraceLine(360,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_settings.on_chunk_complete = ((http_cb)__pyx_f_6parser_on_chunk_complete);

  /* "parser.pyx":341
 *     cdef public object data
 * 
 *     def __cinit__(self, http_parser.http_parser_type parser_type, object delegate):             # <<<<<<<<<<<<<<
 *         # init parser
 *         self._parser = <http_parser.http_parser *> malloc(sizeof(http_parser.http_parser))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.Parser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":362
 *         self._settings.on_chunk_complete = <http_cb> on_chunk_complete
 * 
 *     def destroy(self):             # <<<<<<<<<<<<<<
 *         if self._parser != NULL:
 *             free(self._parser)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_2destroy[] = "Parser.destroy(self)";
static PyObject *__pyx_pw_6parser_6Parser_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_2destroy(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_2destroy(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy", 0);
  __Pyx_TraceCall("destroy", __pyx_f[0], 362, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":363
 * 
 *     def destroy(self):
 *         if self._parser != NULL:             # <<<<<<<<<<<<<<
 *             free(self._parser)
 *             self._parser = NULL
 */
  __Pyx_TraceLine(363,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_parser != NULL) != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":364
 *     def destroy(self):
 *         if self._parser != NULL:
 *             free(self._parser)             # <<<<<<<<<<<<<<
 *             self._parser = NULL
 * 
 */
    __Pyx_TraceLine(364,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    free(__pyx_v_self->_parser);

    /* "parser.pyx":365
 *         if self._parser != NULL:
 *             free(self._parser)
 *             self._parser = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __Pyx_TraceLine(365,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_parser = NULL;

    /* "parser.pyx":363
 * 
 *     def destroy(self):
 *         if self._parser != NULL:             # <<<<<<<<<<<<<<
 *             free(self._parser)
 *             self._parser = NULL
 */
  }

  /* "parser.pyx":362
 *         self._settings.on_chunk_complete = <http_cb> on_chunk_complete
 * 
 *     def destroy(self):             # <<<<<<<<<<<<<<
 *         if self._parser != NULL:
 *             free(self._parser)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":367
 *             self._parser = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.destroy()
 * 
 */

/* Python wrapper */
static void __pyx_pw_6parser_6Parser_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6parser_6Parser_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6parser_6Parser_4__dealloc__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6parser_6Parser_4__dealloc__(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 367, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":368
 * 
 *     def __dealloc__(self):
 *         self.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def execute(self, data):
 */
  __Pyx_TraceLine(368,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":367
 *             self._parser = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.destroy()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("parser.Parser.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "parser.pyx":370
 *         self.destroy()
 * 
 *     def execute(self, data):             # <<<<<<<<<<<<<<
 *         data = to_bytes(data)
 *         return self._execute(data, len(data))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_7execute(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_6parser_6Parser_6execute[] = "Parser.execute(self, data)";
static PyObject *__pyx_pw_6parser_6Parser_7execute(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_6execute(((struct __pyx_obj_6parser_Parser *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_6execute(struct __pyx_obj_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute", 0);
  __Pyx_TraceCall("execute", __pyx_f[0], 370, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_data);

  /* "parser.pyx":371
 * 
 *     def execute(self, data):
 *         data = to_bytes(data)             # <<<<<<<<<<<<<<
 *         return self._execute(data, len(data))
 * 
 */
  __Pyx_TraceLine(371,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_to_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_data);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "parser.pyx":372
 *     def execute(self, data):
 *         data = to_bytes(data)
 *         return self._execute(data, len(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef int _execute(self, char *data, size_t length) except -1:
 */
  __Pyx_TraceLine(372,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_execute(__pyx_v_self, __pyx_t_5, __pyx_t_6); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":370
 *         self.destroy()
 * 
 *     def execute(self, data):             # <<<<<<<<<<<<<<
 *         data = to_bytes(data)
 *         return self._execute(data, len(data))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.Parser.execute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":374
 *         return self._execute(data, len(data))
 * 
 *     cdef int _execute(self, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *         cdef int nparsed
 * 
 */

static int __pyx_f_6parser_6Parser__execute(struct __pyx_obj_6parser_Parser *__pyx_v_self, char *__pyx_v_data, size_t __pyx_v_length) {
  int __pyx_v_nparsed;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_execute", 0);
  __Pyx_TraceCall("_execute", __pyx_f[0], 374, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":377
 *         cdef int nparsed
 * 
 *         self._assert_parser()             # <<<<<<<<<<<<<<
 * 
 *         nparsed = http_parser.http_parser_execute(self._parser, &self._settings, data, length)
 */
  __Pyx_TraceLine(377,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_assert_parser(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":379
 *         self._assert_parser()
 * 
 *         nparsed = http_parser.http_parser_execute(self._parser, &self._settings, data, length)             # <<<<<<<<<<<<<<
 * 
 *         if nparsed != length:
 */
  __Pyx_TraceLine(379,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_nparsed = http_parser_execute(__pyx_v_self->_parser, (&__pyx_v_self->_settings), __pyx_v_data, __pyx_v_length);

  /* "parser.pyx":381
 *         nparsed = http_parser.http_parser_execute(self._parser, &self._settings, data, length)
 * 
 *         if nparsed != length:             # <<<<<<<<<<<<<<
 *             self._raise_errno_if_needed()
 *             raise Exception('Parser did not parse all of data length but gave an OK back?')
 */
  __Pyx_TraceLine(381,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = ((__pyx_v_nparsed != __pyx_v_length) != 0);
  if (__pyx_t_2) {

    /* "parser.pyx":382
 * 
 *         if nparsed != length:
 *             self._raise_errno_if_needed()             # <<<<<<<<<<<<<<
 *             raise Exception('Parser did not parse all of data length but gave an OK back?')
 * 
 */
    __Pyx_TraceLine(382,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_raise_errno_if_needed(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":383
 *         if nparsed != length:
 *             self._raise_errno_if_needed()
 *             raise Exception('Parser did not parse all of data length but gave an OK back?')             # <<<<<<<<<<<<<<
 * 
 *         # Check to see if parser exited due to an upgrade
 */
    __Pyx_TraceLine(383,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":381
 *         nparsed = http_parser.http_parser_execute(self._parser, &self._settings, data, length)
 * 
 *         if nparsed != length:             # <<<<<<<<<<<<<<
 *             self._raise_errno_if_needed()
 *             raise Exception('Parser did not parse all of data length but gave an OK back?')
 */
  }

  /* "parser.pyx":386
 * 
 *         # Check to see if parser exited due to an upgrade
 *         if self._parser.upgrade == 1:             # <<<<<<<<<<<<<<
 *             self.delegate.on_upgrade()
 * 
 */
  __Pyx_TraceLine(386,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = ((__pyx_v_self->_parser->upgrade == 1) != 0);
  if (__pyx_t_2) {

    /* "parser.pyx":387
 *         # Check to see if parser exited due to an upgrade
 *         if self._parser.upgrade == 1:
 *             self.delegate.on_upgrade()             # <<<<<<<<<<<<<<
 * 
 *         return nparsed
 */
    __Pyx_TraceLine(387,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->delegate, __pyx_n_s_on_upgrade); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "parser.pyx":386
 * 
 *         # Check to see if parser exited due to an upgrade
 *         if self._parser.upgrade == 1:             # <<<<<<<<<<<<<<
 *             self.delegate.on_upgrade()
 * 
 */
  }

  /* "parser.pyx":389
 *             self.delegate.on_upgrade()
 * 
 *         return nparsed             # <<<<<<<<<<<<<<
 * 
 *     cdef int _raise_errno_if_needed(self) except -1:
 */
  __Pyx_TraceLine(389,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = __pyx_v_nparsed;
  goto __pyx_L0;

  /* "parser.pyx":374
 *         return self._execute(data, len(data))
 * 
 *     cdef int _execute(self, char *data, size_t length) except -1:             # <<<<<<<<<<<<<<
 *         cdef int nparsed
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("parser.Parser._execute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":391
 *         return nparsed
 * 
 *     cdef int _raise_errno_if_needed(self) except -1:             # <<<<<<<<<<<<<<
 *         cdef http_parser.http_errno errno = http_parser.HTTP_PARSER_ERRNO(self._parser)
 *         cdef const char * name
 */

static int __pyx_f_6parser_6Parser__raise_errno_if_needed(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  enum http_errno __pyx_v_errno;
  char const *__pyx_v_name;
  char const *__pyx_v_desc;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_errno_if_needed", 0);
  __Pyx_TraceCall("_raise_errno_if_needed", __pyx_f[0], 391, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":392
 * 
 *     cdef int _raise_errno_if_needed(self) except -1:
 *         cdef http_parser.http_errno errno = http_parser.HTTP_PARSER_ERRNO(self._parser)             # <<<<<<<<<<<<<<
 *         cdef const char * name
 *         cdef const char * desc
 */
  __Pyx_TraceLine(392,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_errno = HTTP_PARSER_ERRNO(__pyx_v_self->_parser);

  /* "parser.pyx":396
 *         cdef const char * desc
 * 
 *         if errno == http_parser.HPE_OK:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  __Pyx_TraceLine(396,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_errno == HPE_OK) != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":397
 * 
 *         if errno == http_parser.HPE_OK:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         name = http_parser.http_errno_name(errno)
 */
    __Pyx_TraceLine(397,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_r = 0;
    goto __pyx_L0;

    /* "parser.pyx":396
 *         cdef const char * desc
 * 
 *         if errno == http_parser.HPE_OK:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  }

  /* "parser.pyx":399
 *             return 0
 * 
 *         name = http_parser.http_errno_name(errno)             # <<<<<<<<<<<<<<
 *         desc = http_parser.http_errno_description(errno)
 *         raise Exception('Parser gave error {errno}/{name}: {desc}'.format(errno=<int>errno,
 */
  __Pyx_TraceLine(399,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_name = http_errno_name(__pyx_v_errno);

  /* "parser.pyx":400
 * 
 *         name = http_parser.http_errno_name(errno)
 *         desc = http_parser.http_errno_description(errno)             # <<<<<<<<<<<<<<
 *         raise Exception('Parser gave error {errno}/{name}: {desc}'.format(errno=<int>errno,
 *                                                                             name=name,
 */
  __Pyx_TraceLine(400,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_desc = http_errno_description(__pyx_v_errno);

  /* "parser.pyx":401
 *         name = http_parser.http_errno_name(errno)
 *         desc = http_parser.http_errno_description(errno)
 *         raise Exception('Parser gave error {errno}/{name}: {desc}'.format(errno=<int>errno,             # <<<<<<<<<<<<<<
 *                                                                             name=name,
 *                                                                             desc=desc))
 */
  __Pyx_TraceLine(401,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Parser_gave_error_errno_name_des, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(((int)__pyx_v_errno)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_errno, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "parser.pyx":402
 *         desc = http_parser.http_errno_description(errno)
 *         raise Exception('Parser gave error {errno}/{name}: {desc}'.format(errno=<int>errno,
 *                                                                             name=name,             # <<<<<<<<<<<<<<
 *                                                                             desc=desc))
 * 
 */
  __Pyx_TraceLine(402,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_name, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "parser.pyx":403
 *         raise Exception('Parser gave error {errno}/{name}: {desc}'.format(errno=<int>errno,
 *                                                                             name=name,
 *                                                                             desc=desc))             # <<<<<<<<<<<<<<
 * 
 *     cdef int _assert_parser(self) except -1:
 */
  __Pyx_TraceLine(403,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_desc); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_desc, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "parser.pyx":401
 *         name = http_parser.http_errno_name(errno)
 *         desc = http_parser.http_errno_description(errno)
 *         raise Exception('Parser gave error {errno}/{name}: {desc}'.format(errno=<int>errno,             # <<<<<<<<<<<<<<
 *                                                                             name=name,
 *                                                                             desc=desc))
 */
  __Pyx_TraceLine(401,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":391
 *         return nparsed
 * 
 *     cdef int _raise_errno_if_needed(self) except -1:             # <<<<<<<<<<<<<<
 *         cdef http_parser.http_errno errno = http_parser.HTTP_PARSER_ERRNO(self._parser)
 *         cdef const char * name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.Parser._raise_errno_if_needed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":405
 *                                                                             desc=desc))
 * 
 *     cdef int _assert_parser(self) except -1:             # <<<<<<<<<<<<<<
 *         if self._parser == NULL:
 *             raise Exception('Parser destroyed or not initialized!')
 */

static int __pyx_f_6parser_6Parser__assert_parser(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_assert_parser", 0);
  __Pyx_TraceCall("_assert_parser", __pyx_f[0], 405, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":406
 * 
 *     cdef int _assert_parser(self) except -1:
 *         if self._parser == NULL:             # <<<<<<<<<<<<<<
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 */
  __Pyx_TraceLine(406,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_parser == NULL) != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":407
 *     cdef int _assert_parser(self) except -1:
 *         if self._parser == NULL:
 *             raise Exception('Parser destroyed or not initialized!')             # <<<<<<<<<<<<<<
 * 
 *     def pause(self):
 */
    __Pyx_TraceLine(407,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":406
 * 
 *     cdef int _assert_parser(self) except -1:
 *         if self._parser == NULL:             # <<<<<<<<<<<<<<
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 */
  }

  /* "parser.pyx":405
 *                                                                             desc=desc))
 * 
 *     cdef int _assert_parser(self) except -1:             # <<<<<<<<<<<<<<
 *         if self._parser == NULL:
 *             raise Exception('Parser destroyed or not initialized!')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.Parser._assert_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":409
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 *     def pause(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         http_parser.http_parser_pause(self._parser, 1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_9pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_8pause[] = "Parser.pause(self)";
static PyObject *__pyx_pw_6parser_6Parser_9pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_8pause(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_8pause(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pause", 0);
  __Pyx_TraceCall("pause", __pyx_f[0], 409, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":410
 * 
 *     def pause(self):
 *         self._assert_parser()             # <<<<<<<<<<<<<<
 *         http_parser.http_parser_pause(self._parser, 1)
 * 
 */
  __Pyx_TraceLine(410,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_assert_parser(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":411
 *     def pause(self):
 *         self._assert_parser()
 *         http_parser.http_parser_pause(self._parser, 1)             # <<<<<<<<<<<<<<
 * 
 *     def resume(self):
 */
  __Pyx_TraceLine(411,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  http_parser_pause(__pyx_v_self->_parser, 1);

  /* "parser.pyx":409
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 *     def pause(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         http_parser.http_parser_pause(self._parser, 1)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":413
 *         http_parser.http_parser_pause(self._parser, 1)
 * 
 *     def resume(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         http_parser.http_parser_pause(self._parser, 0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_11resume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_10resume[] = "Parser.resume(self)";
static PyObject *__pyx_pw_6parser_6Parser_11resume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_10resume(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_10resume(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resume", 0);
  __Pyx_TraceCall("resume", __pyx_f[0], 413, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":414
 * 
 *     def resume(self):
 *         self._assert_parser()             # <<<<<<<<<<<<<<
 *         http_parser.http_parser_pause(self._parser, 0)
 * 
 */
  __Pyx_TraceLine(414,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_assert_parser(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":415
 *     def resume(self):
 *         self._assert_parser()
 *         http_parser.http_parser_pause(self._parser, 0)             # <<<<<<<<<<<<<<
 * 
 *     def body_is_final(self):
 */
  __Pyx_TraceLine(415,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  http_parser_pause(__pyx_v_self->_parser, 0);

  /* "parser.pyx":413
 *         http_parser.http_parser_pause(self._parser, 1)
 * 
 *     def resume(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         http_parser.http_parser_pause(self._parser, 0)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":417
 *         http_parser.http_parser_pause(self._parser, 0)
 * 
 *     def body_is_final(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return bool(http_parser.http_body_is_final(self._parser))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_13body_is_final(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_12body_is_final[] = "Parser.body_is_final(self)";
static PyObject *__pyx_pw_6parser_6Parser_13body_is_final(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("body_is_final (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_12body_is_final(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_12body_is_final(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("body_is_final", 0);
  __Pyx_TraceCall("body_is_final", __pyx_f[0], 417, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":418
 * 
 *     def body_is_final(self):
 *         self._assert_parser()             # <<<<<<<<<<<<<<
 *         return bool(http_parser.http_body_is_final(self._parser))
 * 
 */
  __Pyx_TraceLine(418,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_assert_parser(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":419
 *     def body_is_final(self):
 *         self._assert_parser()
 *         return bool(http_parser.http_body_is_final(self._parser))             # <<<<<<<<<<<<<<
 * 
 *     def should_keep_alive(self):
 */
  __Pyx_TraceLine(419,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(http_body_is_final(__pyx_v_self->_parser)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":417
 *         http_parser.http_parser_pause(self._parser, 0)
 * 
 *     def body_is_final(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return bool(http_parser.http_body_is_final(self._parser))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.body_is_final", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":421
 *         return bool(http_parser.http_body_is_final(self._parser))
 * 
 *     def should_keep_alive(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return bool(http_parser.http_should_keep_alive(self._parser))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_15should_keep_alive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_14should_keep_alive[] = "Parser.should_keep_alive(self)";
static PyObject *__pyx_pw_6parser_6Parser_15should_keep_alive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("should_keep_alive (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_14should_keep_alive(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_14should_keep_alive(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("should_keep_alive", 0);
  __Pyx_TraceCall("should_keep_alive", __pyx_f[0], 421, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":422
 * 
 *     def should_keep_alive(self):
 *         self._assert_parser()             # <<<<<<<<<<<<<<
 *         return bool(http_parser.http_should_keep_alive(self._parser))
 * 
 */
  __Pyx_TraceLine(422,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_assert_parser(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":423
 *     def should_keep_alive(self):
 *         self._assert_parser()
 *         return bool(http_parser.http_should_keep_alive(self._parser))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(423,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(http_should_keep_alive(__pyx_v_self->_parser)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":421
 *         return bool(http_parser.http_body_is_final(self._parser))
 * 
 *     def should_keep_alive(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return bool(http_parser.http_should_keep_alive(self._parser))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.should_keep_alive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":426
 * 
 *     @property
 *     def _flags_bits(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return self._parser.flags
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_17_flags_bits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_16_flags_bits[] = "Parser._flags_bits(self)";
static PyObject *__pyx_pw_6parser_6Parser_17_flags_bits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_flags_bits (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_16_flags_bits(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_16_flags_bits(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_flags_bits", 0);
  __Pyx_TraceCall("_flags_bits", __pyx_f[0], 426, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":427
 *     @property
 *     def _flags_bits(self):
 *         self._assert_parser()             # <<<<<<<<<<<<<<
 *         return self._parser.flags
 * 
 */
  __Pyx_TraceLine(427,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_Parser *)__pyx_v_self->__pyx_vtab)->_assert_parser(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":428
 *     def _flags_bits(self):
 *         self._assert_parser()
 *         return self._parser.flags             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(428,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_parser->flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":426
 * 
 *     @property
 *     def _flags_bits(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return self._parser.flags
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.Parser._flags_bits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":431
 * 
 *     @property
 *     def has_chunked_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_19has_chunked_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_18has_chunked_flag[] = "Parser.has_chunked_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_19has_chunked_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_chunked_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_18has_chunked_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_18has_chunked_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_chunked_flag", 0);
  __Pyx_TraceCall("has_chunked_flag", __pyx_f[0], 431, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":432
 *     @property
 *     def has_chunked_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(432,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CHUNKED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":431
 * 
 *     @property
 *     def has_chunked_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_chunked_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":435
 * 
 *     @property
 *     def has_connection_keep_alive_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_21has_connection_keep_alive_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_20has_connection_keep_alive_flag[] = "Parser.has_connection_keep_alive_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_21has_connection_keep_alive_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_connection_keep_alive_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_20has_connection_keep_alive_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_20has_connection_keep_alive_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_connection_keep_alive_flag", 0);
  __Pyx_TraceCall("has_connection_keep_alive_flag", __pyx_f[0], 435, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":436
 *     @property
 *     def has_connection_keep_alive_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(436,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CONNECTION_KEEP_ALIVE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":435
 * 
 *     @property
 *     def has_connection_keep_alive_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_connection_keep_alive_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":439
 * 
 *     @property
 *     def has_connection_close_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_23has_connection_close_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_22has_connection_close_flag[] = "Parser.has_connection_close_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_23has_connection_close_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_connection_close_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_22has_connection_close_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_22has_connection_close_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_connection_close_flag", 0);
  __Pyx_TraceCall("has_connection_close_flag", __pyx_f[0], 439, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":440
 *     @property
 *     def has_connection_close_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(440,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CONNECTION_CLOSE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":439
 * 
 *     @property
 *     def has_connection_close_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_connection_close_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":443
 * 
 *     @property
 *     def has_connection_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_25has_connection_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_24has_connection_upgrade_flag[] = "Parser.has_connection_upgrade_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_25has_connection_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_connection_upgrade_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_24has_connection_upgrade_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_24has_connection_upgrade_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_connection_upgrade_flag", 0);
  __Pyx_TraceCall("has_connection_upgrade_flag", __pyx_f[0], 443, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":444
 *     @property
 *     def has_connection_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(444,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_CONNECTION_UPGRADE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":443
 * 
 *     @property
 *     def has_connection_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_connection_upgrade_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":447
 * 
 *     @property
 *     def has_trailing_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_27has_trailing_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_26has_trailing_flag[] = "Parser.has_trailing_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_27has_trailing_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_trailing_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_26has_trailing_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_26has_trailing_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_trailing_flag", 0);
  __Pyx_TraceCall("has_trailing_flag", __pyx_f[0], 447, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":448
 *     @property
 *     def has_trailing_flag(self):
 *         return bool(self._flags_bits & http_parser.F_TRAILING)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(448,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_TRAILING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":447
 * 
 *     @property
 *     def has_trailing_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_trailing_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":451
 * 
 *     @property
 *     def has_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_29has_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_28has_upgrade_flag[] = "Parser.has_upgrade_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_29has_upgrade_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_upgrade_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_28has_upgrade_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_28has_upgrade_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_upgrade_flag", 0);
  __Pyx_TraceCall("has_upgrade_flag", __pyx_f[0], 451, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":452
 *     @property
 *     def has_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(452,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_UPGRADE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":451
 * 
 *     @property
 *     def has_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_upgrade_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":455
 * 
 *     @property
 *     def has_skipbody_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_31has_skipbody_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_6Parser_30has_skipbody_flag[] = "Parser.has_skipbody_flag(self)";
static PyObject *__pyx_pw_6parser_6Parser_31has_skipbody_flag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_skipbody_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_30has_skipbody_flag(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_30has_skipbody_flag(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_skipbody_flag", 0);
  __Pyx_TraceCall("has_skipbody_flag", __pyx_f[0], 455, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":456
 *     @property
 *     def has_skipbody_flag(self):
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(456,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__flags(F_SKIPBODY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "parser.pyx":455
 * 
 *     @property
 *     def has_skipbody_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("parser.Parser.has_skipbody_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":338
 *     cdef http_parser.http_parser *_parser
 *     cdef http_parser.http_parser_settings _settings
 *     cdef public object delegate             # <<<<<<<<<<<<<<
 *     cdef public object data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_8delegate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6parser_6Parser_8delegate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_8delegate___get__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_8delegate___get__(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 338, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->delegate);
  __pyx_r = __pyx_v_self->delegate;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.delegate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_6Parser_8delegate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6parser_6Parser_8delegate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_8delegate_2__set__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_6Parser_8delegate_2__set__(struct __pyx_obj_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 338, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->delegate);
  __Pyx_DECREF(__pyx_v_self->delegate);
  __pyx_v_self->delegate = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.delegate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_6Parser_8delegate_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6parser_6Parser_8delegate_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_8delegate_4__del__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_6Parser_8delegate_4__del__(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[0], 338, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->delegate);
  __Pyx_DECREF(__pyx_v_self->delegate);
  __pyx_v_self->delegate = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.delegate.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":339
 *     cdef http_parser.http_parser_settings _settings
 *     cdef public object delegate
 *     cdef public object data             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, http_parser.http_parser_type parser_type, object delegate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_6Parser_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6parser_6Parser_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_4data___get__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_6Parser_4data___get__(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 339, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->data);
  __pyx_r = __pyx_v_self->data;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_6Parser_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6parser_6Parser_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_4data_2__set__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_6Parser_4data_2__set__(struct __pyx_obj_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 339, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.data.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6parser_6Parser_4data_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6parser_6Parser_4data_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_6Parser_4data_4__del__(((struct __pyx_obj_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_6Parser_4data_4__del__(struct __pyx_obj_6parser_Parser *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[0], 339, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.Parser.data.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":459
 * 
 * 
 * def BothParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_BOTH, parser_delegate)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11BothParser(PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate); /*proto*/
static char __pyx_doc_6parser_10BothParser[] = "BothParser(parser_delegate)";
static PyMethodDef __pyx_mdef_6parser_11BothParser = {"BothParser", (PyCFunction)__pyx_pw_6parser_11BothParser, METH_O, __pyx_doc_6parser_10BothParser};
static PyObject *__pyx_pw_6parser_11BothParser(PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BothParser (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_10BothParser(__pyx_self, ((PyObject *)__pyx_v_parser_delegate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_10BothParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__22)
  __Pyx_RefNannySetupContext("BothParser", 0);
  __Pyx_TraceCall("BothParser", __pyx_f[0], 459, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":460
 * 
 * def BothParser(parser_delegate):
 *     return Parser(http_parser.HTTP_BOTH, parser_delegate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(460,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__http_parser_type(HTTP_BOTH); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_parser_delegate);
  __Pyx_GIVEREF(__pyx_v_parser_delegate);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_parser_delegate);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6parser_Parser), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":459
 * 
 * 
 * def BothParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_BOTH, parser_delegate)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.BothParser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":463
 * 
 * 
 * def RequestParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_REQUEST, parser_delegate)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_13RequestParser(PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate); /*proto*/
static char __pyx_doc_6parser_12RequestParser[] = "RequestParser(parser_delegate)";
static PyMethodDef __pyx_mdef_6parser_13RequestParser = {"RequestParser", (PyCFunction)__pyx_pw_6parser_13RequestParser, METH_O, __pyx_doc_6parser_12RequestParser};
static PyObject *__pyx_pw_6parser_13RequestParser(PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RequestParser (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_12RequestParser(__pyx_self, ((PyObject *)__pyx_v_parser_delegate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_12RequestParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__23)
  __Pyx_RefNannySetupContext("RequestParser", 0);
  __Pyx_TraceCall("RequestParser", __pyx_f[0], 463, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":464
 * 
 * def RequestParser(parser_delegate):
 *     return Parser(http_parser.HTTP_REQUEST, parser_delegate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(464,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__http_parser_type(HTTP_REQUEST); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_parser_delegate);
  __Pyx_GIVEREF(__pyx_v_parser_delegate);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_parser_delegate);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6parser_Parser), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":463
 * 
 * 
 * def RequestParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_REQUEST, parser_delegate)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.RequestParser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":467
 * 
 * 
 * def ResponseParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_RESPONSE, parser_delegate)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_15ResponseParser(PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate); /*proto*/
static char __pyx_doc_6parser_14ResponseParser[] = "ResponseParser(parser_delegate)";
static PyMethodDef __pyx_mdef_6parser_15ResponseParser = {"ResponseParser", (PyCFunction)__pyx_pw_6parser_15ResponseParser, METH_O, __pyx_doc_6parser_14ResponseParser};
static PyObject *__pyx_pw_6parser_15ResponseParser(PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ResponseParser (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_14ResponseParser(__pyx_self, ((PyObject *)__pyx_v_parser_delegate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_14ResponseParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parser_delegate) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("ResponseParser", 0);
  __Pyx_TraceCall("ResponseParser", __pyx_f[0], 467, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":468
 * 
 * def ResponseParser(parser_delegate):
 *     return Parser(http_parser.HTTP_RESPONSE, parser_delegate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(468,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__http_parser_type(HTTP_RESPONSE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_parser_delegate);
  __Pyx_GIVEREF(__pyx_v_parser_delegate);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_parser_delegate);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6parser_Parser), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":467
 * 
 * 
 * def ResponseParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_RESPONSE, parser_delegate)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.ResponseParser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":476
 * 
 *     @property
 *     def netloc(self):             # <<<<<<<<<<<<<<
 *         ret = []
 *         if self.userinfo:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_1netloc(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_netloc[] = "ParseResult.netloc(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_1netloc = {"netloc", (PyCFunction)__pyx_pw_6parser_11ParseResult_1netloc, METH_O, __pyx_doc_6parser_11ParseResult_netloc};
static PyObject *__pyx_pw_6parser_11ParseResult_1netloc(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("netloc (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_netloc(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_netloc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("netloc", 0);
  __Pyx_TraceCall("netloc", __pyx_f[0], 476, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":477
 *     @property
 *     def netloc(self):
 *         ret = []             # <<<<<<<<<<<<<<
 *         if self.userinfo:
 *             ret.append(self.userinfo)
 */
  __Pyx_TraceLine(477,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "parser.pyx":478
 *     def netloc(self):
 *         ret = []
 *         if self.userinfo:             # <<<<<<<<<<<<<<
 *             ret.append(self.userinfo)
 *             ret.append(b'@')
 */
  __Pyx_TraceLine(478,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_userinfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "parser.pyx":479
 *         ret = []
 *         if self.userinfo:
 *             ret.append(self.userinfo)             # <<<<<<<<<<<<<<
 *             ret.append(b'@')
 *         if self.hostname:
 */
    __Pyx_TraceLine(479,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_userinfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "parser.pyx":480
 *         if self.userinfo:
 *             ret.append(self.userinfo)
 *             ret.append(b'@')             # <<<<<<<<<<<<<<
 *         if self.hostname:
 *             ret.append(self.hostname)
 */
    __Pyx_TraceLine(480,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_kp_b__26); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":478
 *     def netloc(self):
 *         ret = []
 *         if self.userinfo:             # <<<<<<<<<<<<<<
 *             ret.append(self.userinfo)
 *             ret.append(b'@')
 */
  }

  /* "parser.pyx":481
 *             ret.append(self.userinfo)
 *             ret.append(b'@')
 *         if self.hostname:             # <<<<<<<<<<<<<<
 *             ret.append(self.hostname)
 *         if self.port:
 */
  __Pyx_TraceLine(481,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hostname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "parser.pyx":482
 *             ret.append(b'@')
 *         if self.hostname:
 *             ret.append(self.hostname)             # <<<<<<<<<<<<<<
 *         if self.port:
 *             ret.append(b':')
 */
    __Pyx_TraceLine(482,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hostname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "parser.pyx":481
 *             ret.append(self.userinfo)
 *             ret.append(b'@')
 *         if self.hostname:             # <<<<<<<<<<<<<<
 *             ret.append(self.hostname)
 *         if self.port:
 */
  }

  /* "parser.pyx":483
 *         if self.hostname:
 *             ret.append(self.hostname)
 *         if self.port:             # <<<<<<<<<<<<<<
 *             ret.append(b':')
 *             if six.PY3:
 */
  __Pyx_TraceLine(483,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "parser.pyx":484
 *             ret.append(self.hostname)
 *         if self.port:
 *             ret.append(b':')             # <<<<<<<<<<<<<<
 *             if six.PY3:
 *                 ret.append(bytes(str(self.port), 'ascii'))
 */
    __Pyx_TraceLine(484,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_kp_b__27); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":485
 *         if self.port:
 *             ret.append(b':')
 *             if six.PY3:             # <<<<<<<<<<<<<<
 *                 ret.append(bytes(str(self.port), 'ascii'))
 *             else:
 */
    __Pyx_TraceLine(485,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_six); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PY3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "parser.pyx":486
 *             ret.append(b':')
 *             if six.PY3:
 *                 ret.append(bytes(str(self.port), 'ascii'))             # <<<<<<<<<<<<<<
 *             else:
 *                 ret.append(str(self.port))
 */
      __Pyx_TraceLine(486,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_port); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
      __Pyx_INCREF(__pyx_n_u_ascii);
      __Pyx_GIVEREF(__pyx_n_u_ascii);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_ascii);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_t_4); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "parser.pyx":485
 *         if self.port:
 *             ret.append(b':')
 *             if six.PY3:             # <<<<<<<<<<<<<<
 *                 ret.append(bytes(str(self.port), 'ascii'))
 *             else:
 */
      goto __pyx_L6;
    }

    /* "parser.pyx":488
 *                 ret.append(bytes(str(self.port), 'ascii'))
 *             else:
 *                 ret.append(str(self.port))             # <<<<<<<<<<<<<<
 *         return b''.join(ret)
 * 
 */
    __Pyx_TraceLine(488,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_port); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_t_4); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L6:;

    /* "parser.pyx":483
 *         if self.hostname:
 *             ret.append(self.hostname)
 *         if self.port:             # <<<<<<<<<<<<<<
 *             ret.append(b':')
 *             if six.PY3:
 */
  }

  /* "parser.pyx":489
 *             else:
 *                 ret.append(str(self.port))
 *         return b''.join(ret)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(489,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBytes_Join(__pyx_kp_b__28, __pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "parser.pyx":476
 * 
 *     @property
 *     def netloc(self):             # <<<<<<<<<<<<<<
 *         ret = []
 *         if self.userinfo:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.ParseResult.netloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":492
 * 
 *     @property
 *     def path(self):             # <<<<<<<<<<<<<<
 *         return self.raw_path.split(b';', 1)[0]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_3path(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_2path[] = "ParseResult.path(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_3path = {"path", (PyCFunction)__pyx_pw_6parser_11ParseResult_3path, METH_O, __pyx_doc_6parser_11ParseResult_2path};
static PyObject *__pyx_pw_6parser_11ParseResult_3path(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("path (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_2path(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_2path(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__29)
  __Pyx_RefNannySetupContext("path", 0);
  __Pyx_TraceCall("path", __pyx_f[0], 492, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":493
 *     @property
 *     def path(self):
 *         return self.raw_path.split(b';', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(493,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_raw_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "parser.pyx":492
 * 
 *     @property
 *     def path(self):             # <<<<<<<<<<<<<<
 *         return self.raw_path.split(b';', 1)[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("parser.ParseResult.path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":496
 * 
 *     @property
 *     def params(self):             # <<<<<<<<<<<<<<
 *         if b';' in self.raw_path:
 *             return self.raw_path.split(b';', 1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_5params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_4params[] = "ParseResult.params(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_5params = {"params", (PyCFunction)__pyx_pw_6parser_11ParseResult_5params, METH_O, __pyx_doc_6parser_11ParseResult_4params};
static PyObject *__pyx_pw_6parser_11ParseResult_5params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("params (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_4params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_4params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__32)
  __Pyx_RefNannySetupContext("params", 0);
  __Pyx_TraceCall("params", __pyx_f[0], 496, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":497
 *     @property
 *     def params(self):
 *         if b';' in self.raw_path:             # <<<<<<<<<<<<<<
 *             return self.raw_path.split(b';', 1)
 *         else:
 */
  __Pyx_TraceLine(497,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_raw_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_kp_b__30, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "parser.pyx":498
 *     def params(self):
 *         if b';' in self.raw_path:
 *             return self.raw_path.split(b';', 1)             # <<<<<<<<<<<<<<
 *         else:
 *             return b''
 */
    __Pyx_TraceLine(498,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_raw_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "parser.pyx":497
 *     @property
 *     def params(self):
 *         if b';' in self.raw_path:             # <<<<<<<<<<<<<<
 *             return self.raw_path.split(b';', 1)
 *         else:
 */
  }

  /* "parser.pyx":500
 *             return self.raw_path.split(b';', 1)
 *         else:
 *             return b''             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(500,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_b__28);
    __pyx_r = __pyx_kp_b__28;
    goto __pyx_L0;
  }

  /* "parser.pyx":496
 * 
 *     @property
 *     def params(self):             # <<<<<<<<<<<<<<
 *         if b';' in self.raw_path:
 *             return self.raw_path.split(b';', 1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.ParseResult.params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":503
 * 
 *     @property
 *     def username(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_7username(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_6username[] = "ParseResult.username(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_7username = {"username", (PyCFunction)__pyx_pw_6parser_11ParseResult_7username, METH_O, __pyx_doc_6parser_11ParseResult_6username};
static PyObject *__pyx_pw_6parser_11ParseResult_7username(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("username (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_6username(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_6username(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__34)
  __Pyx_RefNannySetupContext("username", 0);
  __Pyx_TraceCall("username", __pyx_f[0], 503, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":504
 *     @property
 *     def username(self):
 *         if not self.userinfo:             # <<<<<<<<<<<<<<
 *             return
 *         return self.userinfo.split(b':', 1)[0]
 */
  __Pyx_TraceLine(504,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_userinfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "parser.pyx":505
 *     def username(self):
 *         if not self.userinfo:
 *             return             # <<<<<<<<<<<<<<
 *         return self.userinfo.split(b':', 1)[0]
 * 
 */
    __Pyx_TraceLine(505,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "parser.pyx":504
 *     @property
 *     def username(self):
 *         if not self.userinfo:             # <<<<<<<<<<<<<<
 *             return
 *         return self.userinfo.split(b':', 1)[0]
 */
  }

  /* "parser.pyx":506
 *         if not self.userinfo:
 *             return
 *         return self.userinfo.split(b':', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(506,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_userinfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "parser.pyx":503
 * 
 *     @property
 *     def username(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.ParseResult.username", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":509
 * 
 *     @property
 *     def password(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_9password(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_8password[] = "ParseResult.password(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_9password = {"password", (PyCFunction)__pyx_pw_6parser_11ParseResult_9password, METH_O, __pyx_doc_6parser_11ParseResult_8password};
static PyObject *__pyx_pw_6parser_11ParseResult_9password(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("password (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_8password(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_8password(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__36)
  __Pyx_RefNannySetupContext("password", 0);
  __Pyx_TraceCall("password", __pyx_f[0], 509, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":510
 *     @property
 *     def password(self):
 *         if not self.userinfo:             # <<<<<<<<<<<<<<
 *             return
 *         return self.userinfo.split(b':', 1)[1]
 */
  __Pyx_TraceLine(510,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_userinfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "parser.pyx":511
 *     def password(self):
 *         if not self.userinfo:
 *             return             # <<<<<<<<<<<<<<
 *         return self.userinfo.split(b':', 1)[1]
 * 
 */
    __Pyx_TraceLine(511,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "parser.pyx":510
 *     @property
 *     def password(self):
 *         if not self.userinfo:             # <<<<<<<<<<<<<<
 *             return
 *         return self.userinfo.split(b':', 1)[1]
 */
  }

  /* "parser.pyx":512
 *         if not self.userinfo:
 *             return
 *         return self.userinfo.split(b':', 1)[1]             # <<<<<<<<<<<<<<
 * 
 *     def as_strings(self):
 */
  __Pyx_TraceLine(512,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_userinfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "parser.pyx":509
 * 
 *     @property
 *     def password(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.ParseResult.password", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":514
 *         return self.userinfo.split(b':', 1)[1]
 * 
 *     def as_strings(self):             # <<<<<<<<<<<<<<
 *         if six.PY3:
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_11as_strings(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_10as_strings[] = "ParseResult.as_strings(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_11as_strings = {"as_strings", (PyCFunction)__pyx_pw_6parser_11ParseResult_11as_strings, METH_O, __pyx_doc_6parser_11ParseResult_10as_strings};
static PyObject *__pyx_pw_6parser_11ParseResult_11as_strings(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_strings (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_10as_strings(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_10as_strings(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_args = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__38)
  __Pyx_RefNannySetupContext("as_strings", 0);
  __Pyx_TraceCall("as_strings", __pyx_f[0], 514, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":515
 * 
 *     def as_strings(self):
 *         if six.PY3:             # <<<<<<<<<<<<<<
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 *         else:
 */
  __Pyx_TraceLine(515,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_six); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PY3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "parser.pyx":516
 *     def as_strings(self):
 *         if six.PY3:
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]             # <<<<<<<<<<<<<<
 *         else:
 *             args = self
 */
    __Pyx_TraceLine(516,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    { /* enter inner scope */
      PyObject *__pyx_7genexpr__pyx_v_i = NULL;
      PyObject *__pyx_7genexpr__pyx_v_x = NULL;
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_1 = __pyx_int_0;
      if (likely(PyList_CheckExact(__pyx_v_self)) || PyTuple_CheckExact(__pyx_v_self)) {
        __pyx_t_4 = __pyx_v_self; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_self); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_x, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_1);
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1);
        __pyx_t_1 = __pyx_t_7;
        __pyx_t_7 = 0;
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_7genexpr__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_3) {
          goto __pyx_L10_next_or;
        } else {
        }
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_7genexpr__pyx_v_x);
        __Pyx_GIVEREF(__pyx_7genexpr__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_7genexpr__pyx_v_x);
        __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        if (!__pyx_t_3) {
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_9);
          __pyx_t_7 = __pyx_t_9;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L9_bool_binop_done;
        }
        __pyx_L10_next_or:;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_x, __pyx_n_s_decode); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_10) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        }
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_7 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_L9_bool_binop_done:;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
      goto __pyx_L12_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
      goto __pyx_L1_error;
      __pyx_L12_exit_scope:;
    } /* exit inner scope */
    __pyx_v_args = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "parser.pyx":515
 * 
 *     def as_strings(self):
 *         if six.PY3:             # <<<<<<<<<<<<<<
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 *         else:
 */
    goto __pyx_L3;
  }

  /* "parser.pyx":518
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 *         else:
 *             args = self             # <<<<<<<<<<<<<<
 *         return self.__class__(*args)
 * 
 */
  __Pyx_TraceLine(518,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __Pyx_INCREF(__pyx_v_self);
    __pyx_v_args = __pyx_v_self;
  }
  __pyx_L3:;

  /* "parser.pyx":519
 *         else:
 *             args = self
 *         return self.__class__(*args)             # <<<<<<<<<<<<<<
 * 
 *     def _as_urlparse_result_tuple(self):
 */
  __Pyx_TraceLine(519,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "parser.pyx":514
 *         return self.userinfo.split(b':', 1)[1]
 * 
 *     def as_strings(self):             # <<<<<<<<<<<<<<
 *         if six.PY3:
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("parser.ParseResult.as_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":521
 *         return self.__class__(*args)
 * 
 *     def _as_urlparse_result_tuple(self):             # <<<<<<<<<<<<<<
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_13_as_urlparse_result_tuple(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_12_as_urlparse_result_tuple[] = "ParseResult._as_urlparse_result_tuple(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_13_as_urlparse_result_tuple = {"_as_urlparse_result_tuple", (PyCFunction)__pyx_pw_6parser_11ParseResult_13_as_urlparse_result_tuple, METH_O, __pyx_doc_6parser_11ParseResult_12_as_urlparse_result_tuple};
static PyObject *__pyx_pw_6parser_11ParseResult_13_as_urlparse_result_tuple(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_as_urlparse_result_tuple (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_12_as_urlparse_result_tuple(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_12_as_urlparse_result_tuple(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__39)
  __Pyx_RefNannySetupContext("_as_urlparse_result_tuple", 0);
  __Pyx_TraceCall("_as_urlparse_result_tuple", __pyx_f[0], 521, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":522
 * 
 *     def _as_urlparse_result_tuple(self):
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]             # <<<<<<<<<<<<<<
 *         if six.PY3:
 *             ret = [x.decode() for x in ret]
 */
  __Pyx_TraceLine(522,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheme); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_netloc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_query); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fragment); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_ret = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "parser.pyx":523
 *     def _as_urlparse_result_tuple(self):
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:             # <<<<<<<<<<<<<<
 *             ret = [x.decode() for x in ret]
 *         return ret
 */
  __Pyx_TraceLine(523,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_six); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_PY3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_8) {

    /* "parser.pyx":524
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:
 *             ret = [x.decode() for x in ret]             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __Pyx_TraceLine(524,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    { /* enter inner scope */
      PyObject *__pyx_8genexpr1__pyx_v_x = NULL;
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __pyx_v_ret; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
      for (;;) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_x, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_x, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (__pyx_t_3) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x);
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x);
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "parser.pyx":523
 *     def _as_urlparse_result_tuple(self):
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:             # <<<<<<<<<<<<<<
 *             ret = [x.decode() for x in ret]
 *         return ret
 */
  }

  /* "parser.pyx":525
 *         if six.PY3:
 *             ret = [x.decode() for x in ret]
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def as_urlparse_result(self):
 */
  __Pyx_TraceLine(525,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "parser.pyx":521
 *         return self.__class__(*args)
 * 
 *     def _as_urlparse_result_tuple(self):             # <<<<<<<<<<<<<<
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("parser.ParseResult._as_urlparse_result_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":527
 *         return ret
 * 
 *     def as_urlparse_result(self):             # <<<<<<<<<<<<<<
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_15as_urlparse_result(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_14as_urlparse_result[] = "ParseResult.as_urlparse_result(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_15as_urlparse_result = {"as_urlparse_result", (PyCFunction)__pyx_pw_6parser_11ParseResult_15as_urlparse_result, METH_O, __pyx_doc_6parser_11ParseResult_14as_urlparse_result};
static PyObject *__pyx_pw_6parser_11ParseResult_15as_urlparse_result(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_urlparse_result (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_14as_urlparse_result(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_14as_urlparse_result(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__40)
  __Pyx_RefNannySetupContext("as_urlparse_result", 0);
  __Pyx_TraceCall("as_urlparse_result", __pyx_f[0], 527, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":528
 * 
 *     def as_urlparse_result(self):
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())             # <<<<<<<<<<<<<<
 * 
 *     def geturl(self):
 */
  __Pyx_TraceLine(528,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_urlparse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ParseResult); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_as_urlparse_result_tuple); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":527
 *         return ret
 * 
 *     def as_urlparse_result(self):             # <<<<<<<<<<<<<<
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.ParseResult.as_urlparse_result", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":530
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 *     def geturl(self):             # <<<<<<<<<<<<<<
 *         return urlparse.urlunparse(self._as_urlparse_result_tuple())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_11ParseResult_17geturl(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6parser_11ParseResult_16geturl[] = "ParseResult.geturl(self)";
static PyMethodDef __pyx_mdef_6parser_11ParseResult_17geturl = {"geturl", (PyCFunction)__pyx_pw_6parser_11ParseResult_17geturl, METH_O, __pyx_doc_6parser_11ParseResult_16geturl};
static PyObject *__pyx_pw_6parser_11ParseResult_17geturl(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geturl (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_11ParseResult_16geturl(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_11ParseResult_16geturl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__41)
  __Pyx_RefNannySetupContext("geturl", 0);
  __Pyx_TraceCall("geturl", __pyx_f[0], 530, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":531
 * 
 *     def geturl(self):
 *         return urlparse.urlunparse(self._as_urlparse_result_tuple())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(531,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_urlparse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_urlunparse); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_as_urlparse_result_tuple); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "parser.pyx":530
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 *     def geturl(self):             # <<<<<<<<<<<<<<
 *         return urlparse.urlunparse(self._as_urlparse_result_tuple())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("parser.ParseResult.geturl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":538
 *     cdef object data
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         # init parser
 *         self._parser = <http_parser.http_parser_url *> malloc(sizeof(http_parser.http_parser_url))
 */

/* Python wrapper */
static int __pyx_pw_6parser_13HttpUrlParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6parser_13HttpUrlParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6parser_13HttpUrlParser___cinit__(((struct __pyx_obj_6parser_HttpUrlParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6parser_13HttpUrlParser___cinit__(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 538, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":540
 *     def __cinit__(self):
 *         # init parser
 *         self._parser = <http_parser.http_parser_url *> malloc(sizeof(http_parser.http_parser_url))             # <<<<<<<<<<<<<<
 *         http_parser.http_parser_url_init(self._parser)
 * 
 */
  __Pyx_TraceLine(540,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_parser = ((struct http_parser_url *)malloc((sizeof(struct http_parser_url))));

  /* "parser.pyx":541
 *         # init parser
 *         self._parser = <http_parser.http_parser_url *> malloc(sizeof(http_parser.http_parser_url))
 *         http_parser.http_parser_url_init(self._parser)             # <<<<<<<<<<<<<<
 * 
 *     def destroy(self):
 */
  __Pyx_TraceLine(541,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  http_parser_url_init(__pyx_v_self->_parser);

  /* "parser.pyx":538
 *     cdef object data
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         # init parser
 *         self._parser = <http_parser.http_parser_url *> malloc(sizeof(http_parser.http_parser_url))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.HttpUrlParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":543
 *         http_parser.http_parser_url_init(self._parser)
 * 
 *     def destroy(self):             # <<<<<<<<<<<<<<
 *         if self._parser != NULL:
 *             free(self._parser)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_13HttpUrlParser_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6parser_13HttpUrlParser_2destroy[] = "HttpUrlParser.destroy(self)";
static PyObject *__pyx_pw_6parser_13HttpUrlParser_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6parser_13HttpUrlParser_2destroy(((struct __pyx_obj_6parser_HttpUrlParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_13HttpUrlParser_2destroy(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy", 0);
  __Pyx_TraceCall("destroy", __pyx_f[0], 543, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":544
 * 
 *     def destroy(self):
 *         if self._parser != NULL:             # <<<<<<<<<<<<<<
 *             free(self._parser)
 *             self._parser = NULL
 */
  __Pyx_TraceLine(544,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_parser != NULL) != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":545
 *     def destroy(self):
 *         if self._parser != NULL:
 *             free(self._parser)             # <<<<<<<<<<<<<<
 *             self._parser = NULL
 * 
 */
    __Pyx_TraceLine(545,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    free(__pyx_v_self->_parser);

    /* "parser.pyx":546
 *         if self._parser != NULL:
 *             free(self._parser)
 *             self._parser = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __Pyx_TraceLine(546,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_parser = NULL;

    /* "parser.pyx":544
 * 
 *     def destroy(self):
 *         if self._parser != NULL:             # <<<<<<<<<<<<<<
 *             free(self._parser)
 *             self._parser = NULL
 */
  }

  /* "parser.pyx":543
 *         http_parser.http_parser_url_init(self._parser)
 * 
 *     def destroy(self):             # <<<<<<<<<<<<<<
 *         if self._parser != NULL:
 *             free(self._parser)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("parser.HttpUrlParser.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":548
 *             self._parser = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.destroy()
 * 
 */

/* Python wrapper */
static void __pyx_pw_6parser_13HttpUrlParser_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6parser_13HttpUrlParser_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6parser_13HttpUrlParser_4__dealloc__(((struct __pyx_obj_6parser_HttpUrlParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6parser_13HttpUrlParser_4__dealloc__(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 548, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":549
 * 
 *     def __dealloc__(self):
 *         self.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def parse(self, url, is_connect):
 */
  __Pyx_TraceLine(549,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":548
 *             self._parser = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.destroy()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("parser.HttpUrlParser.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "parser.pyx":551
 *         self.destroy()
 * 
 *     def parse(self, url, is_connect):             # <<<<<<<<<<<<<<
 *         url = to_bytes(url)
 *         ret = self._parse(url, len(url), is_connect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6parser_13HttpUrlParser_7parse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6parser_13HttpUrlParser_6parse[] = "HttpUrlParser.parse(self, url, is_connect)";
static PyObject *__pyx_pw_6parser_13HttpUrlParser_7parse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_url = 0;
  PyObject *__pyx_v_is_connect = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_url,&__pyx_n_s_is_connect,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_url)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_connect)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parse", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_url = values[0];
    __pyx_v_is_connect = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("parser.HttpUrlParser.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6parser_13HttpUrlParser_6parse(((struct __pyx_obj_6parser_HttpUrlParser *)__pyx_v_self), __pyx_v_url, __pyx_v_is_connect);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6parser_13HttpUrlParser_6parse(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self, PyObject *__pyx_v_url, PyObject *__pyx_v_is_connect) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse", 0);
  __Pyx_TraceCall("parse", __pyx_f[0], 551, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __Pyx_INCREF(__pyx_v_url);

  /* "parser.pyx":552
 * 
 *     def parse(self, url, is_connect):
 *         url = to_bytes(url)             # <<<<<<<<<<<<<<
 *         ret = self._parse(url, len(url), is_connect)
 *         return ParseResult(*ret)
 */
  __Pyx_TraceLine(552,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_to_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_url); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_url);
    __Pyx_GIVEREF(__pyx_v_url);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_url);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_url, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "parser.pyx":553
 *     def parse(self, url, is_connect):
 *         url = to_bytes(url)
 *         ret = self._parse(url, len(url), is_connect)             # <<<<<<<<<<<<<<
 *         return ParseResult(*ret)
 * 
 */
  __Pyx_TraceLine(553,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_url); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = PyObject_Length(__pyx_v_url); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!(likely(((__pyx_v_is_connect) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_is_connect, __pyx_ptype_7cpython_4bool_bool))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((struct __pyx_vtabstruct_6parser_HttpUrlParser *)__pyx_v_self->__pyx_vtab)->_parse(__pyx_v_self, __pyx_t_5, __pyx_t_6, ((PyBoolObject *)__pyx_v_is_connect)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "parser.pyx":554
 *         url = to_bytes(url)
 *         ret = self._parse(url, len(url), is_connect)
 *         return ParseResult(*ret)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _parse(self, char *url, size_t length, bool is_connect):
 */
  __Pyx_TraceLine(554,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ParseResult); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_Tuple(__pyx_v_ret); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "parser.pyx":551
 *         self.destroy()
 * 
 *     def parse(self, url, is_connect):             # <<<<<<<<<<<<<<
 *         url = to_bytes(url)
 *         ret = self._parse(url, len(url), is_connect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("parser.HttpUrlParser.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_url);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "parser.pyx":556
 *         return ParseResult(*ret)
 * 
 *     cdef object _parse(self, char *url, size_t length, bool is_connect):             # <<<<<<<<<<<<<<
 *         cdef int rv
 *         cdef object ret
 */

static PyObject *__pyx_f_6parser_13HttpUrlParser__parse(struct __pyx_obj_6parser_HttpUrlParser *__pyx_v_self, char *__pyx_v_url, size_t __pyx_v_length, PyBoolObject *__pyx_v_is_connect) {
  int __pyx_v_rv;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_f_off = NULL;
  PyObject *__pyx_v_f_len = NULL;
  PyObject *__pyx_v_part = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_parse", 0);
  __Pyx_TraceCall("_parse", __pyx_f[0], 556, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":560
 *         cdef object ret
 * 
 *         if self._parser == NULL:             # <<<<<<<<<<<<<<
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 */
  __Pyx_TraceLine(560,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_parser == NULL) != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":561
 * 
 *         if self._parser == NULL:
 *             raise Exception('Parser destroyed or not initialized!')             # <<<<<<<<<<<<<<
 * 
 *         rv = http_parser.http_parser_parse_url(url, length, is_connect, self._parser)
 */
    __Pyx_TraceLine(561,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":560
 *         cdef object ret
 * 
 *         if self._parser == NULL:             # <<<<<<<<<<<<<<
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 */
  }

  /* "parser.pyx":563
 *             raise Exception('Parser destroyed or not initialized!')
 * 
 *         rv = http_parser.http_parser_parse_url(url, length, is_connect, self._parser)             # <<<<<<<<<<<<<<
 *         if rv != 0:
 *             raise Exception('URL Parser gave error: {rv}'.format(rv=rv))
 */
  __Pyx_TraceLine(563,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __Pyx_PyInt_As_int(((PyObject *)__pyx_v_is_connect)); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rv = http_parser_parse_url(__pyx_v_url, __pyx_v_length, __pyx_t_3, __pyx_v_self->_parser);

  /* "parser.pyx":564
 * 
 *         rv = http_parser.http_parser_parse_url(url, length, is_connect, self._parser)
 *         if rv != 0:             # <<<<<<<<<<<<<<
 *             raise Exception('URL Parser gave error: {rv}'.format(rv=rv))
 * 
 */
  __Pyx_TraceLine(564,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_rv != 0) != 0);
  if (__pyx_t_1) {

    /* "parser.pyx":565
 *         rv = http_parser.http_parser_parse_url(url, length, is_connect, self._parser)
 *         if rv != 0:
 *             raise Exception('URL Parser gave error: {rv}'.format(rv=rv))             # <<<<<<<<<<<<<<
 * 
 *         ret = []
 */
    __Pyx_TraceLine(565,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_URL_Parser_gave_error_rv, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_rv); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_rv, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "parser.pyx":564
 * 
 *         rv = http_parser.http_parser_parse_url(url, length, is_connect, self._parser)
 *         if rv != 0:             # <<<<<<<<<<<<<<
 *             raise Exception('URL Parser gave error: {rv}'.format(rv=rv))
 * 
 */
  }

  /* "parser.pyx":567
 *             raise Exception('URL Parser gave error: {rv}'.format(rv=rv))
 * 
 *         ret = []             # <<<<<<<<<<<<<<
 *         for i in range(http_parser.UF_MAX):
 *             if i == http_parser.UF_PORT:
 */
  __Pyx_TraceLine(567,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_ret = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "parser.pyx":568
 * 
 *         ret = []
 *         for i in range(http_parser.UF_MAX):             # <<<<<<<<<<<<<<
 *             if i == http_parser.UF_PORT:
 *                 # This is so it's an integer as expected
 */
  __Pyx_TraceLine(568,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = __Pyx_PyInt_From_enum__http_parser_url_fields(UF_MAX); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "parser.pyx":569
 *         ret = []
 *         for i in range(http_parser.UF_MAX):
 *             if i == http_parser.UF_PORT:             # <<<<<<<<<<<<<<
 *                 # This is so it's an integer as expected
 *                 if self._parser.port:
 */
    __Pyx_TraceLine(569,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_5 = __Pyx_PyInt_From_enum__http_parser_url_fields(UF_PORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_i, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "parser.pyx":571
 *             if i == http_parser.UF_PORT:
 *                 # This is so it's an integer as expected
 *                 if self._parser.port:             # <<<<<<<<<<<<<<
 *                     ret.append(self._parser.port)
 *                 else:
 */
      __Pyx_TraceLine(571,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      __pyx_t_1 = (__pyx_v_self->_parser->port != 0);
      if (__pyx_t_1) {

        /* "parser.pyx":572
 *                 # This is so it's an integer as expected
 *                 if self._parser.port:
 *                     ret.append(self._parser.port)             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Match urlparse
 */
        __Pyx_TraceLine(572,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
        __pyx_t_2 = __Pyx_PyInt_From_uint16_t(__pyx_v_self->_parser->port); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_ret, __pyx_t_2); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "parser.pyx":571
 *             if i == http_parser.UF_PORT:
 *                 # This is so it's an integer as expected
 *                 if self._parser.port:             # <<<<<<<<<<<<<<
 *                     ret.append(self._parser.port)
 *                 else:
 */
        goto __pyx_L8;
      }

      /* "parser.pyx":575
 *                 else:
 *                     # Match urlparse
 *                     ret.append(None)             # <<<<<<<<<<<<<<
 *             elif self._parser.field_set & (1 << i) == 0:
 *                 ret.append('')
 */
      __Pyx_TraceLine(575,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_ret, Py_None); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L8:;

      /* "parser.pyx":569
 *         ret = []
 *         for i in range(http_parser.UF_MAX):
 *             if i == http_parser.UF_PORT:             # <<<<<<<<<<<<<<
 *                 # This is so it's an integer as expected
 *                 if self._parser.port:
 */
      goto __pyx_L7;
    }

    /* "parser.pyx":576
 *                     # Match urlparse
 *                     ret.append(None)
 *             elif self._parser.field_set & (1 << i) == 0:             # <<<<<<<<<<<<<<
 *                 ret.append('')
 *             else:
 */
    __Pyx_TraceLine(576,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyInt_From_uint16_t(__pyx_v_self->_parser->field_set); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_Lshift(__pyx_int_1, __pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_And(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_9, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "parser.pyx":577
 *                     ret.append(None)
 *             elif self._parser.field_set & (1 << i) == 0:
 *                 ret.append('')             # <<<<<<<<<<<<<<
 *             else:
 *                 f_off = self._parser.field_data[i].off
 */
      __Pyx_TraceLine(577,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_ret, __pyx_kp_u__28); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "parser.pyx":576
 *                     # Match urlparse
 *                     ret.append(None)
 *             elif self._parser.field_set & (1 << i) == 0:             # <<<<<<<<<<<<<<
 *                 ret.append('')
 *             else:
 */
      goto __pyx_L7;
    }

    /* "parser.pyx":579
 *                 ret.append('')
 *             else:
 *                 f_off = self._parser.field_data[i].off             # <<<<<<<<<<<<<<
 *                 f_len = self._parser.field_data[i].len
 *                 part = url[f_off:f_off + f_len]
 */
    __Pyx_TraceLine(579,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    /*else*/ {
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_5 = __Pyx_PyInt_From_uint16_t((__pyx_v_self->_parser->field_data[__pyx_t_10]).off); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_f_off, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "parser.pyx":580
 *             else:
 *                 f_off = self._parser.field_data[i].off
 *                 f_len = self._parser.field_data[i].len             # <<<<<<<<<<<<<<
 *                 part = url[f_off:f_off + f_len]
 *                 ret.append(part)
 */
      __Pyx_TraceLine(580,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_5 = __Pyx_PyInt_From_uint16_t((__pyx_v_self->_parser->field_data[__pyx_t_10]).len); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_f_len, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "parser.pyx":581
 *                 f_off = self._parser.field_data[i].off
 *                 f_len = self._parser.field_data[i].len
 *                 part = url[f_off:f_off + f_len]             # <<<<<<<<<<<<<<
 *                 ret.append(part)
 * 
 */
      __Pyx_TraceLine(581,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_f_off); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_5 = PyNumber_Add(__pyx_v_f_off, __pyx_v_f_len); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_url + __pyx_t_10, __pyx_t_11 - __pyx_t_10); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_part, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "parser.pyx":582
 *                 f_len = self._parser.field_data[i].len
 *                 part = url[f_off:f_off + f_len]
 *                 ret.append(part)             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
      __Pyx_TraceLine(582,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_ret, __pyx_v_part); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;

    /* "parser.pyx":568
 * 
 *         ret = []
 *         for i in range(http_parser.UF_MAX):             # <<<<<<<<<<<<<<
 *             if i == http_parser.UF_PORT:
 *                 # This is so it's an integer as expected
 */
    __Pyx_TraceLine(568,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "parser.pyx":584
 *                 ret.append(part)
 * 
 *         return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(584,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "parser.pyx":556
 *         return ParseResult(*ret)
 * 
 *     cdef object _parse(self, char *url, size_t length, bool is_connect):             # <<<<<<<<<<<<<<
 *         cdef int rv
 *         cdef object ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("parser.HttpUrlParser._parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_f_off);
  __Pyx_XDECREF(__pyx_v_f_len);
  __Pyx_XDECREF(__pyx_v_part);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6parser_http_errno(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6parser_http_errno(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6parser_http_errno = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.http_errno", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_http_errno), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_http_errno, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_http_errno, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6parser_flags(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6parser_flags(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6parser_flags = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.flags", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_flags), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_flags, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_flags, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6parser_http_method(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6parser_http_method(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6parser_http_method = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.http_method", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_http_method), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_http_method, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_http_method, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6parser_http_parser_url_fields(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6parser_http_parser_url_fields(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6parser_http_parser_url_fields = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.http_parser_url_fields", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_http_parser_url_fields), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_http_parser_url_fields, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_http_parser_url_fields, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6parser_http_parser_type(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6parser_http_parser_type(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6parser_http_parser_type = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.http_parser_type", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_http_parser_type), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_http_parser_type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_http_parser_type, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6parser__ParserData(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6parser__ParserData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6parser__ParserData *)o);
  p->parent = Py_None; Py_INCREF(Py_None);
  p->delegate = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6parser_11_ParserData_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6parser__ParserData(PyObject *o) {
  struct __pyx_obj_6parser__ParserData *p = (struct __pyx_obj_6parser__ParserData *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->delegate);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6parser__ParserData(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6parser__ParserData *p = (struct __pyx_obj_6parser__ParserData *)o;
  if (p->parent) {
    e = (*v)(p->parent, a); if (e) return e;
  }
  if (p->delegate) {
    e = (*v)(p->delegate, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6parser__ParserData(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6parser__ParserData *p = (struct __pyx_obj_6parser__ParserData *)o;
  tmp = ((PyObject*)p->parent);
  p->parent = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->delegate);
  p->delegate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6parser_11_ParserData_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6parser_11_ParserData_6parent_1__get__(o);
}

static int __pyx_setprop_6parser_11_ParserData_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6parser_11_ParserData_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_6parser_11_ParserData_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6parser_11_ParserData_delegate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6parser_11_ParserData_8delegate_1__get__(o);
}

static int __pyx_setprop_6parser_11_ParserData_delegate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6parser_11_ParserData_8delegate_3__set__(o, v);
  }
  else {
    return __pyx_pw_6parser_11_ParserData_8delegate_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6parser__ParserData[] = {
  {"should_keep_alive", (PyCFunction)__pyx_pw_6parser_11_ParserData_3should_keep_alive, METH_NOARGS, __pyx_doc_6parser_11_ParserData_2should_keep_alive},
  {"body_is_final", (PyCFunction)__pyx_pw_6parser_11_ParserData_5body_is_final, METH_NOARGS, __pyx_doc_6parser_11_ParserData_4body_is_final},
  {"_flags_bits", (PyCFunction)__pyx_pw_6parser_11_ParserData_7_flags_bits, METH_NOARGS, __pyx_doc_6parser_11_ParserData_6_flags_bits},
  {"has_chunked_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_9has_chunked_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_8has_chunked_flag},
  {"has_connection_keep_alive_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_11has_connection_keep_alive_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_10has_connection_keep_alive_flag},
  {"has_connection_close_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_13has_connection_close_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_12has_connection_close_flag},
  {"has_connection_upgrade_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_15has_connection_upgrade_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_14has_connection_upgrade_flag},
  {"has_trailing_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_17has_trailing_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_16has_trailing_flag},
  {"has_upgrade_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_19has_upgrade_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_18has_upgrade_flag},
  {"has_skipbody_flag", (PyCFunction)__pyx_pw_6parser_11_ParserData_21has_skipbody_flag, METH_NOARGS, __pyx_doc_6parser_11_ParserData_20has_skipbody_flag},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6parser__ParserData[] = {
  {(char *)"parent", __pyx_getprop_6parser_11_ParserData_parent, __pyx_setprop_6parser_11_ParserData_parent, __pyx_k_parent_object, 0},
  {(char *)"delegate", __pyx_getprop_6parser_11_ParserData_delegate, __pyx_setprop_6parser_11_ParserData_delegate, __pyx_k_delegate_object, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6parser__ParserData = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser._ParserData", /*tp_name*/
  sizeof(struct __pyx_obj_6parser__ParserData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser__ParserData, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6parser__ParserData, /*tp_traverse*/
  __pyx_tp_clear_6parser__ParserData, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6parser__ParserData, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6parser__ParserData, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser__ParserData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6parser_Parser __pyx_vtable_6parser_Parser;

static PyObject *__pyx_tp_new_6parser_Parser(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6parser_Parser *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6parser_Parser *)o);
  p->__pyx_vtab = __pyx_vtabptr_6parser_Parser;
  p->delegate = Py_None; Py_INCREF(Py_None);
  p->data = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6parser_6Parser_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6parser_Parser(PyObject *o) {
  struct __pyx_obj_6parser_Parser *p = (struct __pyx_obj_6parser_Parser *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6parser_6Parser_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->delegate);
  Py_CLEAR(p->data);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6parser_Parser(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6parser_Parser *p = (struct __pyx_obj_6parser_Parser *)o;
  if (p->delegate) {
    e = (*v)(p->delegate, a); if (e) return e;
  }
  if (p->data) {
    e = (*v)(p->data, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6parser_Parser(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6parser_Parser *p = (struct __pyx_obj_6parser_Parser *)o;
  tmp = ((PyObject*)p->delegate);
  p->delegate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->data);
  p->data = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6parser_6Parser_delegate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6parser_6Parser_8delegate_1__get__(o);
}

static int __pyx_setprop_6parser_6Parser_delegate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6parser_6Parser_8delegate_3__set__(o, v);
  }
  else {
    return __pyx_pw_6parser_6Parser_8delegate_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6parser_6Parser_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6parser_6Parser_4data_1__get__(o);
}

static int __pyx_setprop_6parser_6Parser_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6parser_6Parser_4data_3__set__(o, v);
  }
  else {
    return __pyx_pw_6parser_6Parser_4data_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6parser_Parser[] = {
  {"destroy", (PyCFunction)__pyx_pw_6parser_6Parser_3destroy, METH_NOARGS, __pyx_doc_6parser_6Parser_2destroy},
  {"execute", (PyCFunction)__pyx_pw_6parser_6Parser_7execute, METH_O, __pyx_doc_6parser_6Parser_6execute},
  {"pause", (PyCFunction)__pyx_pw_6parser_6Parser_9pause, METH_NOARGS, __pyx_doc_6parser_6Parser_8pause},
  {"resume", (PyCFunction)__pyx_pw_6parser_6Parser_11resume, METH_NOARGS, __pyx_doc_6parser_6Parser_10resume},
  {"body_is_final", (PyCFunction)__pyx_pw_6parser_6Parser_13body_is_final, METH_NOARGS, __pyx_doc_6parser_6Parser_12body_is_final},
  {"should_keep_alive", (PyCFunction)__pyx_pw_6parser_6Parser_15should_keep_alive, METH_NOARGS, __pyx_doc_6parser_6Parser_14should_keep_alive},
  {"_flags_bits", (PyCFunction)__pyx_pw_6parser_6Parser_17_flags_bits, METH_NOARGS, __pyx_doc_6parser_6Parser_16_flags_bits},
  {"has_chunked_flag", (PyCFunction)__pyx_pw_6parser_6Parser_19has_chunked_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_18has_chunked_flag},
  {"has_connection_keep_alive_flag", (PyCFunction)__pyx_pw_6parser_6Parser_21has_connection_keep_alive_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_20has_connection_keep_alive_flag},
  {"has_connection_close_flag", (PyCFunction)__pyx_pw_6parser_6Parser_23has_connection_close_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_22has_connection_close_flag},
  {"has_connection_upgrade_flag", (PyCFunction)__pyx_pw_6parser_6Parser_25has_connection_upgrade_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_24has_connection_upgrade_flag},
  {"has_trailing_flag", (PyCFunction)__pyx_pw_6parser_6Parser_27has_trailing_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_26has_trailing_flag},
  {"has_upgrade_flag", (PyCFunction)__pyx_pw_6parser_6Parser_29has_upgrade_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_28has_upgrade_flag},
  {"has_skipbody_flag", (PyCFunction)__pyx_pw_6parser_6Parser_31has_skipbody_flag, METH_NOARGS, __pyx_doc_6parser_6Parser_30has_skipbody_flag},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6parser_Parser[] = {
  {(char *)"delegate", __pyx_getprop_6parser_6Parser_delegate, __pyx_setprop_6parser_6Parser_delegate, __pyx_k_delegate_object, 0},
  {(char *)"data", __pyx_getprop_6parser_6Parser_data, __pyx_setprop_6parser_6Parser_data, __pyx_k_data_object, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6parser_Parser = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.Parser", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_Parser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_Parser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6parser_Parser, /*tp_traverse*/
  __pyx_tp_clear_6parser_Parser, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6parser_Parser, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6parser_Parser, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_Parser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6parser_HttpUrlParser __pyx_vtable_6parser_HttpUrlParser;

static PyObject *__pyx_tp_new_6parser_HttpUrlParser(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6parser_HttpUrlParser *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6parser_HttpUrlParser *)o);
  p->__pyx_vtab = __pyx_vtabptr_6parser_HttpUrlParser;
  p->data = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6parser_13HttpUrlParser_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6parser_HttpUrlParser(PyObject *o) {
  struct __pyx_obj_6parser_HttpUrlParser *p = (struct __pyx_obj_6parser_HttpUrlParser *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6parser_13HttpUrlParser_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->data);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6parser_HttpUrlParser(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6parser_HttpUrlParser *p = (struct __pyx_obj_6parser_HttpUrlParser *)o;
  if (p->data) {
    e = (*v)(p->data, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6parser_HttpUrlParser(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6parser_HttpUrlParser *p = (struct __pyx_obj_6parser_HttpUrlParser *)o;
  tmp = ((PyObject*)p->data);
  p->data = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6parser_HttpUrlParser[] = {
  {"destroy", (PyCFunction)__pyx_pw_6parser_13HttpUrlParser_3destroy, METH_NOARGS, __pyx_doc_6parser_13HttpUrlParser_2destroy},
  {"parse", (PyCFunction)__pyx_pw_6parser_13HttpUrlParser_7parse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6parser_13HttpUrlParser_6parse},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6parser_HttpUrlParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "parser.HttpUrlParser", /*tp_name*/
  sizeof(struct __pyx_obj_6parser_HttpUrlParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6parser_HttpUrlParser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6parser_HttpUrlParser, /*tp_traverse*/
  __pyx_tp_clear_6parser_HttpUrlParser, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6parser_HttpUrlParser, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6parser_HttpUrlParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "parser",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_BothParser, __pyx_k_BothParser, sizeof(__pyx_k_BothParser), 0, 0, 1, 1},
  {&__pyx_kp_u_Can_not_coerce_type_into_bytes, __pyx_k_Can_not_coerce_type_into_bytes, sizeof(__pyx_k_Can_not_coerce_type_into_bytes), 0, 1, 0, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_F_CHUNKED, __pyx_k_F_CHUNKED, sizeof(__pyx_k_F_CHUNKED), 0, 0, 1, 1},
  {&__pyx_n_s_F_CONNECTION_CLOSE, __pyx_k_F_CONNECTION_CLOSE, sizeof(__pyx_k_F_CONNECTION_CLOSE), 0, 0, 1, 1},
  {&__pyx_n_s_F_CONNECTION_KEEP_ALIVE, __pyx_k_F_CONNECTION_KEEP_ALIVE, sizeof(__pyx_k_F_CONNECTION_KEEP_ALIVE), 0, 0, 1, 1},
  {&__pyx_n_s_F_CONNECTION_UPGRADE, __pyx_k_F_CONNECTION_UPGRADE, sizeof(__pyx_k_F_CONNECTION_UPGRADE), 0, 0, 1, 1},
  {&__pyx_n_s_F_SKIPBODY, __pyx_k_F_SKIPBODY, sizeof(__pyx_k_F_SKIPBODY), 0, 0, 1, 1},
  {&__pyx_n_s_F_TRAILING, __pyx_k_F_TRAILING, sizeof(__pyx_k_F_TRAILING), 0, 0, 1, 1},
  {&__pyx_n_s_F_UPGRADE, __pyx_k_F_UPGRADE, sizeof(__pyx_k_F_UPGRADE), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_body, __pyx_k_HPE_CB_body, sizeof(__pyx_k_HPE_CB_body), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_chunk_complete, __pyx_k_HPE_CB_chunk_complete, sizeof(__pyx_k_HPE_CB_chunk_complete), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_chunk_header, __pyx_k_HPE_CB_chunk_header, sizeof(__pyx_k_HPE_CB_chunk_header), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_header_field, __pyx_k_HPE_CB_header_field, sizeof(__pyx_k_HPE_CB_header_field), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_header_value, __pyx_k_HPE_CB_header_value, sizeof(__pyx_k_HPE_CB_header_value), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_headers_complete, __pyx_k_HPE_CB_headers_complete, sizeof(__pyx_k_HPE_CB_headers_complete), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_message_begin, __pyx_k_HPE_CB_message_begin, sizeof(__pyx_k_HPE_CB_message_begin), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_message_complete, __pyx_k_HPE_CB_message_complete, sizeof(__pyx_k_HPE_CB_message_complete), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_status, __pyx_k_HPE_CB_status, sizeof(__pyx_k_HPE_CB_status), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CB_url, __pyx_k_HPE_CB_url, sizeof(__pyx_k_HPE_CB_url), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_CLOSED_CONNECTION, __pyx_k_HPE_CLOSED_CONNECTION, sizeof(__pyx_k_HPE_CLOSED_CONNECTION), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_HEADER_OVERFLOW, __pyx_k_HPE_HEADER_OVERFLOW, sizeof(__pyx_k_HPE_HEADER_OVERFLOW), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_CHUNK_SIZE, __pyx_k_HPE_INVALID_CHUNK_SIZE, sizeof(__pyx_k_HPE_INVALID_CHUNK_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_CONSTANT, __pyx_k_HPE_INVALID_CONSTANT, sizeof(__pyx_k_HPE_INVALID_CONSTANT), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_CONTENT_LENGTH, __pyx_k_HPE_INVALID_CONTENT_LENGTH, sizeof(__pyx_k_HPE_INVALID_CONTENT_LENGTH), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_EOF_STATE, __pyx_k_HPE_INVALID_EOF_STATE, sizeof(__pyx_k_HPE_INVALID_EOF_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_FRAGMENT, __pyx_k_HPE_INVALID_FRAGMENT, sizeof(__pyx_k_HPE_INVALID_FRAGMENT), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_HEADER_TOKEN, __pyx_k_HPE_INVALID_HEADER_TOKEN, sizeof(__pyx_k_HPE_INVALID_HEADER_TOKEN), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_HOST, __pyx_k_HPE_INVALID_HOST, sizeof(__pyx_k_HPE_INVALID_HOST), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_INTERNAL_STATE, __pyx_k_HPE_INVALID_INTERNAL_STATE, sizeof(__pyx_k_HPE_INVALID_INTERNAL_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_METHOD, __pyx_k_HPE_INVALID_METHOD, sizeof(__pyx_k_HPE_INVALID_METHOD), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_PATH, __pyx_k_HPE_INVALID_PATH, sizeof(__pyx_k_HPE_INVALID_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_PORT, __pyx_k_HPE_INVALID_PORT, sizeof(__pyx_k_HPE_INVALID_PORT), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_QUERY_STRING, __pyx_k_HPE_INVALID_QUERY_STRING, sizeof(__pyx_k_HPE_INVALID_QUERY_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_STATUS, __pyx_k_HPE_INVALID_STATUS, sizeof(__pyx_k_HPE_INVALID_STATUS), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_URL, __pyx_k_HPE_INVALID_URL, sizeof(__pyx_k_HPE_INVALID_URL), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_INVALID_VERSION, __pyx_k_HPE_INVALID_VERSION, sizeof(__pyx_k_HPE_INVALID_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_LF_EXPECTED, __pyx_k_HPE_LF_EXPECTED, sizeof(__pyx_k_HPE_LF_EXPECTED), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_OK, __pyx_k_HPE_OK, sizeof(__pyx_k_HPE_OK), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_PAUSED, __pyx_k_HPE_PAUSED, sizeof(__pyx_k_HPE_PAUSED), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_STRICT, __pyx_k_HPE_STRICT, sizeof(__pyx_k_HPE_STRICT), 0, 0, 1, 1},
  {&__pyx_n_s_HPE_UNKNOWN, __pyx_k_HPE_UNKNOWN, sizeof(__pyx_k_HPE_UNKNOWN), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_ACL, __pyx_k_HTTP_ACL, sizeof(__pyx_k_HTTP_ACL), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_BIND, __pyx_k_HTTP_BIND, sizeof(__pyx_k_HTTP_BIND), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_BOTH, __pyx_k_HTTP_BOTH, sizeof(__pyx_k_HTTP_BOTH), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_CHECKOUT, __pyx_k_HTTP_CHECKOUT, sizeof(__pyx_k_HTTP_CHECKOUT), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_CONNECT, __pyx_k_HTTP_CONNECT, sizeof(__pyx_k_HTTP_CONNECT), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_COPY, __pyx_k_HTTP_COPY, sizeof(__pyx_k_HTTP_COPY), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_DELETE, __pyx_k_HTTP_DELETE, sizeof(__pyx_k_HTTP_DELETE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_GET, __pyx_k_HTTP_GET, sizeof(__pyx_k_HTTP_GET), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_HEAD, __pyx_k_HTTP_HEAD, sizeof(__pyx_k_HTTP_HEAD), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_LINK, __pyx_k_HTTP_LINK, sizeof(__pyx_k_HTTP_LINK), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_LOCK, __pyx_k_HTTP_LOCK, sizeof(__pyx_k_HTTP_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_MERGE, __pyx_k_HTTP_MERGE, sizeof(__pyx_k_HTTP_MERGE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_MKACTIVITY, __pyx_k_HTTP_MKACTIVITY, sizeof(__pyx_k_HTTP_MKACTIVITY), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_MKCALENDAR, __pyx_k_HTTP_MKCALENDAR, sizeof(__pyx_k_HTTP_MKCALENDAR), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_MKCOL, __pyx_k_HTTP_MKCOL, sizeof(__pyx_k_HTTP_MKCOL), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_MOVE, __pyx_k_HTTP_MOVE, sizeof(__pyx_k_HTTP_MOVE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_MSEARCH, __pyx_k_HTTP_MSEARCH, sizeof(__pyx_k_HTTP_MSEARCH), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_NOTIFY, __pyx_k_HTTP_NOTIFY, sizeof(__pyx_k_HTTP_NOTIFY), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_OPTIONS, __pyx_k_HTTP_OPTIONS, sizeof(__pyx_k_HTTP_OPTIONS), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_PATCH, __pyx_k_HTTP_PATCH, sizeof(__pyx_k_HTTP_PATCH), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_POST, __pyx_k_HTTP_POST, sizeof(__pyx_k_HTTP_POST), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_PROPFIND, __pyx_k_HTTP_PROPFIND, sizeof(__pyx_k_HTTP_PROPFIND), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_PROPPATCH, __pyx_k_HTTP_PROPPATCH, sizeof(__pyx_k_HTTP_PROPPATCH), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_PURGE, __pyx_k_HTTP_PURGE, sizeof(__pyx_k_HTTP_PURGE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_PUT, __pyx_k_HTTP_PUT, sizeof(__pyx_k_HTTP_PUT), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_REBIND, __pyx_k_HTTP_REBIND, sizeof(__pyx_k_HTTP_REBIND), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_REPORT, __pyx_k_HTTP_REPORT, sizeof(__pyx_k_HTTP_REPORT), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_REQUEST, __pyx_k_HTTP_REQUEST, sizeof(__pyx_k_HTTP_REQUEST), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_RESPONSE, __pyx_k_HTTP_RESPONSE, sizeof(__pyx_k_HTTP_RESPONSE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_SEARCH, __pyx_k_HTTP_SEARCH, sizeof(__pyx_k_HTTP_SEARCH), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_SUBSCRIBE, __pyx_k_HTTP_SUBSCRIBE, sizeof(__pyx_k_HTTP_SUBSCRIBE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_TRACE, __pyx_k_HTTP_TRACE, sizeof(__pyx_k_HTTP_TRACE), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_UNBIND, __pyx_k_HTTP_UNBIND, sizeof(__pyx_k_HTTP_UNBIND), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_UNLINK, __pyx_k_HTTP_UNLINK, sizeof(__pyx_k_HTTP_UNLINK), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_UNLOCK, __pyx_k_HTTP_UNLOCK, sizeof(__pyx_k_HTTP_UNLOCK), 0, 0, 1, 1},
  {&__pyx_n_s_HTTP_UNSUBSCRIBE, __pyx_k_HTTP_UNSUBSCRIBE, sizeof(__pyx_k_HTTP_UNSUBSCRIBE), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_PY3, __pyx_k_PY3, sizeof(__pyx_k_PY3), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult, __pyx_k_ParseResult, sizeof(__pyx_k_ParseResult), 0, 0, 1, 1},
  {&__pyx_n_u_ParseResult, __pyx_k_ParseResult, sizeof(__pyx_k_ParseResult), 0, 1, 0, 1},
  {&__pyx_n_s_ParseResult__as_urlparse_result, __pyx_k_ParseResult__as_urlparse_result, sizeof(__pyx_k_ParseResult__as_urlparse_result), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_as_strings, __pyx_k_ParseResult_as_strings, sizeof(__pyx_k_ParseResult_as_strings), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_as_urlparse_result, __pyx_k_ParseResult_as_urlparse_result, sizeof(__pyx_k_ParseResult_as_urlparse_result), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_geturl, __pyx_k_ParseResult_geturl, sizeof(__pyx_k_ParseResult_geturl), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_netloc, __pyx_k_ParseResult_netloc, sizeof(__pyx_k_ParseResult_netloc), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_params, __pyx_k_ParseResult_params, sizeof(__pyx_k_ParseResult_params), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_password, __pyx_k_ParseResult_password, sizeof(__pyx_k_ParseResult_password), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_path, __pyx_k_ParseResult_path, sizeof(__pyx_k_ParseResult_path), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResult_username, __pyx_k_ParseResult_username, sizeof(__pyx_k_ParseResult_username), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate, __pyx_k_ParserDelegate, sizeof(__pyx_k_ParserDelegate), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_body, __pyx_k_ParserDelegate_on_body, sizeof(__pyx_k_ParserDelegate_on_body), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_chunk_complete, __pyx_k_ParserDelegate_on_chunk_complete, sizeof(__pyx_k_ParserDelegate_on_chunk_complete), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_chunk_header, __pyx_k_ParserDelegate_on_chunk_header, sizeof(__pyx_k_ParserDelegate_on_chunk_header), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_header_field, __pyx_k_ParserDelegate_on_header_field, sizeof(__pyx_k_ParserDelegate_on_header_field), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_header_value, __pyx_k_ParserDelegate_on_header_value, sizeof(__pyx_k_ParserDelegate_on_header_value), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_headers_comple, __pyx_k_ParserDelegate_on_headers_comple, sizeof(__pyx_k_ParserDelegate_on_headers_comple), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_http_version, __pyx_k_ParserDelegate_on_http_version, sizeof(__pyx_k_ParserDelegate_on_http_version), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_message_begin, __pyx_k_ParserDelegate_on_message_begin, sizeof(__pyx_k_ParserDelegate_on_message_begin), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_message_comple, __pyx_k_ParserDelegate_on_message_comple, sizeof(__pyx_k_ParserDelegate_on_message_comple), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_req_method, __pyx_k_ParserDelegate_on_req_method, sizeof(__pyx_k_ParserDelegate_on_req_method), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_req_url, __pyx_k_ParserDelegate_on_req_url, sizeof(__pyx_k_ParserDelegate_on_req_url), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_resp_status, __pyx_k_ParserDelegate_on_resp_status, sizeof(__pyx_k_ParserDelegate_on_resp_status), 0, 0, 1, 1},
  {&__pyx_n_s_ParserDelegate_on_upgrade, __pyx_k_ParserDelegate_on_upgrade, sizeof(__pyx_k_ParserDelegate_on_upgrade), 0, 0, 1, 1},
  {&__pyx_kp_u_Parser_destroyed_or_not_initiali, __pyx_k_Parser_destroyed_or_not_initiali, sizeof(__pyx_k_Parser_destroyed_or_not_initiali), 0, 1, 0, 0},
  {&__pyx_kp_u_Parser_did_not_parse_all_of_data, __pyx_k_Parser_did_not_parse_all_of_data, sizeof(__pyx_k_Parser_did_not_parse_all_of_data), 0, 1, 0, 0},
  {&__pyx_kp_u_Parser_gave_error_errno_name_des, __pyx_k_Parser_gave_error_errno_name_des, sizeof(__pyx_k_Parser_gave_error_errno_name_des), 0, 1, 0, 0},
  {&__pyx_n_s_RequestParser, __pyx_k_RequestParser, sizeof(__pyx_k_RequestParser), 0, 0, 1, 1},
  {&__pyx_n_s_ResponseParser, __pyx_k_ResponseParser, sizeof(__pyx_k_ResponseParser), 0, 0, 1, 1},
  {&__pyx_n_s_UF_FRAGMENT, __pyx_k_UF_FRAGMENT, sizeof(__pyx_k_UF_FRAGMENT), 0, 0, 1, 1},
  {&__pyx_n_s_UF_HOST, __pyx_k_UF_HOST, sizeof(__pyx_k_UF_HOST), 0, 0, 1, 1},
  {&__pyx_n_s_UF_MAX, __pyx_k_UF_MAX, sizeof(__pyx_k_UF_MAX), 0, 0, 1, 1},
  {&__pyx_n_s_UF_PATH, __pyx_k_UF_PATH, sizeof(__pyx_k_UF_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_UF_PORT, __pyx_k_UF_PORT, sizeof(__pyx_k_UF_PORT), 0, 0, 1, 1},
  {&__pyx_n_s_UF_QUERY, __pyx_k_UF_QUERY, sizeof(__pyx_k_UF_QUERY), 0, 0, 1, 1},
  {&__pyx_n_s_UF_SCHEMA, __pyx_k_UF_SCHEMA, sizeof(__pyx_k_UF_SCHEMA), 0, 0, 1, 1},
  {&__pyx_n_s_UF_USERINFO, __pyx_k_UF_USERINFO, sizeof(__pyx_k_UF_USERINFO), 0, 0, 1, 1},
  {&__pyx_kp_u_URL_Parser_gave_error_rv, __pyx_k_URL_Parser_gave_error_rv, sizeof(__pyx_k_URL_Parser_gave_error_rv), 0, 1, 0, 0},
  {&__pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_k_Users_trevorj_vk_git_proxy__ex, sizeof(__pyx_k_Users_trevorj_vk_git_proxy__ex), 0, 0, 1, 0},
  {&__pyx_kp_b__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 0, 0},
  {&__pyx_kp_b__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 0, 0, 0},
  {&__pyx_kp_b__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 0, 0},
  {&__pyx_kp_u__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 1, 0, 0},
  {&__pyx_kp_b__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 0, 0},
  {&__pyx_n_s__47, __pyx_k__47, sizeof(__pyx_k__47), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_kp_u_arg_err_wrong_type, __pyx_k_arg_err_wrong_type, sizeof(__pyx_k_arg_err_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_m_wrong_type, __pyx_k_arg_m_wrong_type, sizeof(__pyx_k_arg_m_wrong_type), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_as_strings, __pyx_k_as_strings, sizeof(__pyx_k_as_strings), 0, 0, 1, 1},
  {&__pyx_n_s_as_urlparse_result, __pyx_k_as_urlparse_result, sizeof(__pyx_k_as_urlparse_result), 0, 0, 1, 1},
  {&__pyx_n_s_as_urlparse_result_tuple, __pyx_k_as_urlparse_result_tuple, sizeof(__pyx_k_as_urlparse_result_tuple), 0, 0, 1, 1},
  {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
  {&__pyx_n_s_body_is_final, __pyx_k_body_is_final, sizeof(__pyx_k_body_is_final), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_code, __pyx_k_code, sizeof(__pyx_k_code), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_delegate, __pyx_k_delegate, sizeof(__pyx_k_delegate), 0, 0, 1, 1},
  {&__pyx_n_s_desc, __pyx_k_desc, sizeof(__pyx_k_desc), 0, 0, 1, 1},
  {&__pyx_n_s_destroy, __pyx_k_destroy, sizeof(__pyx_k_destroy), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_errno, __pyx_k_errno, sizeof(__pyx_k_errno), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_flags_bits, __pyx_k_flags_bits, sizeof(__pyx_k_flags_bits), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fragment, __pyx_k_fragment, sizeof(__pyx_k_fragment), 0, 0, 1, 1},
  {&__pyx_n_u_fragment, __pyx_k_fragment, sizeof(__pyx_k_fragment), 0, 1, 0, 1},
  {&__pyx_n_s_geturl, __pyx_k_geturl, sizeof(__pyx_k_geturl), 0, 0, 1, 1},
  {&__pyx_n_s_has_chunked_flag, __pyx_k_has_chunked_flag, sizeof(__pyx_k_has_chunked_flag), 0, 0, 1, 1},
  {&__pyx_n_s_has_connection_close_flag, __pyx_k_has_connection_close_flag, sizeof(__pyx_k_has_connection_close_flag), 0, 0, 1, 1},
  {&__pyx_n_s_has_connection_keep_alive_flag, __pyx_k_has_connection_keep_alive_flag, sizeof(__pyx_k_has_connection_keep_alive_flag), 0, 0, 1, 1},
  {&__pyx_n_s_has_connection_upgrade_flag, __pyx_k_has_connection_upgrade_flag, sizeof(__pyx_k_has_connection_upgrade_flag), 0, 0, 1, 1},
  {&__pyx_n_s_has_skipbody_flag, __pyx_k_has_skipbody_flag, sizeof(__pyx_k_has_skipbody_flag), 0, 0, 1, 1},
  {&__pyx_n_s_has_trailing_flag, __pyx_k_has_trailing_flag, sizeof(__pyx_k_has_trailing_flag), 0, 0, 1, 1},
  {&__pyx_n_s_has_upgrade_flag, __pyx_k_has_upgrade_flag, sizeof(__pyx_k_has_upgrade_flag), 0, 0, 1, 1},
  {&__pyx_n_s_hostname, __pyx_k_hostname, sizeof(__pyx_k_hostname), 0, 0, 1, 1},
  {&__pyx_n_u_hostname, __pyx_k_hostname, sizeof(__pyx_k_hostname), 0, 1, 0, 1},
  {&__pyx_n_s_http_errno_description, __pyx_k_http_errno_description, sizeof(__pyx_k_http_errno_description), 0, 0, 1, 1},
  {&__pyx_n_s_http_errno_name, __pyx_k_http_errno_name, sizeof(__pyx_k_http_errno_name), 0, 0, 1, 1},
  {&__pyx_n_s_http_method_str, __pyx_k_http_method_str, sizeof(__pyx_k_http_method_str), 0, 0, 1, 1},
  {&__pyx_n_s_http_parser_version, __pyx_k_http_parser_version, sizeof(__pyx_k_http_parser_version), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_is_chunked, __pyx_k_is_chunked, sizeof(__pyx_k_is_chunked), 0, 0, 1, 1},
  {&__pyx_n_s_is_connect, __pyx_k_is_connect, sizeof(__pyx_k_is_connect), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_keep_alive, __pyx_k_keep_alive, sizeof(__pyx_k_keep_alive), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_major, __pyx_k_major, sizeof(__pyx_k_major), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_minor, __pyx_k_minor, sizeof(__pyx_k_minor), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_netloc, __pyx_k_netloc, sizeof(__pyx_k_netloc), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_on_body, __pyx_k_on_body, sizeof(__pyx_k_on_body), 0, 0, 1, 1},
  {&__pyx_n_s_on_chunk_complete, __pyx_k_on_chunk_complete, sizeof(__pyx_k_on_chunk_complete), 0, 0, 1, 1},
  {&__pyx_n_s_on_chunk_header, __pyx_k_on_chunk_header, sizeof(__pyx_k_on_chunk_header), 0, 0, 1, 1},
  {&__pyx_n_s_on_header_field, __pyx_k_on_header_field, sizeof(__pyx_k_on_header_field), 0, 0, 1, 1},
  {&__pyx_n_s_on_header_value, __pyx_k_on_header_value, sizeof(__pyx_k_on_header_value), 0, 0, 1, 1},
  {&__pyx_n_s_on_headers_complete, __pyx_k_on_headers_complete, sizeof(__pyx_k_on_headers_complete), 0, 0, 1, 1},
  {&__pyx_n_s_on_http_version, __pyx_k_on_http_version, sizeof(__pyx_k_on_http_version), 0, 0, 1, 1},
  {&__pyx_n_s_on_message_begin, __pyx_k_on_message_begin, sizeof(__pyx_k_on_message_begin), 0, 0, 1, 1},
  {&__pyx_n_s_on_message_complete, __pyx_k_on_message_complete, sizeof(__pyx_k_on_message_complete), 0, 0, 1, 1},
  {&__pyx_n_s_on_req_method, __pyx_k_on_req_method, sizeof(__pyx_k_on_req_method), 0, 0, 1, 1},
  {&__pyx_n_s_on_req_url, __pyx_k_on_req_url, sizeof(__pyx_k_on_req_url), 0, 0, 1, 1},
  {&__pyx_n_s_on_resp_status, __pyx_k_on_resp_status, sizeof(__pyx_k_on_resp_status), 0, 0, 1, 1},
  {&__pyx_n_s_on_upgrade, __pyx_k_on_upgrade, sizeof(__pyx_k_on_upgrade), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_n_s_parser_delegate, __pyx_k_parser_delegate, sizeof(__pyx_k_parser_delegate), 0, 0, 1, 1},
  {&__pyx_n_s_parser_type, __pyx_k_parser_type, sizeof(__pyx_k_parser_type), 0, 0, 1, 1},
  {&__pyx_n_s_password, __pyx_k_password, sizeof(__pyx_k_password), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_port, __pyx_k_port, sizeof(__pyx_k_port), 0, 0, 1, 1},
  {&__pyx_n_u_port, __pyx_k_port, sizeof(__pyx_k_port), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_py_result, __pyx_k_py_result, sizeof(__pyx_k_py_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 0, 1, 1},
  {&__pyx_n_u_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 1, 0, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw_path, __pyx_k_raw_path, sizeof(__pyx_k_raw_path), 0, 0, 1, 1},
  {&__pyx_n_u_raw_path, __pyx_k_raw_path, sizeof(__pyx_k_raw_path), 0, 1, 0, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_rv, __pyx_k_rv, sizeof(__pyx_k_rv), 0, 0, 1, 1},
  {&__pyx_n_s_scheme, __pyx_k_scheme, sizeof(__pyx_k_scheme), 0, 0, 1, 1},
  {&__pyx_n_u_scheme, __pyx_k_scheme, sizeof(__pyx_k_scheme), 0, 1, 0, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_should_keep_alive, __pyx_k_should_keep_alive, sizeof(__pyx_k_should_keep_alive), 0, 0, 1, 1},
  {&__pyx_n_s_six, __pyx_k_six, sizeof(__pyx_k_six), 0, 0, 1, 1},
  {&__pyx_n_s_slots, __pyx_k_slots, sizeof(__pyx_k_slots), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_bytes, __pyx_k_to_bytes, sizeof(__pyx_k_to_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_n_s_urllib_parse, __pyx_k_urllib_parse, sizeof(__pyx_k_urllib_parse), 0, 0, 1, 1},
  {&__pyx_n_s_urlparse, __pyx_k_urlparse, sizeof(__pyx_k_urlparse), 0, 0, 1, 1},
  {&__pyx_n_s_urlunparse, __pyx_k_urlunparse, sizeof(__pyx_k_urlunparse), 0, 0, 1, 1},
  {&__pyx_n_s_userinfo, __pyx_k_userinfo, sizeof(__pyx_k_userinfo), 0, 0, 1, 1},
  {&__pyx_n_u_userinfo, __pyx_k_userinfo, sizeof(__pyx_k_userinfo), 0, 1, 0, 1},
  {&__pyx_n_s_username, __pyx_k_username, sizeof(__pyx_k_username), 0, 0, 1, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "parser.pyx":167
 *         pass
 *     elif isinstance(data, unicode):
 *         data = data.encode('utf8')             # <<<<<<<<<<<<<<
 *     elif isinstance(data, (list, bytearray)):
 *         data = bytes(data)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_u_utf8); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "parser.pyx":383
 *         if nparsed != length:
 *             self._raise_errno_if_needed()
 *             raise Exception('Parser did not parse all of data length but gave an OK back?')             # <<<<<<<<<<<<<<
 * 
 *         # Check to see if parser exited due to an upgrade
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Parser_did_not_parse_all_of_data); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "parser.pyx":407
 *     cdef int _assert_parser(self) except -1:
 *         if self._parser == NULL:
 *             raise Exception('Parser destroyed or not initialized!')             # <<<<<<<<<<<<<<
 * 
 *     def pause(self):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Parser_destroyed_or_not_initiali); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "parser.pyx":493
 *     @property
 *     def path(self):
 *         return self.raw_path.split(b';', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_kp_b__30, __pyx_int_1); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "parser.pyx":498
 *     def params(self):
 *         if b';' in self.raw_path:
 *             return self.raw_path.split(b';', 1)             # <<<<<<<<<<<<<<
 *         else:
 *             return b''
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_kp_b__30, __pyx_int_1); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "parser.pyx":506
 *         if not self.userinfo:
 *             return
 *         return self.userinfo.split(b':', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_kp_b__27, __pyx_int_1); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "parser.pyx":512
 *         if not self.userinfo:
 *             return
 *         return self.userinfo.split(b':', 1)[1]             # <<<<<<<<<<<<<<
 * 
 *     def as_strings(self):
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_kp_b__27, __pyx_int_1); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "parser.pyx":561
 * 
 *         if self._parser == NULL:
 *             raise Exception('Parser destroyed or not initialized!')             # <<<<<<<<<<<<<<
 * 
 *         rv = http_parser.http_parser_parse_url(url, length, is_connect, self._parser)
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_Parser_destroyed_or_not_initiali); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "parser.pyx":40
 *     char * _cast_const_away(char *)
 * 
 * def http_errno_description(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(4, __pyx_n_s_err, __pyx_n_s_err, __pyx_n_s_r, __pyx_n_s_py_result); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_http_errno_description, 40, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":47
 *     return py_result
 * 
 * def http_errno_name(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(4, __pyx_n_s_err, __pyx_n_s_err, __pyx_n_s_r, __pyx_n_s_py_result); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_http_errno_name, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":54
 *     return py_result
 * 
 * def http_method_str(int m ):             # <<<<<<<<<<<<<<
 *     assert m in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'arg m wrong type'
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(4, __pyx_n_s_m, __pyx_n_s_m, __pyx_n_s_r, __pyx_n_s_py_result); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_http_method_str, 54, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":61
 *     return py_result
 * 
 * def http_parser_version():             # <<<<<<<<<<<<<<
 *     cdef unsigned long int _r = _http_parser_version_http_parser()
 *     py_result = <unsigned long int>_r
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_r, __pyx_n_s_py_result); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_http_parser_version, 61, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":163
 *     import urlparse
 * 
 * def to_bytes(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         pass
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_data); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_to_bytes, 163, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":248
 * 
 * class ParserDelegate(object):
 *     def on_message_begin(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_message_begin, 248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":251
 *         pass
 * 
 *     def on_req_method(self, method):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_method); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_req_method, 251, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":254
 *         pass
 * 
 *     def on_req_url(self, url):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_url); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_req_url, 254, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":257
 *         pass
 * 
 *     def on_resp_status(self, code, desc):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_code, __pyx_n_s_desc); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_resp_status, 257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":260
 *         pass
 * 
 *     def on_header_field(self, field):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_field); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_header_field, 260, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":263
 *         pass
 * 
 *     def on_header_value(self, value):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_header_value, 263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":266
 *         pass
 * 
 *     def on_http_version(self, major, minor):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_major, __pyx_n_s_minor); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_http_version, 266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":269
 *         pass
 * 
 *     def on_headers_complete(self, keep_alive):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_keep_alive); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_headers_complete, 269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":272
 *         pass
 * 
 *     def on_body(self, data, length, is_chunked):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__57 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_length, __pyx_n_s_is_chunked); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_body, 272, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":275
 *         pass
 * 
 *     def on_message_complete(self, is_chunked, keep_alive):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_is_chunked, __pyx_n_s_keep_alive); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_message_complete, 275, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":278
 *         pass
 * 
 *     def on_chunk_header(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_chunk_header, 278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":281
 *         pass
 * 
 *     def on_chunk_complete(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_chunk_complete, 281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":284
 *         pass
 * 
 *     def on_upgrade(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_on_upgrade, 284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":459
 * 
 * 
 * def BothParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_BOTH, parser_delegate)
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_parser_delegate); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_BothParser, 459, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":463
 * 
 * 
 * def RequestParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_REQUEST, parser_delegate)
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_n_s_parser_delegate); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_RequestParser, 463, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":467
 * 
 * 
 * def ResponseParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_RESPONSE, parser_delegate)
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_s_parser_delegate); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_ResponseParser, 467, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":476
 * 
 *     @property
 *     def netloc(self):             # <<<<<<<<<<<<<<
 *         ret = []
 *         if self.userinfo:
 */
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_netloc, 476, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":492
 * 
 *     @property
 *     def path(self):             # <<<<<<<<<<<<<<
 *         return self.raw_path.split(b';', 1)[0]
 * 
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_path, 492, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":496
 * 
 *     @property
 *     def params(self):             # <<<<<<<<<<<<<<
 *         if b';' in self.raw_path:
 *             return self.raw_path.split(b';', 1)
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_params, 496, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":503
 * 
 *     @property
 *     def username(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_username, 503, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":509
 * 
 *     @property
 *     def password(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_password, 509, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":514
 *         return self.userinfo.split(b':', 1)[1]
 * 
 *     def as_strings(self):             # <<<<<<<<<<<<<<
 *         if six.PY3:
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_args); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_as_strings, 514, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":521
 *         return self.__class__(*args)
 * 
 *     def _as_urlparse_result_tuple(self):             # <<<<<<<<<<<<<<
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:
 */
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_as_urlparse_result_tuple, 521, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":527
 *         return ret
 * 
 *     def as_urlparse_result(self):             # <<<<<<<<<<<<<<
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_as_urlparse_result, 527, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":530
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 *     def geturl(self):             # <<<<<<<<<<<<<<
 *         return urlparse.urlunparse(self._as_urlparse_result_tuple())
 * 
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_trevorj_vk_git_proxy__ex, __pyx_n_s_geturl, 530, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_17 = PyInt_FromLong(17); if (unlikely(!__pyx_int_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_18 = PyInt_FromLong(18); if (unlikely(!__pyx_int_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_19 = PyInt_FromLong(19); if (unlikely(!__pyx_int_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_21 = PyInt_FromLong(21); if (unlikely(!__pyx_int_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_22 = PyInt_FromLong(22); if (unlikely(!__pyx_int_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_23 = PyInt_FromLong(23); if (unlikely(!__pyx_int_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_24 = PyInt_FromLong(24); if (unlikely(!__pyx_int_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_25 = PyInt_FromLong(25); if (unlikely(!__pyx_int_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_26 = PyInt_FromLong(26); if (unlikely(!__pyx_int_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_27 = PyInt_FromLong(27); if (unlikely(!__pyx_int_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_28 = PyInt_FromLong(28); if (unlikely(!__pyx_int_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_29 = PyInt_FromLong(29); if (unlikely(!__pyx_int_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_31 = PyInt_FromLong(31); if (unlikely(!__pyx_int_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initparser(void); /*proto*/
PyMODINIT_FUNC initparser(void)
#else
PyMODINIT_FUNC PyInit_parser(void); /*proto*/
PyMODINIT_FUNC PyInit_parser(void)
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_parser(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("parser", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_parser) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "parser")) {
      if (unlikely(PyDict_SetItemString(modules, "parser", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6parser_http_errno) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_http_errno.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "http_errno", (PyObject *)&__pyx_type_6parser_http_errno) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_http_errno = &__pyx_type_6parser_http_errno;
  if (PyType_Ready(&__pyx_type_6parser_flags) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_flags.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "flags", (PyObject *)&__pyx_type_6parser_flags) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_flags = &__pyx_type_6parser_flags;
  if (PyType_Ready(&__pyx_type_6parser_http_method) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_http_method.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "http_method", (PyObject *)&__pyx_type_6parser_http_method) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_http_method = &__pyx_type_6parser_http_method;
  if (PyType_Ready(&__pyx_type_6parser_http_parser_url_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_http_parser_url_fields.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "http_parser_url_fields", (PyObject *)&__pyx_type_6parser_http_parser_url_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_http_parser_url_fields = &__pyx_type_6parser_http_parser_url_fields;
  if (PyType_Ready(&__pyx_type_6parser_http_parser_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_http_parser_type.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "http_parser_type", (PyObject *)&__pyx_type_6parser_http_parser_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_http_parser_type = &__pyx_type_6parser_http_parser_type;
  if (PyType_Ready(&__pyx_type_6parser__ParserData) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser__ParserData.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "_ParserData", (PyObject *)&__pyx_type_6parser__ParserData) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser__ParserData = &__pyx_type_6parser__ParserData;
  __pyx_vtabptr_6parser_Parser = &__pyx_vtable_6parser_Parser;
  __pyx_vtable_6parser_Parser._execute = (int (*)(struct __pyx_obj_6parser_Parser *, char *, size_t))__pyx_f_6parser_6Parser__execute;
  __pyx_vtable_6parser_Parser._raise_errno_if_needed = (int (*)(struct __pyx_obj_6parser_Parser *))__pyx_f_6parser_6Parser__raise_errno_if_needed;
  __pyx_vtable_6parser_Parser._assert_parser = (int (*)(struct __pyx_obj_6parser_Parser *))__pyx_f_6parser_6Parser__assert_parser;
  if (PyType_Ready(&__pyx_type_6parser_Parser) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_Parser.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6parser_Parser.tp_dict, __pyx_vtabptr_6parser_Parser) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Parser", (PyObject *)&__pyx_type_6parser_Parser) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_Parser = &__pyx_type_6parser_Parser;
  __pyx_vtabptr_6parser_HttpUrlParser = &__pyx_vtable_6parser_HttpUrlParser;
  __pyx_vtable_6parser_HttpUrlParser._parse = (PyObject *(*)(struct __pyx_obj_6parser_HttpUrlParser *, char *, size_t, PyBoolObject *))__pyx_f_6parser_13HttpUrlParser__parse;
  if (PyType_Ready(&__pyx_type_6parser_HttpUrlParser) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6parser_HttpUrlParser.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6parser_HttpUrlParser.tp_dict, __pyx_vtabptr_6parser_HttpUrlParser) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "HttpUrlParser", (PyObject *)&__pyx_type_6parser_HttpUrlParser) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6parser_HttpUrlParser = &__pyx_type_6parser_HttpUrlParser;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __Pyx_TraceCall("PyMODINIT_FUNC PyInit_parser(void)", __pyx_f[0], 1, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "parser.pyx":16
 * from cpython cimport bool, PyBytes_FromStringAndSize, PyBytes_FromString
 * cimport http_parser
 * import collections             # <<<<<<<<<<<<<<
 * import six
 * from http_parser cimport http_cb
 */
  __Pyx_TraceLine(16,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":17
 * cimport http_parser
 * import collections
 * import six             # <<<<<<<<<<<<<<
 * from http_parser cimport http_cb
 * from http_parser cimport http_data_cb
 */
  __Pyx_TraceLine(17,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_six, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_six, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":40
 *     char * _cast_const_away(char *)
 * 
 * def http_errno_description(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */
  __Pyx_TraceLine(40,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6parser_1http_errno_description, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_http_errno_description, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":47
 *     return py_result
 * 
 * def http_errno_name(int err ):             # <<<<<<<<<<<<<<
 *     assert err in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'arg err wrong type'
 * 
 */
  __Pyx_TraceLine(47,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6parser_3http_errno_name, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_http_errno_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":54
 *     return py_result
 * 
 * def http_method_str(int m ):             # <<<<<<<<<<<<<<
 *     assert m in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'arg m wrong type'
 * 
 */
  __Pyx_TraceLine(54,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6parser_5http_method_str, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_http_method_str, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":61
 *     return py_result
 * 
 * def http_parser_version():             # <<<<<<<<<<<<<<
 *     cdef unsigned long int _r = _http_parser_version_http_parser()
 *     py_result = <unsigned long int>_r
 */
  __Pyx_TraceLine(61,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6parser_7http_parser_version, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_http_parser_version, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":67
 * 
 * cdef class http_errno:
 *     HPE_OK = 0             # <<<<<<<<<<<<<<
 *     HPE_CB_message_begin = 1
 *     HPE_CB_url = 2
 */
  __Pyx_TraceLine(67,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_OK, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":68
 * cdef class http_errno:
 *     HPE_OK = 0
 *     HPE_CB_message_begin = 1             # <<<<<<<<<<<<<<
 *     HPE_CB_url = 2
 *     HPE_CB_header_field = 3
 */
  __Pyx_TraceLine(68,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_message_begin, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":69
 *     HPE_OK = 0
 *     HPE_CB_message_begin = 1
 *     HPE_CB_url = 2             # <<<<<<<<<<<<<<
 *     HPE_CB_header_field = 3
 *     HPE_CB_header_value = 4
 */
  __Pyx_TraceLine(69,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_url, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":70
 *     HPE_CB_message_begin = 1
 *     HPE_CB_url = 2
 *     HPE_CB_header_field = 3             # <<<<<<<<<<<<<<
 *     HPE_CB_header_value = 4
 *     HPE_CB_headers_complete = 5
 */
  __Pyx_TraceLine(70,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_header_field, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":71
 *     HPE_CB_url = 2
 *     HPE_CB_header_field = 3
 *     HPE_CB_header_value = 4             # <<<<<<<<<<<<<<
 *     HPE_CB_headers_complete = 5
 *     HPE_CB_body = 6
 */
  __Pyx_TraceLine(71,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_header_value, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":72
 *     HPE_CB_header_field = 3
 *     HPE_CB_header_value = 4
 *     HPE_CB_headers_complete = 5             # <<<<<<<<<<<<<<
 *     HPE_CB_body = 6
 *     HPE_CB_message_complete = 7
 */
  __Pyx_TraceLine(72,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_headers_complete, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":73
 *     HPE_CB_header_value = 4
 *     HPE_CB_headers_complete = 5
 *     HPE_CB_body = 6             # <<<<<<<<<<<<<<
 *     HPE_CB_message_complete = 7
 *     HPE_CB_status = 8
 */
  __Pyx_TraceLine(73,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_body, __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":74
 *     HPE_CB_headers_complete = 5
 *     HPE_CB_body = 6
 *     HPE_CB_message_complete = 7             # <<<<<<<<<<<<<<
 *     HPE_CB_status = 8
 *     HPE_CB_chunk_header = 9
 */
  __Pyx_TraceLine(74,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_message_complete, __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":75
 *     HPE_CB_body = 6
 *     HPE_CB_message_complete = 7
 *     HPE_CB_status = 8             # <<<<<<<<<<<<<<
 *     HPE_CB_chunk_header = 9
 *     HPE_CB_chunk_complete = 10
 */
  __Pyx_TraceLine(75,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_status, __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":76
 *     HPE_CB_message_complete = 7
 *     HPE_CB_status = 8
 *     HPE_CB_chunk_header = 9             # <<<<<<<<<<<<<<
 *     HPE_CB_chunk_complete = 10
 *     HPE_INVALID_EOF_STATE = 11
 */
  __Pyx_TraceLine(76,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_chunk_header, __pyx_int_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":77
 *     HPE_CB_status = 8
 *     HPE_CB_chunk_header = 9
 *     HPE_CB_chunk_complete = 10             # <<<<<<<<<<<<<<
 *     HPE_INVALID_EOF_STATE = 11
 *     HPE_HEADER_OVERFLOW = 12
 */
  __Pyx_TraceLine(77,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CB_chunk_complete, __pyx_int_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":78
 *     HPE_CB_chunk_header = 9
 *     HPE_CB_chunk_complete = 10
 *     HPE_INVALID_EOF_STATE = 11             # <<<<<<<<<<<<<<
 *     HPE_HEADER_OVERFLOW = 12
 *     HPE_CLOSED_CONNECTION = 13
 */
  __Pyx_TraceLine(78,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_EOF_STATE, __pyx_int_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":79
 *     HPE_CB_chunk_complete = 10
 *     HPE_INVALID_EOF_STATE = 11
 *     HPE_HEADER_OVERFLOW = 12             # <<<<<<<<<<<<<<
 *     HPE_CLOSED_CONNECTION = 13
 *     HPE_INVALID_VERSION = 14
 */
  __Pyx_TraceLine(79,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_HEADER_OVERFLOW, __pyx_int_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":80
 *     HPE_INVALID_EOF_STATE = 11
 *     HPE_HEADER_OVERFLOW = 12
 *     HPE_CLOSED_CONNECTION = 13             # <<<<<<<<<<<<<<
 *     HPE_INVALID_VERSION = 14
 *     HPE_INVALID_STATUS = 15
 */
  __Pyx_TraceLine(80,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_CLOSED_CONNECTION, __pyx_int_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":81
 *     HPE_HEADER_OVERFLOW = 12
 *     HPE_CLOSED_CONNECTION = 13
 *     HPE_INVALID_VERSION = 14             # <<<<<<<<<<<<<<
 *     HPE_INVALID_STATUS = 15
 *     HPE_INVALID_METHOD = 16
 */
  __Pyx_TraceLine(81,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_VERSION, __pyx_int_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":82
 *     HPE_CLOSED_CONNECTION = 13
 *     HPE_INVALID_VERSION = 14
 *     HPE_INVALID_STATUS = 15             # <<<<<<<<<<<<<<
 *     HPE_INVALID_METHOD = 16
 *     HPE_INVALID_URL = 17
 */
  __Pyx_TraceLine(82,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_STATUS, __pyx_int_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":83
 *     HPE_INVALID_VERSION = 14
 *     HPE_INVALID_STATUS = 15
 *     HPE_INVALID_METHOD = 16             # <<<<<<<<<<<<<<
 *     HPE_INVALID_URL = 17
 *     HPE_INVALID_HOST = 18
 */
  __Pyx_TraceLine(83,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_METHOD, __pyx_int_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":84
 *     HPE_INVALID_STATUS = 15
 *     HPE_INVALID_METHOD = 16
 *     HPE_INVALID_URL = 17             # <<<<<<<<<<<<<<
 *     HPE_INVALID_HOST = 18
 *     HPE_INVALID_PORT = 19
 */
  __Pyx_TraceLine(84,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_URL, __pyx_int_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":85
 *     HPE_INVALID_METHOD = 16
 *     HPE_INVALID_URL = 17
 *     HPE_INVALID_HOST = 18             # <<<<<<<<<<<<<<
 *     HPE_INVALID_PORT = 19
 *     HPE_INVALID_PATH = 20
 */
  __Pyx_TraceLine(85,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_HOST, __pyx_int_18) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":86
 *     HPE_INVALID_URL = 17
 *     HPE_INVALID_HOST = 18
 *     HPE_INVALID_PORT = 19             # <<<<<<<<<<<<<<
 *     HPE_INVALID_PATH = 20
 *     HPE_INVALID_QUERY_STRING = 21
 */
  __Pyx_TraceLine(86,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_PORT, __pyx_int_19) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":87
 *     HPE_INVALID_HOST = 18
 *     HPE_INVALID_PORT = 19
 *     HPE_INVALID_PATH = 20             # <<<<<<<<<<<<<<
 *     HPE_INVALID_QUERY_STRING = 21
 *     HPE_INVALID_FRAGMENT = 22
 */
  __Pyx_TraceLine(87,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_PATH, __pyx_int_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":88
 *     HPE_INVALID_PORT = 19
 *     HPE_INVALID_PATH = 20
 *     HPE_INVALID_QUERY_STRING = 21             # <<<<<<<<<<<<<<
 *     HPE_INVALID_FRAGMENT = 22
 *     HPE_LF_EXPECTED = 23
 */
  __Pyx_TraceLine(88,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_QUERY_STRING, __pyx_int_21) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":89
 *     HPE_INVALID_PATH = 20
 *     HPE_INVALID_QUERY_STRING = 21
 *     HPE_INVALID_FRAGMENT = 22             # <<<<<<<<<<<<<<
 *     HPE_LF_EXPECTED = 23
 *     HPE_INVALID_HEADER_TOKEN = 24
 */
  __Pyx_TraceLine(89,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_FRAGMENT, __pyx_int_22) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":90
 *     HPE_INVALID_QUERY_STRING = 21
 *     HPE_INVALID_FRAGMENT = 22
 *     HPE_LF_EXPECTED = 23             # <<<<<<<<<<<<<<
 *     HPE_INVALID_HEADER_TOKEN = 24
 *     HPE_INVALID_CONTENT_LENGTH = 25
 */
  __Pyx_TraceLine(90,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_LF_EXPECTED, __pyx_int_23) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":91
 *     HPE_INVALID_FRAGMENT = 22
 *     HPE_LF_EXPECTED = 23
 *     HPE_INVALID_HEADER_TOKEN = 24             # <<<<<<<<<<<<<<
 *     HPE_INVALID_CONTENT_LENGTH = 25
 *     HPE_INVALID_CHUNK_SIZE = 26
 */
  __Pyx_TraceLine(91,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_HEADER_TOKEN, __pyx_int_24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":92
 *     HPE_LF_EXPECTED = 23
 *     HPE_INVALID_HEADER_TOKEN = 24
 *     HPE_INVALID_CONTENT_LENGTH = 25             # <<<<<<<<<<<<<<
 *     HPE_INVALID_CHUNK_SIZE = 26
 *     HPE_INVALID_CONSTANT = 27
 */
  __Pyx_TraceLine(92,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_CONTENT_LENGTH, __pyx_int_25) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":93
 *     HPE_INVALID_HEADER_TOKEN = 24
 *     HPE_INVALID_CONTENT_LENGTH = 25
 *     HPE_INVALID_CHUNK_SIZE = 26             # <<<<<<<<<<<<<<
 *     HPE_INVALID_CONSTANT = 27
 *     HPE_INVALID_INTERNAL_STATE = 28
 */
  __Pyx_TraceLine(93,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_CHUNK_SIZE, __pyx_int_26) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":94
 *     HPE_INVALID_CONTENT_LENGTH = 25
 *     HPE_INVALID_CHUNK_SIZE = 26
 *     HPE_INVALID_CONSTANT = 27             # <<<<<<<<<<<<<<
 *     HPE_INVALID_INTERNAL_STATE = 28
 *     HPE_STRICT = 29
 */
  __Pyx_TraceLine(94,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_CONSTANT, __pyx_int_27) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":95
 *     HPE_INVALID_CHUNK_SIZE = 26
 *     HPE_INVALID_CONSTANT = 27
 *     HPE_INVALID_INTERNAL_STATE = 28             # <<<<<<<<<<<<<<
 *     HPE_STRICT = 29
 *     HPE_PAUSED = 30
 */
  __Pyx_TraceLine(95,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_INVALID_INTERNAL_STATE, __pyx_int_28) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":96
 *     HPE_INVALID_CONSTANT = 27
 *     HPE_INVALID_INTERNAL_STATE = 28
 *     HPE_STRICT = 29             # <<<<<<<<<<<<<<
 *     HPE_PAUSED = 30
 *     HPE_UNKNOWN = 31
 */
  __Pyx_TraceLine(96,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_STRICT, __pyx_int_29) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":97
 *     HPE_INVALID_INTERNAL_STATE = 28
 *     HPE_STRICT = 29
 *     HPE_PAUSED = 30             # <<<<<<<<<<<<<<
 *     HPE_UNKNOWN = 31
 * 
 */
  __Pyx_TraceLine(97,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_PAUSED, __pyx_int_30) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":98
 *     HPE_STRICT = 29
 *     HPE_PAUSED = 30
 *     HPE_UNKNOWN = 31             # <<<<<<<<<<<<<<
 * 
 * cdef class flags:
 */
  __Pyx_TraceLine(98,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_errno->tp_dict, __pyx_n_s_HPE_UNKNOWN, __pyx_int_31) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_errno);

  /* "parser.pyx":101
 * 
 * cdef class flags:
 *     F_CHUNKED = 1             # <<<<<<<<<<<<<<
 *     F_CONNECTION_KEEP_ALIVE = 2
 *     F_CONNECTION_CLOSE = 4
 */
  __Pyx_TraceLine(101,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_CHUNKED, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":102
 * cdef class flags:
 *     F_CHUNKED = 1
 *     F_CONNECTION_KEEP_ALIVE = 2             # <<<<<<<<<<<<<<
 *     F_CONNECTION_CLOSE = 4
 *     F_CONNECTION_UPGRADE = 8
 */
  __Pyx_TraceLine(102,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_CONNECTION_KEEP_ALIVE, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":103
 *     F_CHUNKED = 1
 *     F_CONNECTION_KEEP_ALIVE = 2
 *     F_CONNECTION_CLOSE = 4             # <<<<<<<<<<<<<<
 *     F_CONNECTION_UPGRADE = 8
 *     F_TRAILING = 16
 */
  __Pyx_TraceLine(103,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_CONNECTION_CLOSE, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":104
 *     F_CONNECTION_KEEP_ALIVE = 2
 *     F_CONNECTION_CLOSE = 4
 *     F_CONNECTION_UPGRADE = 8             # <<<<<<<<<<<<<<
 *     F_TRAILING = 16
 *     F_UPGRADE = 32
 */
  __Pyx_TraceLine(104,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_CONNECTION_UPGRADE, __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":105
 *     F_CONNECTION_CLOSE = 4
 *     F_CONNECTION_UPGRADE = 8
 *     F_TRAILING = 16             # <<<<<<<<<<<<<<
 *     F_UPGRADE = 32
 *     F_SKIPBODY = 64
 */
  __Pyx_TraceLine(105,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_TRAILING, __pyx_int_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":106
 *     F_CONNECTION_UPGRADE = 8
 *     F_TRAILING = 16
 *     F_UPGRADE = 32             # <<<<<<<<<<<<<<
 *     F_SKIPBODY = 64
 * 
 */
  __Pyx_TraceLine(106,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_UPGRADE, __pyx_int_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":107
 *     F_TRAILING = 16
 *     F_UPGRADE = 32
 *     F_SKIPBODY = 64             # <<<<<<<<<<<<<<
 * 
 * cdef class http_method:
 */
  __Pyx_TraceLine(107,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_flags->tp_dict, __pyx_n_s_F_SKIPBODY, __pyx_int_64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_flags);

  /* "parser.pyx":110
 * 
 * cdef class http_method:
 *     HTTP_DELETE = 0             # <<<<<<<<<<<<<<
 *     HTTP_GET = 1
 *     HTTP_HEAD = 2
 */
  __Pyx_TraceLine(110,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_DELETE, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":111
 * cdef class http_method:
 *     HTTP_DELETE = 0
 *     HTTP_GET = 1             # <<<<<<<<<<<<<<
 *     HTTP_HEAD = 2
 *     HTTP_POST = 3
 */
  __Pyx_TraceLine(111,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_GET, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":112
 *     HTTP_DELETE = 0
 *     HTTP_GET = 1
 *     HTTP_HEAD = 2             # <<<<<<<<<<<<<<
 *     HTTP_POST = 3
 *     HTTP_PUT = 4
 */
  __Pyx_TraceLine(112,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_HEAD, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":113
 *     HTTP_GET = 1
 *     HTTP_HEAD = 2
 *     HTTP_POST = 3             # <<<<<<<<<<<<<<
 *     HTTP_PUT = 4
 *     HTTP_CONNECT = 5
 */
  __Pyx_TraceLine(113,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_POST, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":114
 *     HTTP_HEAD = 2
 *     HTTP_POST = 3
 *     HTTP_PUT = 4             # <<<<<<<<<<<<<<
 *     HTTP_CONNECT = 5
 *     HTTP_OPTIONS = 6
 */
  __Pyx_TraceLine(114,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_PUT, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":115
 *     HTTP_POST = 3
 *     HTTP_PUT = 4
 *     HTTP_CONNECT = 5             # <<<<<<<<<<<<<<
 *     HTTP_OPTIONS = 6
 *     HTTP_TRACE = 7
 */
  __Pyx_TraceLine(115,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_CONNECT, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":116
 *     HTTP_PUT = 4
 *     HTTP_CONNECT = 5
 *     HTTP_OPTIONS = 6             # <<<<<<<<<<<<<<
 *     HTTP_TRACE = 7
 *     HTTP_COPY = 8
 */
  __Pyx_TraceLine(116,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_OPTIONS, __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":117
 *     HTTP_CONNECT = 5
 *     HTTP_OPTIONS = 6
 *     HTTP_TRACE = 7             # <<<<<<<<<<<<<<
 *     HTTP_COPY = 8
 *     HTTP_LOCK = 9
 */
  __Pyx_TraceLine(117,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_TRACE, __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":118
 *     HTTP_OPTIONS = 6
 *     HTTP_TRACE = 7
 *     HTTP_COPY = 8             # <<<<<<<<<<<<<<
 *     HTTP_LOCK = 9
 *     HTTP_MKCOL = 10
 */
  __Pyx_TraceLine(118,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_COPY, __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":119
 *     HTTP_TRACE = 7
 *     HTTP_COPY = 8
 *     HTTP_LOCK = 9             # <<<<<<<<<<<<<<
 *     HTTP_MKCOL = 10
 *     HTTP_MOVE = 11
 */
  __Pyx_TraceLine(119,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_LOCK, __pyx_int_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":120
 *     HTTP_COPY = 8
 *     HTTP_LOCK = 9
 *     HTTP_MKCOL = 10             # <<<<<<<<<<<<<<
 *     HTTP_MOVE = 11
 *     HTTP_PROPFIND = 12
 */
  __Pyx_TraceLine(120,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_MKCOL, __pyx_int_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":121
 *     HTTP_LOCK = 9
 *     HTTP_MKCOL = 10
 *     HTTP_MOVE = 11             # <<<<<<<<<<<<<<
 *     HTTP_PROPFIND = 12
 *     HTTP_PROPPATCH = 13
 */
  __Pyx_TraceLine(121,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_MOVE, __pyx_int_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":122
 *     HTTP_MKCOL = 10
 *     HTTP_MOVE = 11
 *     HTTP_PROPFIND = 12             # <<<<<<<<<<<<<<
 *     HTTP_PROPPATCH = 13
 *     HTTP_SEARCH = 14
 */
  __Pyx_TraceLine(122,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_PROPFIND, __pyx_int_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":123
 *     HTTP_MOVE = 11
 *     HTTP_PROPFIND = 12
 *     HTTP_PROPPATCH = 13             # <<<<<<<<<<<<<<
 *     HTTP_SEARCH = 14
 *     HTTP_UNLOCK = 15
 */
  __Pyx_TraceLine(123,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_PROPPATCH, __pyx_int_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":124
 *     HTTP_PROPFIND = 12
 *     HTTP_PROPPATCH = 13
 *     HTTP_SEARCH = 14             # <<<<<<<<<<<<<<
 *     HTTP_UNLOCK = 15
 *     HTTP_BIND = 16
 */
  __Pyx_TraceLine(124,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_SEARCH, __pyx_int_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":125
 *     HTTP_PROPPATCH = 13
 *     HTTP_SEARCH = 14
 *     HTTP_UNLOCK = 15             # <<<<<<<<<<<<<<
 *     HTTP_BIND = 16
 *     HTTP_REBIND = 17
 */
  __Pyx_TraceLine(125,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_UNLOCK, __pyx_int_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":126
 *     HTTP_SEARCH = 14
 *     HTTP_UNLOCK = 15
 *     HTTP_BIND = 16             # <<<<<<<<<<<<<<
 *     HTTP_REBIND = 17
 *     HTTP_UNBIND = 18
 */
  __Pyx_TraceLine(126,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_BIND, __pyx_int_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":127
 *     HTTP_UNLOCK = 15
 *     HTTP_BIND = 16
 *     HTTP_REBIND = 17             # <<<<<<<<<<<<<<
 *     HTTP_UNBIND = 18
 *     HTTP_ACL = 19
 */
  __Pyx_TraceLine(127,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_REBIND, __pyx_int_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":128
 *     HTTP_BIND = 16
 *     HTTP_REBIND = 17
 *     HTTP_UNBIND = 18             # <<<<<<<<<<<<<<
 *     HTTP_ACL = 19
 *     HTTP_REPORT = 20
 */
  __Pyx_TraceLine(128,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_UNBIND, __pyx_int_18) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":129
 *     HTTP_REBIND = 17
 *     HTTP_UNBIND = 18
 *     HTTP_ACL = 19             # <<<<<<<<<<<<<<
 *     HTTP_REPORT = 20
 *     HTTP_MKACTIVITY = 21
 */
  __Pyx_TraceLine(129,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_ACL, __pyx_int_19) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":130
 *     HTTP_UNBIND = 18
 *     HTTP_ACL = 19
 *     HTTP_REPORT = 20             # <<<<<<<<<<<<<<
 *     HTTP_MKACTIVITY = 21
 *     HTTP_CHECKOUT = 22
 */
  __Pyx_TraceLine(130,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_REPORT, __pyx_int_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":131
 *     HTTP_ACL = 19
 *     HTTP_REPORT = 20
 *     HTTP_MKACTIVITY = 21             # <<<<<<<<<<<<<<
 *     HTTP_CHECKOUT = 22
 *     HTTP_MERGE = 23
 */
  __Pyx_TraceLine(131,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_MKACTIVITY, __pyx_int_21) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":132
 *     HTTP_REPORT = 20
 *     HTTP_MKACTIVITY = 21
 *     HTTP_CHECKOUT = 22             # <<<<<<<<<<<<<<
 *     HTTP_MERGE = 23
 *     HTTP_MSEARCH = 24
 */
  __Pyx_TraceLine(132,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_CHECKOUT, __pyx_int_22) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":133
 *     HTTP_MKACTIVITY = 21
 *     HTTP_CHECKOUT = 22
 *     HTTP_MERGE = 23             # <<<<<<<<<<<<<<
 *     HTTP_MSEARCH = 24
 *     HTTP_NOTIFY = 25
 */
  __Pyx_TraceLine(133,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_MERGE, __pyx_int_23) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":134
 *     HTTP_CHECKOUT = 22
 *     HTTP_MERGE = 23
 *     HTTP_MSEARCH = 24             # <<<<<<<<<<<<<<
 *     HTTP_NOTIFY = 25
 *     HTTP_SUBSCRIBE = 26
 */
  __Pyx_TraceLine(134,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_MSEARCH, __pyx_int_24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":135
 *     HTTP_MERGE = 23
 *     HTTP_MSEARCH = 24
 *     HTTP_NOTIFY = 25             # <<<<<<<<<<<<<<
 *     HTTP_SUBSCRIBE = 26
 *     HTTP_UNSUBSCRIBE = 27
 */
  __Pyx_TraceLine(135,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_NOTIFY, __pyx_int_25) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":136
 *     HTTP_MSEARCH = 24
 *     HTTP_NOTIFY = 25
 *     HTTP_SUBSCRIBE = 26             # <<<<<<<<<<<<<<
 *     HTTP_UNSUBSCRIBE = 27
 *     HTTP_PATCH = 28
 */
  __Pyx_TraceLine(136,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_SUBSCRIBE, __pyx_int_26) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":137
 *     HTTP_NOTIFY = 25
 *     HTTP_SUBSCRIBE = 26
 *     HTTP_UNSUBSCRIBE = 27             # <<<<<<<<<<<<<<
 *     HTTP_PATCH = 28
 *     HTTP_PURGE = 29
 */
  __Pyx_TraceLine(137,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_UNSUBSCRIBE, __pyx_int_27) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":138
 *     HTTP_SUBSCRIBE = 26
 *     HTTP_UNSUBSCRIBE = 27
 *     HTTP_PATCH = 28             # <<<<<<<<<<<<<<
 *     HTTP_PURGE = 29
 *     HTTP_MKCALENDAR = 30
 */
  __Pyx_TraceLine(138,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_PATCH, __pyx_int_28) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":139
 *     HTTP_UNSUBSCRIBE = 27
 *     HTTP_PATCH = 28
 *     HTTP_PURGE = 29             # <<<<<<<<<<<<<<
 *     HTTP_MKCALENDAR = 30
 *     HTTP_LINK = 31
 */
  __Pyx_TraceLine(139,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_PURGE, __pyx_int_29) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":140
 *     HTTP_PATCH = 28
 *     HTTP_PURGE = 29
 *     HTTP_MKCALENDAR = 30             # <<<<<<<<<<<<<<
 *     HTTP_LINK = 31
 *     HTTP_UNLINK = 32
 */
  __Pyx_TraceLine(140,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_MKCALENDAR, __pyx_int_30) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":141
 *     HTTP_PURGE = 29
 *     HTTP_MKCALENDAR = 30
 *     HTTP_LINK = 31             # <<<<<<<<<<<<<<
 *     HTTP_UNLINK = 32
 * 
 */
  __Pyx_TraceLine(141,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_LINK, __pyx_int_31) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":142
 *     HTTP_MKCALENDAR = 30
 *     HTTP_LINK = 31
 *     HTTP_UNLINK = 32             # <<<<<<<<<<<<<<
 * 
 * cdef class http_parser_url_fields:
 */
  __Pyx_TraceLine(142,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_method->tp_dict, __pyx_n_s_HTTP_UNLINK, __pyx_int_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_method);

  /* "parser.pyx":145
 * 
 * cdef class http_parser_url_fields:
 *     UF_SCHEMA = 0             # <<<<<<<<<<<<<<
 *     UF_HOST = 1
 *     UF_PORT = 2
 */
  __Pyx_TraceLine(145,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_SCHEMA, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":146
 * cdef class http_parser_url_fields:
 *     UF_SCHEMA = 0
 *     UF_HOST = 1             # <<<<<<<<<<<<<<
 *     UF_PORT = 2
 *     UF_PATH = 3
 */
  __Pyx_TraceLine(146,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_HOST, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":147
 *     UF_SCHEMA = 0
 *     UF_HOST = 1
 *     UF_PORT = 2             # <<<<<<<<<<<<<<
 *     UF_PATH = 3
 *     UF_QUERY = 4
 */
  __Pyx_TraceLine(147,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_PORT, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":148
 *     UF_HOST = 1
 *     UF_PORT = 2
 *     UF_PATH = 3             # <<<<<<<<<<<<<<
 *     UF_QUERY = 4
 *     UF_FRAGMENT = 5
 */
  __Pyx_TraceLine(148,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_PATH, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":149
 *     UF_PORT = 2
 *     UF_PATH = 3
 *     UF_QUERY = 4             # <<<<<<<<<<<<<<
 *     UF_FRAGMENT = 5
 *     UF_USERINFO = 6
 */
  __Pyx_TraceLine(149,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_QUERY, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":150
 *     UF_PATH = 3
 *     UF_QUERY = 4
 *     UF_FRAGMENT = 5             # <<<<<<<<<<<<<<
 *     UF_USERINFO = 6
 *     UF_MAX = 7
 */
  __Pyx_TraceLine(150,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_FRAGMENT, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":151
 *     UF_QUERY = 4
 *     UF_FRAGMENT = 5
 *     UF_USERINFO = 6             # <<<<<<<<<<<<<<
 *     UF_MAX = 7
 * 
 */
  __Pyx_TraceLine(151,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_USERINFO, __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":152
 *     UF_FRAGMENT = 5
 *     UF_USERINFO = 6
 *     UF_MAX = 7             # <<<<<<<<<<<<<<
 * 
 * cdef class http_parser_type:
 */
  __Pyx_TraceLine(152,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_url_fields->tp_dict, __pyx_n_s_UF_MAX, __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_url_fields);

  /* "parser.pyx":155
 * 
 * cdef class http_parser_type:
 *     HTTP_REQUEST = 0             # <<<<<<<<<<<<<<
 *     HTTP_RESPONSE = 1
 *     HTTP_BOTH = 2
 */
  __Pyx_TraceLine(155,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_type->tp_dict, __pyx_n_s_HTTP_REQUEST, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_type);

  /* "parser.pyx":156
 * cdef class http_parser_type:
 *     HTTP_REQUEST = 0
 *     HTTP_RESPONSE = 1             # <<<<<<<<<<<<<<
 *     HTTP_BOTH = 2
 * try:
 */
  __Pyx_TraceLine(156,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_type->tp_dict, __pyx_n_s_HTTP_RESPONSE, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_type);

  /* "parser.pyx":157
 *     HTTP_REQUEST = 0
 *     HTTP_RESPONSE = 1
 *     HTTP_BOTH = 2             # <<<<<<<<<<<<<<
 * try:
 *     import urllib.parse as urlparse
 */
  __Pyx_TraceLine(157,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_http_parser_type->tp_dict, __pyx_n_s_HTTP_BOTH, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_6parser_http_parser_type);

  /* "parser.pyx":158
 *     HTTP_RESPONSE = 1
 *     HTTP_BOTH = 2
 * try:             # <<<<<<<<<<<<<<
 *     import urllib.parse as urlparse
 * except ImportError:
 */
  __Pyx_TraceLine(158,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L2_error;})
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "parser.pyx":159
 *     HTTP_BOTH = 2
 * try:
 *     import urllib.parse as urlparse             # <<<<<<<<<<<<<<
 * except ImportError:
 *     import urlparse
 */
      __Pyx_TraceLine(159,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L2_error;})
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s__47);
      __Pyx_GIVEREF(__pyx_n_s__47);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__47);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_urllib_parse, __pyx_t_1, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_urlparse, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "parser.pyx":158
 *     HTTP_RESPONSE = 1
 *     HTTP_BOTH = 2
 * try:             # <<<<<<<<<<<<<<
 *     import urllib.parse as urlparse
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "parser.pyx":160
 * try:
 *     import urllib.parse as urlparse
 * except ImportError:             # <<<<<<<<<<<<<<
 *     import urlparse
 * 
 */
    __Pyx_TraceLine(160,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;})
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);

      /* "parser.pyx":161
 *     import urllib.parse as urlparse
 * except ImportError:
 *     import urlparse             # <<<<<<<<<<<<<<
 * 
 * def to_bytes(data):
 */
      __Pyx_TraceLine(161,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;})
      __pyx_t_8 = __Pyx_Import(__pyx_n_s_urlparse, 0, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_urlparse, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "parser.pyx":158
 *     HTTP_RESPONSE = 1
 *     HTTP_BOTH = 2
 * try:             # <<<<<<<<<<<<<<
 *     import urllib.parse as urlparse
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L9_try_end:;
  }

  /* "parser.pyx":163
 *     import urlparse
 * 
 * def to_bytes(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         pass
 */
  __Pyx_TraceLine(163,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_6parser_9to_bytes, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_bytes, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":247
 * 
 * 
 * class ParserDelegate(object):             # <<<<<<<<<<<<<<
 *     def on_message_begin(self):
 *         pass
 */
  __Pyx_TraceLine(247,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_builtin_object);
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_7, __pyx_n_s_ParserDelegate, __pyx_n_s_ParserDelegate, (PyObject *) NULL, __pyx_n_s_parser, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "parser.pyx":248
 * 
 * class ParserDelegate(object):
 *     def on_message_begin(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(248,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_1on_message_begin, 0, __pyx_n_s_ParserDelegate_on_message_begin, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_message_begin, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":251
 *         pass
 * 
 *     def on_req_method(self, method):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(251,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_3on_req_method, 0, __pyx_n_s_ParserDelegate_on_req_method, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_req_method, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":254
 *         pass
 * 
 *     def on_req_url(self, url):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(254,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_5on_req_url, 0, __pyx_n_s_ParserDelegate_on_req_url, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_req_url, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":257
 *         pass
 * 
 *     def on_resp_status(self, code, desc):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(257,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_7on_resp_status, 0, __pyx_n_s_ParserDelegate_on_resp_status, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_resp_status, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":260
 *         pass
 * 
 *     def on_header_field(self, field):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(260,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_9on_header_field, 0, __pyx_n_s_ParserDelegate_on_header_field, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_header_field, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":263
 *         pass
 * 
 *     def on_header_value(self, value):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(263,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_11on_header_value, 0, __pyx_n_s_ParserDelegate_on_header_value, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_header_value, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":266
 *         pass
 * 
 *     def on_http_version(self, major, minor):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(266,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_13on_http_version, 0, __pyx_n_s_ParserDelegate_on_http_version, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_http_version, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":269
 *         pass
 * 
 *     def on_headers_complete(self, keep_alive):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(269,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_15on_headers_complete, 0, __pyx_n_s_ParserDelegate_on_headers_comple, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_headers_complete, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":272
 *         pass
 * 
 *     def on_body(self, data, length, is_chunked):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(272,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_17on_body, 0, __pyx_n_s_ParserDelegate_on_body, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_body, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":275
 *         pass
 * 
 *     def on_message_complete(self, is_chunked, keep_alive):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(275,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_19on_message_complete, 0, __pyx_n_s_ParserDelegate_on_message_comple, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_message_complete, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":278
 *         pass
 * 
 *     def on_chunk_header(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(278,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_21on_chunk_header, 0, __pyx_n_s_ParserDelegate_on_chunk_header, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_chunk_header, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":281
 *         pass
 * 
 *     def on_chunk_complete(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(281,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_23on_chunk_complete, 0, __pyx_n_s_ParserDelegate_on_chunk_complete, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_chunk_complete, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":284
 *         pass
 * 
 *     def on_upgrade(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_TraceLine(284,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_14ParserDelegate_25on_upgrade, 0, __pyx_n_s_ParserDelegate_on_upgrade, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_on_upgrade, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "parser.pyx":247
 * 
 * 
 * class ParserDelegate(object):             # <<<<<<<<<<<<<<
 *     def on_message_begin(self):
 *         pass
 */
  __Pyx_TraceLine(247,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_ParserDelegate, __pyx_t_7, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParserDelegate, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":303
 * 
 *     @property
 *     def _flags_bits(self):             # <<<<<<<<<<<<<<
 *         return self.parent._flags_bits
 * 
 */
  __Pyx_TraceLine(303,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":302
 *         return self.parent.body_is_final()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def _flags_bits(self):
 *         return self.parent._flags_bits
 */
  __Pyx_TraceLine(302,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_flags_bits, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":307
 * 
 *     @property
 *     def has_chunked_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 */
  __Pyx_TraceLine(307,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_chunked_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":306
 *         return self.parent._flags_bits
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_chunked_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 */
  __Pyx_TraceLine(306,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_chunked_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":311
 * 
 *     @property
 *     def has_connection_keep_alive_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 */
  __Pyx_TraceLine(311,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_connection_keep_alive_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":310
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_connection_keep_alive_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 */
  __Pyx_TraceLine(310,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_connection_keep_alive_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":315
 * 
 *     @property
 *     def has_connection_close_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 */
  __Pyx_TraceLine(315,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_connection_close_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":314
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_connection_close_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 */
  __Pyx_TraceLine(314,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_connection_close_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":319
 * 
 *     @property
 *     def has_connection_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 */
  __Pyx_TraceLine(319,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_connection_upgrade_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":318
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_connection_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 */
  __Pyx_TraceLine(318,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_connection_upgrade_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":323
 * 
 *     @property
 *     def has_trailing_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 */
  __Pyx_TraceLine(323,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_trailing_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":322
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_trailing_flag(self):
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 */
  __Pyx_TraceLine(322,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_trailing_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":327
 * 
 *     @property
 *     def has_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 */
  __Pyx_TraceLine(327,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_upgrade_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":326
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 */
  __Pyx_TraceLine(326,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_upgrade_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":331
 * 
 *     @property
 *     def has_skipbody_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 * 
 */
  __Pyx_TraceLine(331,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser__ParserData, __pyx_n_s_has_skipbody_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":330
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_skipbody_flag(self):
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 */
  __Pyx_TraceLine(330,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser__ParserData->tp_dict, __pyx_n_s_has_skipbody_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser__ParserData);

  /* "parser.pyx":426
 * 
 *     @property
 *     def _flags_bits(self):             # <<<<<<<<<<<<<<
 *         self._assert_parser()
 *         return self._parser.flags
 */
  __Pyx_TraceLine(426,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_flags_bits); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":425
 *         return bool(http_parser.http_should_keep_alive(self._parser))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def _flags_bits(self):
 *         self._assert_parser()
 */
  __Pyx_TraceLine(425,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_flags_bits, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":431
 * 
 *     @property
 *     def has_chunked_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 */
  __Pyx_TraceLine(431,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_chunked_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":430
 *         return self._parser.flags
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_chunked_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 */
  __Pyx_TraceLine(430,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_chunked_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":435
 * 
 *     @property
 *     def has_connection_keep_alive_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 */
  __Pyx_TraceLine(435,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_connection_keep_alive_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":434
 *         return bool(self._flags_bits & http_parser.F_CHUNKED)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_connection_keep_alive_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 */
  __Pyx_TraceLine(434,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_connection_keep_alive_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":439
 * 
 *     @property
 *     def has_connection_close_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 */
  __Pyx_TraceLine(439,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_connection_close_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":438
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_KEEP_ALIVE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_connection_close_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 */
  __Pyx_TraceLine(438,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_connection_close_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":443
 * 
 *     @property
 *     def has_connection_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 */
  __Pyx_TraceLine(443,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_connection_upgrade_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":442
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_CLOSE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_connection_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 */
  __Pyx_TraceLine(442,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_connection_upgrade_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":447
 * 
 *     @property
 *     def has_trailing_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 */
  __Pyx_TraceLine(447,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_trailing_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":446
 *         return bool(self._flags_bits & http_parser.F_CONNECTION_UPGRADE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_trailing_flag(self):
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 */
  __Pyx_TraceLine(446,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_trailing_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":451
 * 
 *     @property
 *     def has_upgrade_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 */
  __Pyx_TraceLine(451,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_upgrade_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":450
 *         return bool(self._flags_bits & http_parser.F_TRAILING)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_upgrade_flag(self):
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 */
  __Pyx_TraceLine(450,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_upgrade_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":455
 * 
 *     @property
 *     def has_skipbody_flag(self):             # <<<<<<<<<<<<<<
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 * 
 */
  __Pyx_TraceLine(455,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6parser_Parser, __pyx_n_s_has_skipbody_flag); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "parser.pyx":454
 *         return bool(self._flags_bits & http_parser.F_UPGRADE)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def has_skipbody_flag(self):
 *         return bool(self._flags_bits & http_parser.F_SKIPBODY)
 */
  __Pyx_TraceLine(454,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6parser_Parser->tp_dict, __pyx_n_s_has_skipbody_flag, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6parser_Parser);

  /* "parser.pyx":459
 * 
 * 
 * def BothParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_BOTH, parser_delegate)
 * 
 */
  __Pyx_TraceLine(459,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_6parser_11BothParser, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BothParser, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":463
 * 
 * 
 * def RequestParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_REQUEST, parser_delegate)
 * 
 */
  __Pyx_TraceLine(463,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_6parser_13RequestParser, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RequestParser, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":467
 * 
 * 
 * def ResponseParser(parser_delegate):             # <<<<<<<<<<<<<<
 *     return Parser(http_parser.HTTP_RESPONSE, parser_delegate)
 * 
 */
  __Pyx_TraceLine(467,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_6parser_15ResponseParser, NULL, __pyx_n_s_parser); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ResponseParser, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "parser.pyx":471
 * 
 * 
 * class ParseResult(collections.namedtuple('ParseResult',             # <<<<<<<<<<<<<<
 *                                          ['scheme', 'hostname', 'port', 'raw_path', 'query', 'fragment', 'userinfo'])):
 *     __slots__ = ()
 */
  __Pyx_TraceLine(471,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_collections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":472
 * 
 * class ParseResult(collections.namedtuple('ParseResult',
 *                                          ['scheme', 'hostname', 'port', 'raw_path', 'query', 'fragment', 'userinfo'])):             # <<<<<<<<<<<<<<
 *     __slots__ = ()
 * 
 */
  __Pyx_TraceLine(472,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyList_New(7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_scheme);
  __Pyx_GIVEREF(__pyx_n_u_scheme);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_scheme);
  __Pyx_INCREF(__pyx_n_u_hostname);
  __Pyx_GIVEREF(__pyx_n_u_hostname);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_hostname);
  __Pyx_INCREF(__pyx_n_u_port);
  __Pyx_GIVEREF(__pyx_n_u_port);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_port);
  __Pyx_INCREF(__pyx_n_u_raw_path);
  __Pyx_GIVEREF(__pyx_n_u_raw_path);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_u_raw_path);
  __Pyx_INCREF(__pyx_n_u_query);
  __Pyx_GIVEREF(__pyx_n_u_query);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_u_query);
  __Pyx_INCREF(__pyx_n_u_fragment);
  __Pyx_GIVEREF(__pyx_n_u_fragment);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_u_fragment);
  __Pyx_INCREF(__pyx_n_u_userinfo);
  __Pyx_GIVEREF(__pyx_n_u_userinfo);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_u_userinfo);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_8) {
    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
  }
  __Pyx_INCREF(__pyx_n_u_ParseResult);
  __Pyx_GIVEREF(__pyx_n_u_ParseResult);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_n_u_ParseResult);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "parser.pyx":471
 * 
 * 
 * class ParseResult(collections.namedtuple('ParseResult',             # <<<<<<<<<<<<<<
 *                                          ['scheme', 'hostname', 'port', 'raw_path', 'query', 'fragment', 'userinfo'])):
 *     __slots__ = ()
 */
  __Pyx_TraceLine(471,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_5, __pyx_n_s_ParseResult, __pyx_n_s_ParseResult, (PyObject *) NULL, __pyx_n_s_parser, (PyObject *) NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);

  /* "parser.pyx":473
 * class ParseResult(collections.namedtuple('ParseResult',
 *                                          ['scheme', 'hostname', 'port', 'raw_path', 'query', 'fragment', 'userinfo'])):
 *     __slots__ = ()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(473,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_slots, __pyx_empty_tuple) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "parser.pyx":476
 * 
 *     @property
 *     def netloc(self):             # <<<<<<<<<<<<<<
 *         ret = []
 *         if self.userinfo:
 */
  __Pyx_TraceLine(476,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_1netloc, 0, __pyx_n_s_ParseResult_netloc, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "parser.pyx":475
 *     __slots__ = ()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def netloc(self):
 *         ret = []
 */
  __Pyx_TraceLine(475,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_netloc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":492
 * 
 *     @property
 *     def path(self):             # <<<<<<<<<<<<<<
 *         return self.raw_path.split(b';', 1)[0]
 * 
 */
  __Pyx_TraceLine(492,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_3path, 0, __pyx_n_s_ParseResult_path, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "parser.pyx":491
 *         return b''.join(ret)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def path(self):
 *         return self.raw_path.split(b';', 1)[0]
 */
  __Pyx_TraceLine(491,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_path, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":496
 * 
 *     @property
 *     def params(self):             # <<<<<<<<<<<<<<
 *         if b';' in self.raw_path:
 *             return self.raw_path.split(b';', 1)
 */
  __Pyx_TraceLine(496,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_5params, 0, __pyx_n_s_ParseResult_params, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "parser.pyx":495
 *         return self.raw_path.split(b';', 1)[0]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def params(self):
 *         if b';' in self.raw_path:
 */
  __Pyx_TraceLine(495,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_params, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":503
 * 
 *     @property
 *     def username(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */
  __Pyx_TraceLine(503,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_7username, 0, __pyx_n_s_ParseResult_username, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "parser.pyx":502
 *             return b''
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def username(self):
 *         if not self.userinfo:
 */
  __Pyx_TraceLine(502,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_username, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":509
 * 
 *     @property
 *     def password(self):             # <<<<<<<<<<<<<<
 *         if not self.userinfo:
 *             return
 */
  __Pyx_TraceLine(509,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_9password, 0, __pyx_n_s_ParseResult_password, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "parser.pyx":508
 *         return self.userinfo.split(b':', 1)[0]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def password(self):
 *         if not self.userinfo:
 */
  __Pyx_TraceLine(508,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_password, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":514
 *         return self.userinfo.split(b':', 1)[1]
 * 
 *     def as_strings(self):             # <<<<<<<<<<<<<<
 *         if six.PY3:
 *             args = [i == 2 and str(x) or x.decode() for i, x in enumerate(self)]
 */
  __Pyx_TraceLine(514,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_11as_strings, 0, __pyx_n_s_ParseResult_as_strings, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_as_strings, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":521
 *         return self.__class__(*args)
 * 
 *     def _as_urlparse_result_tuple(self):             # <<<<<<<<<<<<<<
 *         ret = [self.scheme, self.netloc, self.path, self.params, self.query, self.fragment]
 *         if six.PY3:
 */
  __Pyx_TraceLine(521,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_13_as_urlparse_result_tuple, 0, __pyx_n_s_ParseResult__as_urlparse_result, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_as_urlparse_result_tuple, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":527
 *         return ret
 * 
 *     def as_urlparse_result(self):             # <<<<<<<<<<<<<<
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 */
  __Pyx_TraceLine(527,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_15as_urlparse_result, 0, __pyx_n_s_ParseResult_as_urlparse_result, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_as_urlparse_result, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":530
 *         return urlparse.ParseResult(*self._as_urlparse_result_tuple())
 * 
 *     def geturl(self):             # <<<<<<<<<<<<<<
 *         return urlparse.urlunparse(self._as_urlparse_result_tuple())
 * 
 */
  __Pyx_TraceLine(530,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6parser_11ParseResult_17geturl, 0, __pyx_n_s_ParseResult_geturl, NULL, __pyx_n_s_parser, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_geturl, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "parser.pyx":471
 * 
 * 
 * class ParseResult(collections.namedtuple('ParseResult',             # <<<<<<<<<<<<<<
 *                                          ['scheme', 'hostname', 'port', 'raw_path', 'query', 'fragment', 'userinfo'])):
 *     __slots__ = ()
 */
  __Pyx_TraceLine(471,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_ParseResult, __pyx_t_5, __pyx_t_10, NULL, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseResult, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "parser.pyx":1
 * #cython: c_string_encoding=ascii  # for cython>=0.19             # <<<<<<<<<<<<<<
 * from  libcpp.string  cimport string as libcpp_string
 * from  libcpp.set     cimport set as libcpp_set
 */
  __Pyx_TraceLine(1,0,{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init parser");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    PyErr_Fetch(&type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        PyErr_Restore(type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        0,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE enum http_parser_type __Pyx_PyInt_As_enum__http_parser_type(PyObject *x) {
    const enum http_parser_type neg_one = (enum http_parser_type) -1, const_zero = (enum http_parser_type) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum http_parser_type) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum http_parser_type, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum http_parser_type) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum http_parser_type) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum http_parser_type, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum http_parser_type) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) >= 2 * PyLong_SHIFT) {
                            return (enum http_parser_type) (((((enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum http_parser_type) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) >= 3 * PyLong_SHIFT) {
                            return (enum http_parser_type) (((((((enum http_parser_type)digits[2]) << PyLong_SHIFT) | (enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum http_parser_type) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) >= 4 * PyLong_SHIFT) {
                            return (enum http_parser_type) (((((((((enum http_parser_type)digits[3]) << PyLong_SHIFT) | (enum http_parser_type)digits[2]) << PyLong_SHIFT) | (enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum http_parser_type) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum http_parser_type) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum http_parser_type, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(enum http_parser_type) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum http_parser_type, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum http_parser_type) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum http_parser_type, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(enum http_parser_type,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum http_parser_type) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) - 1 > 2 * PyLong_SHIFT) {
                            return (enum http_parser_type) (((enum http_parser_type)-1)*(((((enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum http_parser_type) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) - 1 > 2 * PyLong_SHIFT) {
                            return (enum http_parser_type) ((((((enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum http_parser_type) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) - 1 > 3 * PyLong_SHIFT) {
                            return (enum http_parser_type) (((enum http_parser_type)-1)*(((((((enum http_parser_type)digits[2]) << PyLong_SHIFT) | (enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum http_parser_type) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) - 1 > 3 * PyLong_SHIFT) {
                            return (enum http_parser_type) ((((((((enum http_parser_type)digits[2]) << PyLong_SHIFT) | (enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum http_parser_type) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) - 1 > 4 * PyLong_SHIFT) {
                            return (enum http_parser_type) (((enum http_parser_type)-1)*(((((((((enum http_parser_type)digits[3]) << PyLong_SHIFT) | (enum http_parser_type)digits[2]) << PyLong_SHIFT) | (enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum http_parser_type) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum http_parser_type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum http_parser_type) - 1 > 4 * PyLong_SHIFT) {
                            return (enum http_parser_type) ((((((((((enum http_parser_type)digits[3]) << PyLong_SHIFT) | (enum http_parser_type)digits[2]) << PyLong_SHIFT) | (enum http_parser_type)digits[1]) << PyLong_SHIFT) | (enum http_parser_type)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum http_parser_type) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum http_parser_type, long, PyLong_AsLong(x))
            } else if (sizeof(enum http_parser_type) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum http_parser_type, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum http_parser_type val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum http_parser_type) -1;
        }
    } else {
        enum http_parser_type val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (enum http_parser_type) -1;
        val = __Pyx_PyInt_As_enum__http_parser_type(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum http_parser_type");
    return (enum http_parser_type) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum http_parser_type");
    return (enum http_parser_type) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__flags(enum flags value) {
    const enum flags neg_one = (enum flags) -1, const_zero = (enum flags) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum flags) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum flags) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum flags) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum flags) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum flags) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum flags),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__http_parser_type(enum http_parser_type value) {
    const enum http_parser_type neg_one = (enum http_parser_type) -1, const_zero = (enum http_parser_type) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum http_parser_type) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum http_parser_type) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum http_parser_type) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum http_parser_type) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum http_parser_type) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum http_parser_type),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__http_parser_url_fields(enum http_parser_url_fields value) {
    const enum http_parser_url_fields neg_one = (enum http_parser_url_fields) -1, const_zero = (enum http_parser_url_fields) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum http_parser_url_fields) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum http_parser_url_fields) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum http_parser_url_fields) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum http_parser_url_fields) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum http_parser_url_fields) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum http_parser_url_fields),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value) {
    const uint16_t neg_one = (uint16_t) -1, const_zero = (uint16_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(uint16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
